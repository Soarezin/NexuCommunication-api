// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================================================================
// ENUMS E MODELOS AUXILIARES
// =========================================================================

enum UserRole {
  Admin
  Lawyer
  Paralegal
}

enum CaseStatus {
  Open
  InProgress
  Closed
  Pending
  OnHold
  Archived
}

enum CaseParticipantUserRole {
  LeadLawyer
  CoLawyer
  Paralegal
  Observer
}

enum CaseParticipantClientType {
  MainContact
  BillingContact
  LegalRepresentative
  OtherContact
}

// >>> MODELOS DE PERMISSÃO DEFINIDOS ANTES DO MODELO User <<<
model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userPermissions UserPermission[]
}

model UserPermission {
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionId String
  permission  Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@id([userId, permissionId])
}


// =========================================================================
// MODELOS PRINCIPAIS
// =========================================================================

// 1. Modelo Tenant (Escritório de Advocacia)
model Tenant {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  clients  Client[]
  cases    Case[]
  messages Message[]
  files    File[]
  invites  Invite[]
  caseEvents CaseEvent[]
}

// 2. Modelo User (Advogados - Usuários do Sistema)
model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  role      UserRole @default(Lawyer)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  primaryCases Case[] @relation("LawyerPrimaryCases")
  sentMessages Message[] @relation("SentByUser")
  participatingCases CaseParticipantUser[]
  caseEvents   CaseEvent[]
  userPermissions UserPermission[] // AGORA UserPermission JÁ FOI DEFINIDO ACIMA
}

model Client {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  primaryCases Case[] @relation("ClientPrimaryCases")

  receivedMessages Message[] @relation("ReceivedByClient")
  participatingCases CaseParticipantClient[]
}

model Case {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      CaseStatus @default(Open)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  tenantId String
  tenant   Tenant     @relation(fields: [tenantId], references: [id])

  lawyerPrimaryId String?
  lawyerPrimary   User?      @relation("LawyerPrimaryCases", fields: [lawyerPrimaryId], references: [id])

  clientPrimaryId String?
  clientPrimary   Client?    @relation("ClientPrimaryCases", fields: [clientPrimaryId], references: [id])

  messages        Message[]
  files           File[]
  invites         Invite[]
  caseEvents      CaseEvent[]

  participantsUsers CaseParticipantUser[]
  participantsClients CaseParticipantClient[]
}

// ... (o restante dos modelos CaseParticipantUser, CaseParticipantClient, etc., sem alteração)
model CaseParticipantUser {
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   CaseParticipantUserRole @default(CoLawyer)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([caseId, userId])
}

model CaseParticipantClient {
  caseId   String
  case     Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  type     CaseParticipantClientType @default(OtherContact)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([caseId, clientId])
}

model CaseEvent {
  id        String   @id @default(uuid())
  type      String
  description String?
  timestamp DateTime @default(now())

  caseId    String
  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Message {
  id             String    @id @default(uuid())
  content        String
  viewed         Boolean   @default(false)
  viewedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  tenantId       String
  tenant         Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  caseId         String
  case           Case      @relation(fields: [caseId], references: [id], onDelete: Cascade)

  senderId       String
  sender         User      @relation("SentByUser", fields: [senderId], references: [id], onDelete: Cascade)

  receiverClientId String
  receiverClient   Client    @relation("ReceivedByClient", fields: [receiverClientId], references: [id], onDelete: Cascade)
}

model File {
  id         String   @id @default(uuid())
  name       String
  url        String
  uploadedAt DateTime @default(now())

  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  caseId     String
  case       Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
}

model Invite {
  id         String    @id @default(uuid())
  email      String
  token      String    @unique
  expiresAt  DateTime
  isUsed     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  caseId     String
  case       Case      @relation(fields: [caseId], references: [id], onDelete: Cascade)

  tenantId   String
  tenant     Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}