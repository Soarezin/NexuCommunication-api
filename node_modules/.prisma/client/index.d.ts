
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model UserPermission
 * 
 */
export type UserPermission = $Result.DefaultSelection<Prisma.$UserPermissionPayload>
/**
 * Model Tenant
 * 
 */
export type Tenant = $Result.DefaultSelection<Prisma.$TenantPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Client
 * 
 */
export type Client = $Result.DefaultSelection<Prisma.$ClientPayload>
/**
 * Model Case
 * 
 */
export type Case = $Result.DefaultSelection<Prisma.$CasePayload>
/**
 * Model CaseParticipantUser
 * 
 */
export type CaseParticipantUser = $Result.DefaultSelection<Prisma.$CaseParticipantUserPayload>
/**
 * Model CaseParticipantClient
 * 
 */
export type CaseParticipantClient = $Result.DefaultSelection<Prisma.$CaseParticipantClientPayload>
/**
 * Model CaseEvent
 * 
 */
export type CaseEvent = $Result.DefaultSelection<Prisma.$CaseEventPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>
/**
 * Model Invite
 * 
 */
export type Invite = $Result.DefaultSelection<Prisma.$InvitePayload>
/**
 * Model GeneralSetting
 * 
 */
export type GeneralSetting = $Result.DefaultSelection<Prisma.$GeneralSettingPayload>
/**
 * Model NotificationSetting
 * 
 */
export type NotificationSetting = $Result.DefaultSelection<Prisma.$NotificationSettingPayload>
/**
 * Model SecuritySetting
 * 
 */
export type SecuritySetting = $Result.DefaultSelection<Prisma.$SecuritySettingPayload>
/**
 * Model BillingSetting
 * 
 */
export type BillingSetting = $Result.DefaultSelection<Prisma.$BillingSettingPayload>
/**
 * Model IntegrationSetting
 * 
 */
export type IntegrationSetting = $Result.DefaultSelection<Prisma.$IntegrationSettingPayload>
/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  Admin: 'Admin',
  Lawyer: 'Lawyer',
  Paralegal: 'Paralegal',
  Client: 'Client'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const CaseStatus: {
  Open: 'Open',
  InProgress: 'InProgress',
  Closed: 'Closed',
  Pending: 'Pending',
  OnHold: 'OnHold',
  Archived: 'Archived'
};

export type CaseStatus = (typeof CaseStatus)[keyof typeof CaseStatus]


export const CaseParticipantUserRole: {
  LeadLawyer: 'LeadLawyer',
  CoLawyer: 'CoLawyer',
  Paralegal: 'Paralegal',
  Observer: 'Observer'
};

export type CaseParticipantUserRole = (typeof CaseParticipantUserRole)[keyof typeof CaseParticipantUserRole]


export const CaseParticipantClientType: {
  MainContact: 'MainContact',
  BillingContact: 'BillingContact',
  LegalRepresentative: 'LegalRepresentative',
  OtherContact: 'OtherContact'
};

export type CaseParticipantClientType = (typeof CaseParticipantClientType)[keyof typeof CaseParticipantClientType]


export const EmployeeStatus: {
  Pending: 'Pending',
  Active: 'Active',
  Suspended: 'Suspended',
  Revoked: 'Revoked'
};

export type EmployeeStatus = (typeof EmployeeStatus)[keyof typeof EmployeeStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type CaseStatus = $Enums.CaseStatus

export const CaseStatus: typeof $Enums.CaseStatus

export type CaseParticipantUserRole = $Enums.CaseParticipantUserRole

export const CaseParticipantUserRole: typeof $Enums.CaseParticipantUserRole

export type CaseParticipantClientType = $Enums.CaseParticipantClientType

export const CaseParticipantClientType: typeof $Enums.CaseParticipantClientType

export type EmployeeStatus = $Enums.EmployeeStatus

export const EmployeeStatus: typeof $Enums.EmployeeStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Permissions
 * const permissions = await prisma.permission.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Permissions
   * const permissions = await prisma.permission.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs>;

  /**
   * `prisma.userPermission`: Exposes CRUD operations for the **UserPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPermissions
    * const userPermissions = await prisma.userPermission.findMany()
    * ```
    */
  get userPermission(): Prisma.UserPermissionDelegate<ExtArgs>;

  /**
   * `prisma.tenant`: Exposes CRUD operations for the **Tenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tenants
    * const tenants = await prisma.tenant.findMany()
    * ```
    */
  get tenant(): Prisma.TenantDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs>;

  /**
   * `prisma.case`: Exposes CRUD operations for the **Case** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cases
    * const cases = await prisma.case.findMany()
    * ```
    */
  get case(): Prisma.CaseDelegate<ExtArgs>;

  /**
   * `prisma.caseParticipantUser`: Exposes CRUD operations for the **CaseParticipantUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseParticipantUsers
    * const caseParticipantUsers = await prisma.caseParticipantUser.findMany()
    * ```
    */
  get caseParticipantUser(): Prisma.CaseParticipantUserDelegate<ExtArgs>;

  /**
   * `prisma.caseParticipantClient`: Exposes CRUD operations for the **CaseParticipantClient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseParticipantClients
    * const caseParticipantClients = await prisma.caseParticipantClient.findMany()
    * ```
    */
  get caseParticipantClient(): Prisma.CaseParticipantClientDelegate<ExtArgs>;

  /**
   * `prisma.caseEvent`: Exposes CRUD operations for the **CaseEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseEvents
    * const caseEvents = await prisma.caseEvent.findMany()
    * ```
    */
  get caseEvent(): Prisma.CaseEventDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs>;

  /**
   * `prisma.invite`: Exposes CRUD operations for the **Invite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invites
    * const invites = await prisma.invite.findMany()
    * ```
    */
  get invite(): Prisma.InviteDelegate<ExtArgs>;

  /**
   * `prisma.generalSetting`: Exposes CRUD operations for the **GeneralSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneralSettings
    * const generalSettings = await prisma.generalSetting.findMany()
    * ```
    */
  get generalSetting(): Prisma.GeneralSettingDelegate<ExtArgs>;

  /**
   * `prisma.notificationSetting`: Exposes CRUD operations for the **NotificationSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationSettings
    * const notificationSettings = await prisma.notificationSetting.findMany()
    * ```
    */
  get notificationSetting(): Prisma.NotificationSettingDelegate<ExtArgs>;

  /**
   * `prisma.securitySetting`: Exposes CRUD operations for the **SecuritySetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SecuritySettings
    * const securitySettings = await prisma.securitySetting.findMany()
    * ```
    */
  get securitySetting(): Prisma.SecuritySettingDelegate<ExtArgs>;

  /**
   * `prisma.billingSetting`: Exposes CRUD operations for the **BillingSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BillingSettings
    * const billingSettings = await prisma.billingSetting.findMany()
    * ```
    */
  get billingSetting(): Prisma.BillingSettingDelegate<ExtArgs>;

  /**
   * `prisma.integrationSetting`: Exposes CRUD operations for the **IntegrationSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IntegrationSettings
    * const integrationSettings = await prisma.integrationSetting.findMany()
    * ```
    */
  get integrationSetting(): Prisma.IntegrationSettingDelegate<ExtArgs>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Permission: 'Permission',
    UserPermission: 'UserPermission',
    Tenant: 'Tenant',
    User: 'User',
    Client: 'Client',
    Case: 'Case',
    CaseParticipantUser: 'CaseParticipantUser',
    CaseParticipantClient: 'CaseParticipantClient',
    CaseEvent: 'CaseEvent',
    Message: 'Message',
    File: 'File',
    Invite: 'Invite',
    GeneralSetting: 'GeneralSetting',
    NotificationSetting: 'NotificationSetting',
    SecuritySetting: 'SecuritySetting',
    BillingSetting: 'BillingSetting',
    IntegrationSetting: 'IntegrationSetting',
    Employee: 'Employee'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "permission" | "userPermission" | "tenant" | "user" | "client" | "case" | "caseParticipantUser" | "caseParticipantClient" | "caseEvent" | "message" | "file" | "invite" | "generalSetting" | "notificationSetting" | "securitySetting" | "billingSetting" | "integrationSetting" | "employee"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      UserPermission: {
        payload: Prisma.$UserPermissionPayload<ExtArgs>
        fields: Prisma.UserPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findFirst: {
            args: Prisma.UserPermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findMany: {
            args: Prisma.UserPermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          create: {
            args: Prisma.UserPermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          createMany: {
            args: Prisma.UserPermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          delete: {
            args: Prisma.UserPermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          update: {
            args: Prisma.UserPermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          deleteMany: {
            args: Prisma.UserPermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserPermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          aggregate: {
            args: Prisma.UserPermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPermission>
          }
          groupBy: {
            args: Prisma.UserPermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPermissionCountArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionCountAggregateOutputType> | number
          }
        }
      }
      Tenant: {
        payload: Prisma.$TenantPayload<ExtArgs>
        fields: Prisma.TenantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findFirst: {
            args: Prisma.TenantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findMany: {
            args: Prisma.TenantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          create: {
            args: Prisma.TenantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          createMany: {
            args: Prisma.TenantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          delete: {
            args: Prisma.TenantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          update: {
            args: Prisma.TenantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          deleteMany: {
            args: Prisma.TenantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TenantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          aggregate: {
            args: Prisma.TenantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenant>
          }
          groupBy: {
            args: Prisma.TenantGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantCountArgs<ExtArgs>
            result: $Utils.Optional<TenantCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Client: {
        payload: Prisma.$ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      Case: {
        payload: Prisma.$CasePayload<ExtArgs>
        fields: Prisma.CaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          findFirst: {
            args: Prisma.CaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          findMany: {
            args: Prisma.CaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          create: {
            args: Prisma.CaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          createMany: {
            args: Prisma.CaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          delete: {
            args: Prisma.CaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          update: {
            args: Prisma.CaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          deleteMany: {
            args: Prisma.CaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          aggregate: {
            args: Prisma.CaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCase>
          }
          groupBy: {
            args: Prisma.CaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseCountArgs<ExtArgs>
            result: $Utils.Optional<CaseCountAggregateOutputType> | number
          }
        }
      }
      CaseParticipantUser: {
        payload: Prisma.$CaseParticipantUserPayload<ExtArgs>
        fields: Prisma.CaseParticipantUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseParticipantUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseParticipantUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantUserPayload>
          }
          findFirst: {
            args: Prisma.CaseParticipantUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseParticipantUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantUserPayload>
          }
          findMany: {
            args: Prisma.CaseParticipantUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantUserPayload>[]
          }
          create: {
            args: Prisma.CaseParticipantUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantUserPayload>
          }
          createMany: {
            args: Prisma.CaseParticipantUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseParticipantUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantUserPayload>[]
          }
          delete: {
            args: Prisma.CaseParticipantUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantUserPayload>
          }
          update: {
            args: Prisma.CaseParticipantUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantUserPayload>
          }
          deleteMany: {
            args: Prisma.CaseParticipantUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseParticipantUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CaseParticipantUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantUserPayload>
          }
          aggregate: {
            args: Prisma.CaseParticipantUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseParticipantUser>
          }
          groupBy: {
            args: Prisma.CaseParticipantUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseParticipantUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseParticipantUserCountArgs<ExtArgs>
            result: $Utils.Optional<CaseParticipantUserCountAggregateOutputType> | number
          }
        }
      }
      CaseParticipantClient: {
        payload: Prisma.$CaseParticipantClientPayload<ExtArgs>
        fields: Prisma.CaseParticipantClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseParticipantClientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseParticipantClientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantClientPayload>
          }
          findFirst: {
            args: Prisma.CaseParticipantClientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseParticipantClientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantClientPayload>
          }
          findMany: {
            args: Prisma.CaseParticipantClientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantClientPayload>[]
          }
          create: {
            args: Prisma.CaseParticipantClientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantClientPayload>
          }
          createMany: {
            args: Prisma.CaseParticipantClientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseParticipantClientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantClientPayload>[]
          }
          delete: {
            args: Prisma.CaseParticipantClientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantClientPayload>
          }
          update: {
            args: Prisma.CaseParticipantClientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantClientPayload>
          }
          deleteMany: {
            args: Prisma.CaseParticipantClientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseParticipantClientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CaseParticipantClientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseParticipantClientPayload>
          }
          aggregate: {
            args: Prisma.CaseParticipantClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseParticipantClient>
          }
          groupBy: {
            args: Prisma.CaseParticipantClientGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseParticipantClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseParticipantClientCountArgs<ExtArgs>
            result: $Utils.Optional<CaseParticipantClientCountAggregateOutputType> | number
          }
        }
      }
      CaseEvent: {
        payload: Prisma.$CaseEventPayload<ExtArgs>
        fields: Prisma.CaseEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseEventPayload>
          }
          findFirst: {
            args: Prisma.CaseEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseEventPayload>
          }
          findMany: {
            args: Prisma.CaseEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseEventPayload>[]
          }
          create: {
            args: Prisma.CaseEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseEventPayload>
          }
          createMany: {
            args: Prisma.CaseEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseEventPayload>[]
          }
          delete: {
            args: Prisma.CaseEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseEventPayload>
          }
          update: {
            args: Prisma.CaseEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseEventPayload>
          }
          deleteMany: {
            args: Prisma.CaseEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CaseEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseEventPayload>
          }
          aggregate: {
            args: Prisma.CaseEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseEvent>
          }
          groupBy: {
            args: Prisma.CaseEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseEventCountArgs<ExtArgs>
            result: $Utils.Optional<CaseEventCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      Invite: {
        payload: Prisma.$InvitePayload<ExtArgs>
        fields: Prisma.InviteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InviteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InviteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          findFirst: {
            args: Prisma.InviteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InviteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          findMany: {
            args: Prisma.InviteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>[]
          }
          create: {
            args: Prisma.InviteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          createMany: {
            args: Prisma.InviteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InviteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>[]
          }
          delete: {
            args: Prisma.InviteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          update: {
            args: Prisma.InviteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          deleteMany: {
            args: Prisma.InviteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InviteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InviteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          aggregate: {
            args: Prisma.InviteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvite>
          }
          groupBy: {
            args: Prisma.InviteGroupByArgs<ExtArgs>
            result: $Utils.Optional<InviteGroupByOutputType>[]
          }
          count: {
            args: Prisma.InviteCountArgs<ExtArgs>
            result: $Utils.Optional<InviteCountAggregateOutputType> | number
          }
        }
      }
      GeneralSetting: {
        payload: Prisma.$GeneralSettingPayload<ExtArgs>
        fields: Prisma.GeneralSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneralSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneralSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSettingPayload>
          }
          findFirst: {
            args: Prisma.GeneralSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneralSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSettingPayload>
          }
          findMany: {
            args: Prisma.GeneralSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSettingPayload>[]
          }
          create: {
            args: Prisma.GeneralSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSettingPayload>
          }
          createMany: {
            args: Prisma.GeneralSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GeneralSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSettingPayload>[]
          }
          delete: {
            args: Prisma.GeneralSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSettingPayload>
          }
          update: {
            args: Prisma.GeneralSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSettingPayload>
          }
          deleteMany: {
            args: Prisma.GeneralSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GeneralSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GeneralSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSettingPayload>
          }
          aggregate: {
            args: Prisma.GeneralSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGeneralSetting>
          }
          groupBy: {
            args: Prisma.GeneralSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<GeneralSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneralSettingCountArgs<ExtArgs>
            result: $Utils.Optional<GeneralSettingCountAggregateOutputType> | number
          }
        }
      }
      NotificationSetting: {
        payload: Prisma.$NotificationSettingPayload<ExtArgs>
        fields: Prisma.NotificationSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingPayload>
          }
          findFirst: {
            args: Prisma.NotificationSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingPayload>
          }
          findMany: {
            args: Prisma.NotificationSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingPayload>[]
          }
          create: {
            args: Prisma.NotificationSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingPayload>
          }
          createMany: {
            args: Prisma.NotificationSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingPayload>[]
          }
          delete: {
            args: Prisma.NotificationSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingPayload>
          }
          update: {
            args: Prisma.NotificationSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingPayload>
          }
          deleteMany: {
            args: Prisma.NotificationSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingPayload>
          }
          aggregate: {
            args: Prisma.NotificationSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationSetting>
          }
          groupBy: {
            args: Prisma.NotificationSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationSettingCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationSettingCountAggregateOutputType> | number
          }
        }
      }
      SecuritySetting: {
        payload: Prisma.$SecuritySettingPayload<ExtArgs>
        fields: Prisma.SecuritySettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SecuritySettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SecuritySettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingPayload>
          }
          findFirst: {
            args: Prisma.SecuritySettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SecuritySettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingPayload>
          }
          findMany: {
            args: Prisma.SecuritySettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingPayload>[]
          }
          create: {
            args: Prisma.SecuritySettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingPayload>
          }
          createMany: {
            args: Prisma.SecuritySettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SecuritySettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingPayload>[]
          }
          delete: {
            args: Prisma.SecuritySettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingPayload>
          }
          update: {
            args: Prisma.SecuritySettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingPayload>
          }
          deleteMany: {
            args: Prisma.SecuritySettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SecuritySettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SecuritySettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingPayload>
          }
          aggregate: {
            args: Prisma.SecuritySettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSecuritySetting>
          }
          groupBy: {
            args: Prisma.SecuritySettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SecuritySettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SecuritySettingCountArgs<ExtArgs>
            result: $Utils.Optional<SecuritySettingCountAggregateOutputType> | number
          }
        }
      }
      BillingSetting: {
        payload: Prisma.$BillingSettingPayload<ExtArgs>
        fields: Prisma.BillingSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BillingSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BillingSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingSettingPayload>
          }
          findFirst: {
            args: Prisma.BillingSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BillingSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingSettingPayload>
          }
          findMany: {
            args: Prisma.BillingSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingSettingPayload>[]
          }
          create: {
            args: Prisma.BillingSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingSettingPayload>
          }
          createMany: {
            args: Prisma.BillingSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BillingSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingSettingPayload>[]
          }
          delete: {
            args: Prisma.BillingSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingSettingPayload>
          }
          update: {
            args: Prisma.BillingSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingSettingPayload>
          }
          deleteMany: {
            args: Prisma.BillingSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BillingSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BillingSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingSettingPayload>
          }
          aggregate: {
            args: Prisma.BillingSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBillingSetting>
          }
          groupBy: {
            args: Prisma.BillingSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BillingSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.BillingSettingCountArgs<ExtArgs>
            result: $Utils.Optional<BillingSettingCountAggregateOutputType> | number
          }
        }
      }
      IntegrationSetting: {
        payload: Prisma.$IntegrationSettingPayload<ExtArgs>
        fields: Prisma.IntegrationSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IntegrationSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IntegrationSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSettingPayload>
          }
          findFirst: {
            args: Prisma.IntegrationSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IntegrationSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSettingPayload>
          }
          findMany: {
            args: Prisma.IntegrationSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSettingPayload>[]
          }
          create: {
            args: Prisma.IntegrationSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSettingPayload>
          }
          createMany: {
            args: Prisma.IntegrationSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IntegrationSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSettingPayload>[]
          }
          delete: {
            args: Prisma.IntegrationSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSettingPayload>
          }
          update: {
            args: Prisma.IntegrationSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSettingPayload>
          }
          deleteMany: {
            args: Prisma.IntegrationSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IntegrationSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IntegrationSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSettingPayload>
          }
          aggregate: {
            args: Prisma.IntegrationSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIntegrationSetting>
          }
          groupBy: {
            args: Prisma.IntegrationSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<IntegrationSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.IntegrationSettingCountArgs<ExtArgs>
            result: $Utils.Optional<IntegrationSettingCountAggregateOutputType> | number
          }
        }
      }
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    userPermissions: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userPermissions?: boolean | PermissionCountOutputTypeCountUserPermissionsArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountUserPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }


  /**
   * Count Type TenantCountOutputType
   */

  export type TenantCountOutputType = {
    users: number
    clients: number
    cases: number
    messages: number
    files: number
    invites: number
    caseEvents: number
    employees: number
  }

  export type TenantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | TenantCountOutputTypeCountUsersArgs
    clients?: boolean | TenantCountOutputTypeCountClientsArgs
    cases?: boolean | TenantCountOutputTypeCountCasesArgs
    messages?: boolean | TenantCountOutputTypeCountMessagesArgs
    files?: boolean | TenantCountOutputTypeCountFilesArgs
    invites?: boolean | TenantCountOutputTypeCountInvitesArgs
    caseEvents?: boolean | TenantCountOutputTypeCountCaseEventsArgs
    employees?: boolean | TenantCountOutputTypeCountEmployeesArgs
  }

  // Custom InputTypes
  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantCountOutputType
     */
    select?: TenantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountClientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InviteWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountCaseEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseEventWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    primaryCases: number
    sentMessages: number
    participatingCases: number
    caseEvents: number
    userPermissions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    primaryCases?: boolean | UserCountOutputTypeCountPrimaryCasesArgs
    sentMessages?: boolean | UserCountOutputTypeCountSentMessagesArgs
    participatingCases?: boolean | UserCountOutputTypeCountParticipatingCasesArgs
    caseEvents?: boolean | UserCountOutputTypeCountCaseEventsArgs
    userPermissions?: boolean | UserCountOutputTypeCountUserPermissionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPrimaryCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountParticipatingCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseParticipantUserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCaseEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseEventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    primaryCases: number
    receivedMessages: number
    sentMessages: number
    participatingCases: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    primaryCases?: boolean | ClientCountOutputTypeCountPrimaryCasesArgs
    receivedMessages?: boolean | ClientCountOutputTypeCountReceivedMessagesArgs
    sentMessages?: boolean | ClientCountOutputTypeCountSentMessagesArgs
    participatingCases?: boolean | ClientCountOutputTypeCountParticipatingCasesArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountPrimaryCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountReceivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountParticipatingCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseParticipantClientWhereInput
  }


  /**
   * Count Type CaseCountOutputType
   */

  export type CaseCountOutputType = {
    messages: number
    files: number
    invites: number
    caseEvents: number
    participantsUsers: number
    participantsClients: number
  }

  export type CaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | CaseCountOutputTypeCountMessagesArgs
    files?: boolean | CaseCountOutputTypeCountFilesArgs
    invites?: boolean | CaseCountOutputTypeCountInvitesArgs
    caseEvents?: boolean | CaseCountOutputTypeCountCaseEventsArgs
    participantsUsers?: boolean | CaseCountOutputTypeCountParticipantsUsersArgs
    participantsClients?: boolean | CaseCountOutputTypeCountParticipantsClientsArgs
  }

  // Custom InputTypes
  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseCountOutputType
     */
    select?: CaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InviteWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountCaseEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseEventWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountParticipantsUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseParticipantUserWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountParticipantsClientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseParticipantClientWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PermissionMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userPermissions?: boolean | Permission$userPermissionsArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userPermissions?: boolean | Permission$userPermissionsArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      userPermissions: Prisma.$UserPermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Permissions and returns the data saved in the database.
     * @param {PermissionCreateManyAndReturnArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, PermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userPermissions<T extends Permission$userPermissionsArgs<ExtArgs> = {}>(args?: Subset<T, Permission$userPermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */ 
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'String'>
    readonly name: FieldRef<"Permission", 'String'>
    readonly description: FieldRef<"Permission", 'String'>
    readonly createdAt: FieldRef<"Permission", 'DateTime'>
    readonly updatedAt: FieldRef<"Permission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission createManyAndReturn
   */
  export type PermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission.userPermissions
   */
  export type Permission$userPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model UserPermission
   */

  export type AggregateUserPermission = {
    _count: UserPermissionCountAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  export type UserPermissionMinAggregateOutputType = {
    userId: string | null
    permissionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPermissionMaxAggregateOutputType = {
    userId: string | null
    permissionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPermissionCountAggregateOutputType = {
    userId: number
    permissionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserPermissionMinAggregateInputType = {
    userId?: true
    permissionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPermissionMaxAggregateInputType = {
    userId?: true
    permissionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPermissionCountAggregateInputType = {
    userId?: true
    permissionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserPermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermission to aggregate.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPermissions
    **/
    _count?: true | UserPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPermissionMaxAggregateInputType
  }

  export type GetUserPermissionAggregateType<T extends UserPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPermission[P]>
      : GetScalarType<T[P], AggregateUserPermission[P]>
  }




  export type UserPermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithAggregationInput | UserPermissionOrderByWithAggregationInput[]
    by: UserPermissionScalarFieldEnum[] | UserPermissionScalarFieldEnum
    having?: UserPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPermissionCountAggregateInputType | true
    _min?: UserPermissionMinAggregateInputType
    _max?: UserPermissionMaxAggregateInputType
  }

  export type UserPermissionGroupByOutputType = {
    userId: string
    permissionId: string
    createdAt: Date
    updatedAt: Date
    _count: UserPermissionCountAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  type GetUserPermissionGroupByPayload<T extends UserPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
        }
      >
    >


  export type UserPermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    permissionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    permissionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectScalar = {
    userId?: boolean
    permissionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserPermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type UserPermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }

  export type $UserPermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPermission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      permissionId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userPermission"]>
    composites: {}
  }

  type UserPermissionGetPayload<S extends boolean | null | undefined | UserPermissionDefaultArgs> = $Result.GetResult<Prisma.$UserPermissionPayload, S>

  type UserPermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserPermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserPermissionCountAggregateInputType | true
    }

  export interface UserPermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPermission'], meta: { name: 'UserPermission' } }
    /**
     * Find zero or one UserPermission that matches the filter.
     * @param {UserPermissionFindUniqueArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPermissionFindUniqueArgs>(args: SelectSubset<T, UserPermissionFindUniqueArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserPermission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserPermissionFindUniqueOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPermissionFindFirstArgs>(args?: SelectSubset<T, UserPermissionFindFirstArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPermissions
     * const userPermissions = await prisma.userPermission.findMany()
     * 
     * // Get first 10 UserPermissions
     * const userPermissions = await prisma.userPermission.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userPermissionWithUserIdOnly = await prisma.userPermission.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserPermissionFindManyArgs>(args?: SelectSubset<T, UserPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserPermission.
     * @param {UserPermissionCreateArgs} args - Arguments to create a UserPermission.
     * @example
     * // Create one UserPermission
     * const UserPermission = await prisma.userPermission.create({
     *   data: {
     *     // ... data to create a UserPermission
     *   }
     * })
     * 
     */
    create<T extends UserPermissionCreateArgs>(args: SelectSubset<T, UserPermissionCreateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserPermissions.
     * @param {UserPermissionCreateManyArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPermissionCreateManyArgs>(args?: SelectSubset<T, UserPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPermissions and returns the data saved in the database.
     * @param {UserPermissionCreateManyAndReturnArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPermissions and only return the `userId`
     * const userPermissionWithUserIdOnly = await prisma.userPermission.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserPermission.
     * @param {UserPermissionDeleteArgs} args - Arguments to delete one UserPermission.
     * @example
     * // Delete one UserPermission
     * const UserPermission = await prisma.userPermission.delete({
     *   where: {
     *     // ... filter to delete one UserPermission
     *   }
     * })
     * 
     */
    delete<T extends UserPermissionDeleteArgs>(args: SelectSubset<T, UserPermissionDeleteArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserPermission.
     * @param {UserPermissionUpdateArgs} args - Arguments to update one UserPermission.
     * @example
     * // Update one UserPermission
     * const userPermission = await prisma.userPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPermissionUpdateArgs>(args: SelectSubset<T, UserPermissionUpdateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserPermissions.
     * @param {UserPermissionDeleteManyArgs} args - Arguments to filter UserPermissions to delete.
     * @example
     * // Delete a few UserPermissions
     * const { count } = await prisma.userPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPermissionDeleteManyArgs>(args?: SelectSubset<T, UserPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPermissions
     * const userPermission = await prisma.userPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPermissionUpdateManyArgs>(args: SelectSubset<T, UserPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPermission.
     * @param {UserPermissionUpsertArgs} args - Arguments to update or create a UserPermission.
     * @example
     * // Update or create a UserPermission
     * const userPermission = await prisma.userPermission.upsert({
     *   create: {
     *     // ... data to create a UserPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPermission we want to update
     *   }
     * })
     */
    upsert<T extends UserPermissionUpsertArgs>(args: SelectSubset<T, UserPermissionUpsertArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionCountArgs} args - Arguments to filter UserPermissions to count.
     * @example
     * // Count the number of UserPermissions
     * const count = await prisma.userPermission.count({
     *   where: {
     *     // ... the filter for the UserPermissions we want to count
     *   }
     * })
    **/
    count<T extends UserPermissionCountArgs>(
      args?: Subset<T, UserPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPermissionAggregateArgs>(args: Subset<T, UserPermissionAggregateArgs>): Prisma.PrismaPromise<GetUserPermissionAggregateType<T>>

    /**
     * Group by UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPermissionGroupByArgs['orderBy'] }
        : { orderBy?: UserPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPermission model
   */
  readonly fields: UserPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPermission model
   */ 
  interface UserPermissionFieldRefs {
    readonly userId: FieldRef<"UserPermission", 'String'>
    readonly permissionId: FieldRef<"UserPermission", 'String'>
    readonly createdAt: FieldRef<"UserPermission", 'DateTime'>
    readonly updatedAt: FieldRef<"UserPermission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserPermission findUnique
   */
  export type UserPermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findUniqueOrThrow
   */
  export type UserPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findFirst
   */
  export type UserPermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findFirstOrThrow
   */
  export type UserPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findMany
   */
  export type UserPermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermissions to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission create
   */
  export type UserPermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPermission.
     */
    data: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
  }

  /**
   * UserPermission createMany
   */
  export type UserPermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPermission createManyAndReturn
   */
  export type UserPermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPermission update
   */
  export type UserPermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPermission.
     */
    data: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
    /**
     * Choose, which UserPermission to update.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission updateMany
   */
  export type UserPermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPermissions.
     */
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserPermissions to update
     */
    where?: UserPermissionWhereInput
  }

  /**
   * UserPermission upsert
   */
  export type UserPermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPermission to update in case it exists.
     */
    where: UserPermissionWhereUniqueInput
    /**
     * In case the UserPermission found by the `where` argument doesn't exist, create a new UserPermission with this data.
     */
    create: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
    /**
     * In case the UserPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
  }

  /**
   * UserPermission delete
   */
  export type UserPermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter which UserPermission to delete.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission deleteMany
   */
  export type UserPermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermissions to delete
     */
    where?: UserPermissionWhereInput
  }

  /**
   * UserPermission without action
   */
  export type UserPermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
  }


  /**
   * Model Tenant
   */

  export type AggregateTenant = {
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  export type TenantMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TenantMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TenantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenant to aggregate.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tenants
    **/
    _count?: true | TenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantMaxAggregateInputType
  }

  export type GetTenantAggregateType<T extends TenantAggregateArgs> = {
        [P in keyof T & keyof AggregateTenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenant[P]>
      : GetScalarType<T[P], AggregateTenant[P]>
  }




  export type TenantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithAggregationInput | TenantOrderByWithAggregationInput[]
    by: TenantScalarFieldEnum[] | TenantScalarFieldEnum
    having?: TenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantCountAggregateInputType | true
    _min?: TenantMinAggregateInputType
    _max?: TenantMaxAggregateInputType
  }

  export type TenantGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  type GetTenantGroupByPayload<T extends TenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantGroupByOutputType[P]>
            : GetScalarType<T[P], TenantGroupByOutputType[P]>
        }
      >
    >


  export type TenantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Tenant$usersArgs<ExtArgs>
    clients?: boolean | Tenant$clientsArgs<ExtArgs>
    cases?: boolean | Tenant$casesArgs<ExtArgs>
    messages?: boolean | Tenant$messagesArgs<ExtArgs>
    files?: boolean | Tenant$filesArgs<ExtArgs>
    invites?: boolean | Tenant$invitesArgs<ExtArgs>
    caseEvents?: boolean | Tenant$caseEventsArgs<ExtArgs>
    generalSetting?: boolean | Tenant$generalSettingArgs<ExtArgs>
    notificationSetting?: boolean | Tenant$notificationSettingArgs<ExtArgs>
    securitySetting?: boolean | Tenant$securitySettingArgs<ExtArgs>
    billingSetting?: boolean | Tenant$billingSettingArgs<ExtArgs>
    integrationSetting?: boolean | Tenant$integrationSettingArgs<ExtArgs>
    employees?: boolean | Tenant$employeesArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TenantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Tenant$usersArgs<ExtArgs>
    clients?: boolean | Tenant$clientsArgs<ExtArgs>
    cases?: boolean | Tenant$casesArgs<ExtArgs>
    messages?: boolean | Tenant$messagesArgs<ExtArgs>
    files?: boolean | Tenant$filesArgs<ExtArgs>
    invites?: boolean | Tenant$invitesArgs<ExtArgs>
    caseEvents?: boolean | Tenant$caseEventsArgs<ExtArgs>
    generalSetting?: boolean | Tenant$generalSettingArgs<ExtArgs>
    notificationSetting?: boolean | Tenant$notificationSettingArgs<ExtArgs>
    securitySetting?: boolean | Tenant$securitySettingArgs<ExtArgs>
    billingSetting?: boolean | Tenant$billingSettingArgs<ExtArgs>
    integrationSetting?: boolean | Tenant$integrationSettingArgs<ExtArgs>
    employees?: boolean | Tenant$employeesArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TenantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TenantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tenant"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      clients: Prisma.$ClientPayload<ExtArgs>[]
      cases: Prisma.$CasePayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
      files: Prisma.$FilePayload<ExtArgs>[]
      invites: Prisma.$InvitePayload<ExtArgs>[]
      caseEvents: Prisma.$CaseEventPayload<ExtArgs>[]
      generalSetting: Prisma.$GeneralSettingPayload<ExtArgs> | null
      notificationSetting: Prisma.$NotificationSettingPayload<ExtArgs> | null
      securitySetting: Prisma.$SecuritySettingPayload<ExtArgs> | null
      billingSetting: Prisma.$BillingSettingPayload<ExtArgs> | null
      integrationSetting: Prisma.$IntegrationSettingPayload<ExtArgs> | null
      employees: Prisma.$EmployeePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tenant"]>
    composites: {}
  }

  type TenantGetPayload<S extends boolean | null | undefined | TenantDefaultArgs> = $Result.GetResult<Prisma.$TenantPayload, S>

  type TenantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TenantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TenantCountAggregateInputType | true
    }

  export interface TenantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tenant'], meta: { name: 'Tenant' } }
    /**
     * Find zero or one Tenant that matches the filter.
     * @param {TenantFindUniqueArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantFindUniqueArgs>(args: SelectSubset<T, TenantFindUniqueArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tenant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TenantFindUniqueOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantFindFirstArgs>(args?: SelectSubset<T, TenantFindFirstArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tenant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tenants
     * const tenants = await prisma.tenant.findMany()
     * 
     * // Get first 10 Tenants
     * const tenants = await prisma.tenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantWithIdOnly = await prisma.tenant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantFindManyArgs>(args?: SelectSubset<T, TenantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tenant.
     * @param {TenantCreateArgs} args - Arguments to create a Tenant.
     * @example
     * // Create one Tenant
     * const Tenant = await prisma.tenant.create({
     *   data: {
     *     // ... data to create a Tenant
     *   }
     * })
     * 
     */
    create<T extends TenantCreateArgs>(args: SelectSubset<T, TenantCreateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tenants.
     * @param {TenantCreateManyArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantCreateManyArgs>(args?: SelectSubset<T, TenantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tenants and returns the data saved in the database.
     * @param {TenantCreateManyAndReturnArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tenant.
     * @param {TenantDeleteArgs} args - Arguments to delete one Tenant.
     * @example
     * // Delete one Tenant
     * const Tenant = await prisma.tenant.delete({
     *   where: {
     *     // ... filter to delete one Tenant
     *   }
     * })
     * 
     */
    delete<T extends TenantDeleteArgs>(args: SelectSubset<T, TenantDeleteArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tenant.
     * @param {TenantUpdateArgs} args - Arguments to update one Tenant.
     * @example
     * // Update one Tenant
     * const tenant = await prisma.tenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantUpdateArgs>(args: SelectSubset<T, TenantUpdateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tenants.
     * @param {TenantDeleteManyArgs} args - Arguments to filter Tenants to delete.
     * @example
     * // Delete a few Tenants
     * const { count } = await prisma.tenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantDeleteManyArgs>(args?: SelectSubset<T, TenantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantUpdateManyArgs>(args: SelectSubset<T, TenantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tenant.
     * @param {TenantUpsertArgs} args - Arguments to update or create a Tenant.
     * @example
     * // Update or create a Tenant
     * const tenant = await prisma.tenant.upsert({
     *   create: {
     *     // ... data to create a Tenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tenant we want to update
     *   }
     * })
     */
    upsert<T extends TenantUpsertArgs>(args: SelectSubset<T, TenantUpsertArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantCountArgs} args - Arguments to filter Tenants to count.
     * @example
     * // Count the number of Tenants
     * const count = await prisma.tenant.count({
     *   where: {
     *     // ... the filter for the Tenants we want to count
     *   }
     * })
    **/
    count<T extends TenantCountArgs>(
      args?: Subset<T, TenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantAggregateArgs>(args: Subset<T, TenantAggregateArgs>): Prisma.PrismaPromise<GetTenantAggregateType<T>>

    /**
     * Group by Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantGroupByArgs['orderBy'] }
        : { orderBy?: TenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tenant model
   */
  readonly fields: TenantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Tenant$usersArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    clients<T extends Tenant$clientsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$clientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany"> | Null>
    cases<T extends Tenant$casesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$casesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends Tenant$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    files<T extends Tenant$filesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany"> | Null>
    invites<T extends Tenant$invitesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$invitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findMany"> | Null>
    caseEvents<T extends Tenant$caseEventsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$caseEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseEventPayload<ExtArgs>, T, "findMany"> | Null>
    generalSetting<T extends Tenant$generalSettingArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$generalSettingArgs<ExtArgs>>): Prisma__GeneralSettingClient<$Result.GetResult<Prisma.$GeneralSettingPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    notificationSetting<T extends Tenant$notificationSettingArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$notificationSettingArgs<ExtArgs>>): Prisma__NotificationSettingClient<$Result.GetResult<Prisma.$NotificationSettingPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    securitySetting<T extends Tenant$securitySettingArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$securitySettingArgs<ExtArgs>>): Prisma__SecuritySettingClient<$Result.GetResult<Prisma.$SecuritySettingPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    billingSetting<T extends Tenant$billingSettingArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$billingSettingArgs<ExtArgs>>): Prisma__BillingSettingClient<$Result.GetResult<Prisma.$BillingSettingPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    integrationSetting<T extends Tenant$integrationSettingArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$integrationSettingArgs<ExtArgs>>): Prisma__IntegrationSettingClient<$Result.GetResult<Prisma.$IntegrationSettingPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    employees<T extends Tenant$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tenant model
   */ 
  interface TenantFieldRefs {
    readonly id: FieldRef<"Tenant", 'String'>
    readonly name: FieldRef<"Tenant", 'String'>
    readonly createdAt: FieldRef<"Tenant", 'DateTime'>
    readonly updatedAt: FieldRef<"Tenant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tenant findUnique
   */
  export type TenantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findUniqueOrThrow
   */
  export type TenantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findFirst
   */
  export type TenantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findFirstOrThrow
   */
  export type TenantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findMany
   */
  export type TenantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenants to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant create
   */
  export type TenantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to create a Tenant.
     */
    data: XOR<TenantCreateInput, TenantUncheckedCreateInput>
  }

  /**
   * Tenant createMany
   */
  export type TenantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant createManyAndReturn
   */
  export type TenantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant update
   */
  export type TenantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to update a Tenant.
     */
    data: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
    /**
     * Choose, which Tenant to update.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant updateMany
   */
  export type TenantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
  }

  /**
   * Tenant upsert
   */
  export type TenantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The filter to search for the Tenant to update in case it exists.
     */
    where: TenantWhereUniqueInput
    /**
     * In case the Tenant found by the `where` argument doesn't exist, create a new Tenant with this data.
     */
    create: XOR<TenantCreateInput, TenantUncheckedCreateInput>
    /**
     * In case the Tenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
  }

  /**
   * Tenant delete
   */
  export type TenantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter which Tenant to delete.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant deleteMany
   */
  export type TenantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenants to delete
     */
    where?: TenantWhereInput
  }

  /**
   * Tenant.users
   */
  export type Tenant$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Tenant.clients
   */
  export type Tenant$clientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    cursor?: ClientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Tenant.cases
   */
  export type Tenant$casesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    cursor?: CaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Tenant.messages
   */
  export type Tenant$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Tenant.files
   */
  export type Tenant$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Tenant.invites
   */
  export type Tenant$invitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    where?: InviteWhereInput
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    cursor?: InviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Tenant.caseEvents
   */
  export type Tenant$caseEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseEvent
     */
    select?: CaseEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseEventInclude<ExtArgs> | null
    where?: CaseEventWhereInput
    orderBy?: CaseEventOrderByWithRelationInput | CaseEventOrderByWithRelationInput[]
    cursor?: CaseEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseEventScalarFieldEnum | CaseEventScalarFieldEnum[]
  }

  /**
   * Tenant.generalSetting
   */
  export type Tenant$generalSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSetting
     */
    select?: GeneralSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSettingInclude<ExtArgs> | null
    where?: GeneralSettingWhereInput
  }

  /**
   * Tenant.notificationSetting
   */
  export type Tenant$notificationSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSetting
     */
    select?: NotificationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingInclude<ExtArgs> | null
    where?: NotificationSettingWhereInput
  }

  /**
   * Tenant.securitySetting
   */
  export type Tenant$securitySettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySetting
     */
    select?: SecuritySettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingInclude<ExtArgs> | null
    where?: SecuritySettingWhereInput
  }

  /**
   * Tenant.billingSetting
   */
  export type Tenant$billingSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingSetting
     */
    select?: BillingSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingSettingInclude<ExtArgs> | null
    where?: BillingSettingWhereInput
  }

  /**
   * Tenant.integrationSetting
   */
  export type Tenant$integrationSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSetting
     */
    select?: IntegrationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSettingInclude<ExtArgs> | null
    where?: IntegrationSettingWhereInput
  }

  /**
   * Tenant.employees
   */
  export type Tenant$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Tenant without action
   */
  export type TenantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    tenantId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    tenantId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    isActive: number
    tenantId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    tenantId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    tenantId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    tenantId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    email: string
    password: string
    role: $Enums.UserRole
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    tenantId: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    primaryCases?: boolean | User$primaryCasesArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    participatingCases?: boolean | User$participatingCasesArgs<ExtArgs>
    caseEvents?: boolean | User$caseEventsArgs<ExtArgs>
    userPermissions?: boolean | User$userPermissionsArgs<ExtArgs>
    employee?: boolean | User$employeeArgs<ExtArgs>
    Client?: boolean | User$ClientArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    tenantId?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    primaryCases?: boolean | User$primaryCasesArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    participatingCases?: boolean | User$participatingCasesArgs<ExtArgs>
    caseEvents?: boolean | User$caseEventsArgs<ExtArgs>
    userPermissions?: boolean | User$userPermissionsArgs<ExtArgs>
    employee?: boolean | User$employeeArgs<ExtArgs>
    Client?: boolean | User$ClientArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      primaryCases: Prisma.$CasePayload<ExtArgs>[]
      sentMessages: Prisma.$MessagePayload<ExtArgs>[]
      participatingCases: Prisma.$CaseParticipantUserPayload<ExtArgs>[]
      caseEvents: Prisma.$CaseEventPayload<ExtArgs>[]
      userPermissions: Prisma.$UserPermissionPayload<ExtArgs>[]
      employee: Prisma.$EmployeePayload<ExtArgs> | null
      Client: Prisma.$ClientPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      email: string
      password: string
      role: $Enums.UserRole
      createdAt: Date
      updatedAt: Date
      isActive: boolean
      tenantId: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    primaryCases<T extends User$primaryCasesArgs<ExtArgs> = {}>(args?: Subset<T, User$primaryCasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany"> | Null>
    sentMessages<T extends User$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    participatingCases<T extends User$participatingCasesArgs<ExtArgs> = {}>(args?: Subset<T, User$participatingCasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseParticipantUserPayload<ExtArgs>, T, "findMany"> | Null>
    caseEvents<T extends User$caseEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$caseEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseEventPayload<ExtArgs>, T, "findMany"> | Null>
    userPermissions<T extends User$userPermissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$userPermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany"> | Null>
    employee<T extends User$employeeArgs<ExtArgs> = {}>(args?: Subset<T, User$employeeArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Client<T extends User$ClientArgs<ExtArgs> = {}>(args?: Subset<T, User$ClientArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly tenantId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.primaryCases
   */
  export type User$primaryCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    cursor?: CaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * User.sentMessages
   */
  export type User$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.participatingCases
   */
  export type User$participatingCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantUser
     */
    select?: CaseParticipantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantUserInclude<ExtArgs> | null
    where?: CaseParticipantUserWhereInput
    orderBy?: CaseParticipantUserOrderByWithRelationInput | CaseParticipantUserOrderByWithRelationInput[]
    cursor?: CaseParticipantUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseParticipantUserScalarFieldEnum | CaseParticipantUserScalarFieldEnum[]
  }

  /**
   * User.caseEvents
   */
  export type User$caseEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseEvent
     */
    select?: CaseEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseEventInclude<ExtArgs> | null
    where?: CaseEventWhereInput
    orderBy?: CaseEventOrderByWithRelationInput | CaseEventOrderByWithRelationInput[]
    cursor?: CaseEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseEventScalarFieldEnum | CaseEventScalarFieldEnum[]
  }

  /**
   * User.userPermissions
   */
  export type User$userPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * User.employee
   */
  export type User$employeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * User.Client
   */
  export type User$ClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phoneNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
    userId: string | null
  }

  export type ClientMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phoneNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
    userId: string | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    phoneNumber: number
    createdAt: number
    updatedAt: number
    tenantId: number
    userId: number
    _all: number
  }


  export type ClientMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    userId?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    userId?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    userId?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string | null
    createdAt: Date
    updatedAt: Date
    tenantId: string
    userId: string | null
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    userId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    user?: boolean | Client$userArgs<ExtArgs>
    primaryCases?: boolean | Client$primaryCasesArgs<ExtArgs>
    receivedMessages?: boolean | Client$receivedMessagesArgs<ExtArgs>
    sentMessages?: boolean | Client$sentMessagesArgs<ExtArgs>
    participatingCases?: boolean | Client$participatingCasesArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    userId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    user?: boolean | Client$userArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    userId?: boolean
  }

  export type ClientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    user?: boolean | Client$userArgs<ExtArgs>
    primaryCases?: boolean | Client$primaryCasesArgs<ExtArgs>
    receivedMessages?: boolean | Client$receivedMessagesArgs<ExtArgs>
    sentMessages?: boolean | Client$sentMessagesArgs<ExtArgs>
    participatingCases?: boolean | Client$participatingCasesArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    user?: boolean | Client$userArgs<ExtArgs>
  }

  export type $ClientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Client"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
      primaryCases: Prisma.$CasePayload<ExtArgs>[]
      receivedMessages: Prisma.$MessagePayload<ExtArgs>[]
      sentMessages: Prisma.$MessagePayload<ExtArgs>[]
      participatingCases: Prisma.$CaseParticipantClientPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      email: string
      phoneNumber: string | null
      createdAt: Date
      updatedAt: Date
      tenantId: string
      userId: string | null
    }, ExtArgs["result"]["client"]>
    composites: {}
  }

  type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = $Result.GetResult<Prisma.$ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientFindUniqueArgs>(args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Client that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientFindFirstArgs>(args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientFindManyArgs>(args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
     */
    create<T extends ClientCreateArgs>(args: SelectSubset<T, ClientCreateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Clients.
     * @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientCreateManyArgs>(args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clients and returns the data saved in the database.
     * @param {ClientCreateManyAndReturnArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clients and only return the `id`
     * const clientWithIdOnly = await prisma.client.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
     */
    delete<T extends ClientDeleteArgs>(args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientUpdateArgs>(args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientDeleteManyArgs>(args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientUpdateManyArgs>(args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
     */
    upsert<T extends ClientUpsertArgs>(args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends Client$userArgs<ExtArgs> = {}>(args?: Subset<T, Client$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    primaryCases<T extends Client$primaryCasesArgs<ExtArgs> = {}>(args?: Subset<T, Client$primaryCasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany"> | Null>
    receivedMessages<T extends Client$receivedMessagesArgs<ExtArgs> = {}>(args?: Subset<T, Client$receivedMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    sentMessages<T extends Client$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, Client$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    participatingCases<T extends Client$participatingCasesArgs<ExtArgs> = {}>(args?: Subset<T, Client$participatingCasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseParticipantClientPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Client model
   */ 
  interface ClientFieldRefs {
    readonly id: FieldRef<"Client", 'String'>
    readonly firstName: FieldRef<"Client", 'String'>
    readonly lastName: FieldRef<"Client", 'String'>
    readonly email: FieldRef<"Client", 'String'>
    readonly phoneNumber: FieldRef<"Client", 'String'>
    readonly createdAt: FieldRef<"Client", 'DateTime'>
    readonly updatedAt: FieldRef<"Client", 'DateTime'>
    readonly tenantId: FieldRef<"Client", 'String'>
    readonly userId: FieldRef<"Client", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }

  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client createManyAndReturn
   */
  export type ClientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
  }

  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }

  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
  }

  /**
   * Client.user
   */
  export type Client$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Client.primaryCases
   */
  export type Client$primaryCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    cursor?: CaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Client.receivedMessages
   */
  export type Client$receivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Client.sentMessages
   */
  export type Client$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Client.participatingCases
   */
  export type Client$participatingCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantClient
     */
    select?: CaseParticipantClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantClientInclude<ExtArgs> | null
    where?: CaseParticipantClientWhereInput
    orderBy?: CaseParticipantClientOrderByWithRelationInput | CaseParticipantClientOrderByWithRelationInput[]
    cursor?: CaseParticipantClientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseParticipantClientScalarFieldEnum | CaseParticipantClientScalarFieldEnum[]
  }

  /**
   * Client without action
   */
  export type ClientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
  }


  /**
   * Model Case
   */

  export type AggregateCase = {
    _count: CaseCountAggregateOutputType | null
    _min: CaseMinAggregateOutputType | null
    _max: CaseMaxAggregateOutputType | null
  }

  export type CaseMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.CaseStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
    lawyerPrimaryId: string | null
    clientPrimaryId: string | null
  }

  export type CaseMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.CaseStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
    lawyerPrimaryId: string | null
    clientPrimaryId: string | null
  }

  export type CaseCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    createdAt: number
    updatedAt: number
    tenantId: number
    lawyerPrimaryId: number
    clientPrimaryId: number
    _all: number
  }


  export type CaseMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    lawyerPrimaryId?: true
    clientPrimaryId?: true
  }

  export type CaseMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    lawyerPrimaryId?: true
    clientPrimaryId?: true
  }

  export type CaseCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    lawyerPrimaryId?: true
    clientPrimaryId?: true
    _all?: true
  }

  export type CaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Case to aggregate.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cases
    **/
    _count?: true | CaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseMaxAggregateInputType
  }

  export type GetCaseAggregateType<T extends CaseAggregateArgs> = {
        [P in keyof T & keyof AggregateCase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCase[P]>
      : GetScalarType<T[P], AggregateCase[P]>
  }




  export type CaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithAggregationInput | CaseOrderByWithAggregationInput[]
    by: CaseScalarFieldEnum[] | CaseScalarFieldEnum
    having?: CaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseCountAggregateInputType | true
    _min?: CaseMinAggregateInputType
    _max?: CaseMaxAggregateInputType
  }

  export type CaseGroupByOutputType = {
    id: string
    title: string
    description: string | null
    status: $Enums.CaseStatus
    createdAt: Date
    updatedAt: Date
    tenantId: string
    lawyerPrimaryId: string | null
    clientPrimaryId: string | null
    _count: CaseCountAggregateOutputType | null
    _min: CaseMinAggregateOutputType | null
    _max: CaseMaxAggregateOutputType | null
  }

  type GetCaseGroupByPayload<T extends CaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseGroupByOutputType[P]>
            : GetScalarType<T[P], CaseGroupByOutputType[P]>
        }
      >
    >


  export type CaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    lawyerPrimaryId?: boolean
    clientPrimaryId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    lawyerPrimary?: boolean | Case$lawyerPrimaryArgs<ExtArgs>
    clientPrimary?: boolean | Case$clientPrimaryArgs<ExtArgs>
    messages?: boolean | Case$messagesArgs<ExtArgs>
    files?: boolean | Case$filesArgs<ExtArgs>
    invites?: boolean | Case$invitesArgs<ExtArgs>
    caseEvents?: boolean | Case$caseEventsArgs<ExtArgs>
    participantsUsers?: boolean | Case$participantsUsersArgs<ExtArgs>
    participantsClients?: boolean | Case$participantsClientsArgs<ExtArgs>
    _count?: boolean | CaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["case"]>

  export type CaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    lawyerPrimaryId?: boolean
    clientPrimaryId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    lawyerPrimary?: boolean | Case$lawyerPrimaryArgs<ExtArgs>
    clientPrimary?: boolean | Case$clientPrimaryArgs<ExtArgs>
  }, ExtArgs["result"]["case"]>

  export type CaseSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    lawyerPrimaryId?: boolean
    clientPrimaryId?: boolean
  }

  export type CaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    lawyerPrimary?: boolean | Case$lawyerPrimaryArgs<ExtArgs>
    clientPrimary?: boolean | Case$clientPrimaryArgs<ExtArgs>
    messages?: boolean | Case$messagesArgs<ExtArgs>
    files?: boolean | Case$filesArgs<ExtArgs>
    invites?: boolean | Case$invitesArgs<ExtArgs>
    caseEvents?: boolean | Case$caseEventsArgs<ExtArgs>
    participantsUsers?: boolean | Case$participantsUsersArgs<ExtArgs>
    participantsClients?: boolean | Case$participantsClientsArgs<ExtArgs>
    _count?: boolean | CaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    lawyerPrimary?: boolean | Case$lawyerPrimaryArgs<ExtArgs>
    clientPrimary?: boolean | Case$clientPrimaryArgs<ExtArgs>
  }

  export type $CasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Case"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      lawyerPrimary: Prisma.$UserPayload<ExtArgs> | null
      clientPrimary: Prisma.$ClientPayload<ExtArgs> | null
      messages: Prisma.$MessagePayload<ExtArgs>[]
      files: Prisma.$FilePayload<ExtArgs>[]
      invites: Prisma.$InvitePayload<ExtArgs>[]
      caseEvents: Prisma.$CaseEventPayload<ExtArgs>[]
      participantsUsers: Prisma.$CaseParticipantUserPayload<ExtArgs>[]
      participantsClients: Prisma.$CaseParticipantClientPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      status: $Enums.CaseStatus
      createdAt: Date
      updatedAt: Date
      tenantId: string
      lawyerPrimaryId: string | null
      clientPrimaryId: string | null
    }, ExtArgs["result"]["case"]>
    composites: {}
  }

  type CaseGetPayload<S extends boolean | null | undefined | CaseDefaultArgs> = $Result.GetResult<Prisma.$CasePayload, S>

  type CaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaseCountAggregateInputType | true
    }

  export interface CaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Case'], meta: { name: 'Case' } }
    /**
     * Find zero or one Case that matches the filter.
     * @param {CaseFindUniqueArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseFindUniqueArgs>(args: SelectSubset<T, CaseFindUniqueArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Case that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CaseFindUniqueOrThrowArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Case that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindFirstArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseFindFirstArgs>(args?: SelectSubset<T, CaseFindFirstArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Case that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindFirstOrThrowArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cases
     * const cases = await prisma.case.findMany()
     * 
     * // Get first 10 Cases
     * const cases = await prisma.case.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseWithIdOnly = await prisma.case.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseFindManyArgs>(args?: SelectSubset<T, CaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Case.
     * @param {CaseCreateArgs} args - Arguments to create a Case.
     * @example
     * // Create one Case
     * const Case = await prisma.case.create({
     *   data: {
     *     // ... data to create a Case
     *   }
     * })
     * 
     */
    create<T extends CaseCreateArgs>(args: SelectSubset<T, CaseCreateArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cases.
     * @param {CaseCreateManyArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const case = await prisma.case.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseCreateManyArgs>(args?: SelectSubset<T, CaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cases and returns the data saved in the database.
     * @param {CaseCreateManyAndReturnArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const case = await prisma.case.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cases and only return the `id`
     * const caseWithIdOnly = await prisma.case.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Case.
     * @param {CaseDeleteArgs} args - Arguments to delete one Case.
     * @example
     * // Delete one Case
     * const Case = await prisma.case.delete({
     *   where: {
     *     // ... filter to delete one Case
     *   }
     * })
     * 
     */
    delete<T extends CaseDeleteArgs>(args: SelectSubset<T, CaseDeleteArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Case.
     * @param {CaseUpdateArgs} args - Arguments to update one Case.
     * @example
     * // Update one Case
     * const case = await prisma.case.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseUpdateArgs>(args: SelectSubset<T, CaseUpdateArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cases.
     * @param {CaseDeleteManyArgs} args - Arguments to filter Cases to delete.
     * @example
     * // Delete a few Cases
     * const { count } = await prisma.case.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseDeleteManyArgs>(args?: SelectSubset<T, CaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cases
     * const case = await prisma.case.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseUpdateManyArgs>(args: SelectSubset<T, CaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Case.
     * @param {CaseUpsertArgs} args - Arguments to update or create a Case.
     * @example
     * // Update or create a Case
     * const case = await prisma.case.upsert({
     *   create: {
     *     // ... data to create a Case
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Case we want to update
     *   }
     * })
     */
    upsert<T extends CaseUpsertArgs>(args: SelectSubset<T, CaseUpsertArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseCountArgs} args - Arguments to filter Cases to count.
     * @example
     * // Count the number of Cases
     * const count = await prisma.case.count({
     *   where: {
     *     // ... the filter for the Cases we want to count
     *   }
     * })
    **/
    count<T extends CaseCountArgs>(
      args?: Subset<T, CaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Case.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseAggregateArgs>(args: Subset<T, CaseAggregateArgs>): Prisma.PrismaPromise<GetCaseAggregateType<T>>

    /**
     * Group by Case.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseGroupByArgs['orderBy'] }
        : { orderBy?: CaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Case model
   */
  readonly fields: CaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Case.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    lawyerPrimary<T extends Case$lawyerPrimaryArgs<ExtArgs> = {}>(args?: Subset<T, Case$lawyerPrimaryArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    clientPrimary<T extends Case$clientPrimaryArgs<ExtArgs> = {}>(args?: Subset<T, Case$clientPrimaryArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    messages<T extends Case$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Case$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    files<T extends Case$filesArgs<ExtArgs> = {}>(args?: Subset<T, Case$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany"> | Null>
    invites<T extends Case$invitesArgs<ExtArgs> = {}>(args?: Subset<T, Case$invitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findMany"> | Null>
    caseEvents<T extends Case$caseEventsArgs<ExtArgs> = {}>(args?: Subset<T, Case$caseEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseEventPayload<ExtArgs>, T, "findMany"> | Null>
    participantsUsers<T extends Case$participantsUsersArgs<ExtArgs> = {}>(args?: Subset<T, Case$participantsUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseParticipantUserPayload<ExtArgs>, T, "findMany"> | Null>
    participantsClients<T extends Case$participantsClientsArgs<ExtArgs> = {}>(args?: Subset<T, Case$participantsClientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseParticipantClientPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Case model
   */ 
  interface CaseFieldRefs {
    readonly id: FieldRef<"Case", 'String'>
    readonly title: FieldRef<"Case", 'String'>
    readonly description: FieldRef<"Case", 'String'>
    readonly status: FieldRef<"Case", 'CaseStatus'>
    readonly createdAt: FieldRef<"Case", 'DateTime'>
    readonly updatedAt: FieldRef<"Case", 'DateTime'>
    readonly tenantId: FieldRef<"Case", 'String'>
    readonly lawyerPrimaryId: FieldRef<"Case", 'String'>
    readonly clientPrimaryId: FieldRef<"Case", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Case findUnique
   */
  export type CaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case findUniqueOrThrow
   */
  export type CaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case findFirst
   */
  export type CaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     */
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case findFirstOrThrow
   */
  export type CaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     */
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case findMany
   */
  export type CaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Cases to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case create
   */
  export type CaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The data needed to create a Case.
     */
    data: XOR<CaseCreateInput, CaseUncheckedCreateInput>
  }

  /**
   * Case createMany
   */
  export type CaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cases.
     */
    data: CaseCreateManyInput | CaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Case createManyAndReturn
   */
  export type CaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Cases.
     */
    data: CaseCreateManyInput | CaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Case update
   */
  export type CaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The data needed to update a Case.
     */
    data: XOR<CaseUpdateInput, CaseUncheckedUpdateInput>
    /**
     * Choose, which Case to update.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case updateMany
   */
  export type CaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cases.
     */
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyInput>
    /**
     * Filter which Cases to update
     */
    where?: CaseWhereInput
  }

  /**
   * Case upsert
   */
  export type CaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The filter to search for the Case to update in case it exists.
     */
    where: CaseWhereUniqueInput
    /**
     * In case the Case found by the `where` argument doesn't exist, create a new Case with this data.
     */
    create: XOR<CaseCreateInput, CaseUncheckedCreateInput>
    /**
     * In case the Case was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseUpdateInput, CaseUncheckedUpdateInput>
  }

  /**
   * Case delete
   */
  export type CaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter which Case to delete.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case deleteMany
   */
  export type CaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cases to delete
     */
    where?: CaseWhereInput
  }

  /**
   * Case.lawyerPrimary
   */
  export type Case$lawyerPrimaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Case.clientPrimary
   */
  export type Case$clientPrimaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
  }

  /**
   * Case.messages
   */
  export type Case$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Case.files
   */
  export type Case$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Case.invites
   */
  export type Case$invitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    where?: InviteWhereInput
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    cursor?: InviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Case.caseEvents
   */
  export type Case$caseEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseEvent
     */
    select?: CaseEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseEventInclude<ExtArgs> | null
    where?: CaseEventWhereInput
    orderBy?: CaseEventOrderByWithRelationInput | CaseEventOrderByWithRelationInput[]
    cursor?: CaseEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseEventScalarFieldEnum | CaseEventScalarFieldEnum[]
  }

  /**
   * Case.participantsUsers
   */
  export type Case$participantsUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantUser
     */
    select?: CaseParticipantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantUserInclude<ExtArgs> | null
    where?: CaseParticipantUserWhereInput
    orderBy?: CaseParticipantUserOrderByWithRelationInput | CaseParticipantUserOrderByWithRelationInput[]
    cursor?: CaseParticipantUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseParticipantUserScalarFieldEnum | CaseParticipantUserScalarFieldEnum[]
  }

  /**
   * Case.participantsClients
   */
  export type Case$participantsClientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantClient
     */
    select?: CaseParticipantClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantClientInclude<ExtArgs> | null
    where?: CaseParticipantClientWhereInput
    orderBy?: CaseParticipantClientOrderByWithRelationInput | CaseParticipantClientOrderByWithRelationInput[]
    cursor?: CaseParticipantClientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseParticipantClientScalarFieldEnum | CaseParticipantClientScalarFieldEnum[]
  }

  /**
   * Case without action
   */
  export type CaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
  }


  /**
   * Model CaseParticipantUser
   */

  export type AggregateCaseParticipantUser = {
    _count: CaseParticipantUserCountAggregateOutputType | null
    _min: CaseParticipantUserMinAggregateOutputType | null
    _max: CaseParticipantUserMaxAggregateOutputType | null
  }

  export type CaseParticipantUserMinAggregateOutputType = {
    caseId: string | null
    userId: string | null
    role: $Enums.CaseParticipantUserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseParticipantUserMaxAggregateOutputType = {
    caseId: string | null
    userId: string | null
    role: $Enums.CaseParticipantUserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseParticipantUserCountAggregateOutputType = {
    caseId: number
    userId: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CaseParticipantUserMinAggregateInputType = {
    caseId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseParticipantUserMaxAggregateInputType = {
    caseId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseParticipantUserCountAggregateInputType = {
    caseId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CaseParticipantUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseParticipantUser to aggregate.
     */
    where?: CaseParticipantUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseParticipantUsers to fetch.
     */
    orderBy?: CaseParticipantUserOrderByWithRelationInput | CaseParticipantUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseParticipantUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseParticipantUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseParticipantUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseParticipantUsers
    **/
    _count?: true | CaseParticipantUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseParticipantUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseParticipantUserMaxAggregateInputType
  }

  export type GetCaseParticipantUserAggregateType<T extends CaseParticipantUserAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseParticipantUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseParticipantUser[P]>
      : GetScalarType<T[P], AggregateCaseParticipantUser[P]>
  }




  export type CaseParticipantUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseParticipantUserWhereInput
    orderBy?: CaseParticipantUserOrderByWithAggregationInput | CaseParticipantUserOrderByWithAggregationInput[]
    by: CaseParticipantUserScalarFieldEnum[] | CaseParticipantUserScalarFieldEnum
    having?: CaseParticipantUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseParticipantUserCountAggregateInputType | true
    _min?: CaseParticipantUserMinAggregateInputType
    _max?: CaseParticipantUserMaxAggregateInputType
  }

  export type CaseParticipantUserGroupByOutputType = {
    caseId: string
    userId: string
    role: $Enums.CaseParticipantUserRole
    createdAt: Date
    updatedAt: Date
    _count: CaseParticipantUserCountAggregateOutputType | null
    _min: CaseParticipantUserMinAggregateOutputType | null
    _max: CaseParticipantUserMaxAggregateOutputType | null
  }

  type GetCaseParticipantUserGroupByPayload<T extends CaseParticipantUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseParticipantUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseParticipantUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseParticipantUserGroupByOutputType[P]>
            : GetScalarType<T[P], CaseParticipantUserGroupByOutputType[P]>
        }
      >
    >


  export type CaseParticipantUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    caseId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseParticipantUser"]>

  export type CaseParticipantUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    caseId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseParticipantUser"]>

  export type CaseParticipantUserSelectScalar = {
    caseId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CaseParticipantUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CaseParticipantUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CaseParticipantUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseParticipantUser"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      caseId: string
      userId: string
      role: $Enums.CaseParticipantUserRole
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["caseParticipantUser"]>
    composites: {}
  }

  type CaseParticipantUserGetPayload<S extends boolean | null | undefined | CaseParticipantUserDefaultArgs> = $Result.GetResult<Prisma.$CaseParticipantUserPayload, S>

  type CaseParticipantUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaseParticipantUserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaseParticipantUserCountAggregateInputType | true
    }

  export interface CaseParticipantUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseParticipantUser'], meta: { name: 'CaseParticipantUser' } }
    /**
     * Find zero or one CaseParticipantUser that matches the filter.
     * @param {CaseParticipantUserFindUniqueArgs} args - Arguments to find a CaseParticipantUser
     * @example
     * // Get one CaseParticipantUser
     * const caseParticipantUser = await prisma.caseParticipantUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseParticipantUserFindUniqueArgs>(args: SelectSubset<T, CaseParticipantUserFindUniqueArgs<ExtArgs>>): Prisma__CaseParticipantUserClient<$Result.GetResult<Prisma.$CaseParticipantUserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CaseParticipantUser that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CaseParticipantUserFindUniqueOrThrowArgs} args - Arguments to find a CaseParticipantUser
     * @example
     * // Get one CaseParticipantUser
     * const caseParticipantUser = await prisma.caseParticipantUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseParticipantUserFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseParticipantUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseParticipantUserClient<$Result.GetResult<Prisma.$CaseParticipantUserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CaseParticipantUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseParticipantUserFindFirstArgs} args - Arguments to find a CaseParticipantUser
     * @example
     * // Get one CaseParticipantUser
     * const caseParticipantUser = await prisma.caseParticipantUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseParticipantUserFindFirstArgs>(args?: SelectSubset<T, CaseParticipantUserFindFirstArgs<ExtArgs>>): Prisma__CaseParticipantUserClient<$Result.GetResult<Prisma.$CaseParticipantUserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CaseParticipantUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseParticipantUserFindFirstOrThrowArgs} args - Arguments to find a CaseParticipantUser
     * @example
     * // Get one CaseParticipantUser
     * const caseParticipantUser = await prisma.caseParticipantUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseParticipantUserFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseParticipantUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseParticipantUserClient<$Result.GetResult<Prisma.$CaseParticipantUserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CaseParticipantUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseParticipantUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseParticipantUsers
     * const caseParticipantUsers = await prisma.caseParticipantUser.findMany()
     * 
     * // Get first 10 CaseParticipantUsers
     * const caseParticipantUsers = await prisma.caseParticipantUser.findMany({ take: 10 })
     * 
     * // Only select the `caseId`
     * const caseParticipantUserWithCaseIdOnly = await prisma.caseParticipantUser.findMany({ select: { caseId: true } })
     * 
     */
    findMany<T extends CaseParticipantUserFindManyArgs>(args?: SelectSubset<T, CaseParticipantUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseParticipantUserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CaseParticipantUser.
     * @param {CaseParticipantUserCreateArgs} args - Arguments to create a CaseParticipantUser.
     * @example
     * // Create one CaseParticipantUser
     * const CaseParticipantUser = await prisma.caseParticipantUser.create({
     *   data: {
     *     // ... data to create a CaseParticipantUser
     *   }
     * })
     * 
     */
    create<T extends CaseParticipantUserCreateArgs>(args: SelectSubset<T, CaseParticipantUserCreateArgs<ExtArgs>>): Prisma__CaseParticipantUserClient<$Result.GetResult<Prisma.$CaseParticipantUserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CaseParticipantUsers.
     * @param {CaseParticipantUserCreateManyArgs} args - Arguments to create many CaseParticipantUsers.
     * @example
     * // Create many CaseParticipantUsers
     * const caseParticipantUser = await prisma.caseParticipantUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseParticipantUserCreateManyArgs>(args?: SelectSubset<T, CaseParticipantUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseParticipantUsers and returns the data saved in the database.
     * @param {CaseParticipantUserCreateManyAndReturnArgs} args - Arguments to create many CaseParticipantUsers.
     * @example
     * // Create many CaseParticipantUsers
     * const caseParticipantUser = await prisma.caseParticipantUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseParticipantUsers and only return the `caseId`
     * const caseParticipantUserWithCaseIdOnly = await prisma.caseParticipantUser.createManyAndReturn({ 
     *   select: { caseId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseParticipantUserCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseParticipantUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseParticipantUserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CaseParticipantUser.
     * @param {CaseParticipantUserDeleteArgs} args - Arguments to delete one CaseParticipantUser.
     * @example
     * // Delete one CaseParticipantUser
     * const CaseParticipantUser = await prisma.caseParticipantUser.delete({
     *   where: {
     *     // ... filter to delete one CaseParticipantUser
     *   }
     * })
     * 
     */
    delete<T extends CaseParticipantUserDeleteArgs>(args: SelectSubset<T, CaseParticipantUserDeleteArgs<ExtArgs>>): Prisma__CaseParticipantUserClient<$Result.GetResult<Prisma.$CaseParticipantUserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CaseParticipantUser.
     * @param {CaseParticipantUserUpdateArgs} args - Arguments to update one CaseParticipantUser.
     * @example
     * // Update one CaseParticipantUser
     * const caseParticipantUser = await prisma.caseParticipantUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseParticipantUserUpdateArgs>(args: SelectSubset<T, CaseParticipantUserUpdateArgs<ExtArgs>>): Prisma__CaseParticipantUserClient<$Result.GetResult<Prisma.$CaseParticipantUserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CaseParticipantUsers.
     * @param {CaseParticipantUserDeleteManyArgs} args - Arguments to filter CaseParticipantUsers to delete.
     * @example
     * // Delete a few CaseParticipantUsers
     * const { count } = await prisma.caseParticipantUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseParticipantUserDeleteManyArgs>(args?: SelectSubset<T, CaseParticipantUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseParticipantUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseParticipantUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseParticipantUsers
     * const caseParticipantUser = await prisma.caseParticipantUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseParticipantUserUpdateManyArgs>(args: SelectSubset<T, CaseParticipantUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CaseParticipantUser.
     * @param {CaseParticipantUserUpsertArgs} args - Arguments to update or create a CaseParticipantUser.
     * @example
     * // Update or create a CaseParticipantUser
     * const caseParticipantUser = await prisma.caseParticipantUser.upsert({
     *   create: {
     *     // ... data to create a CaseParticipantUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseParticipantUser we want to update
     *   }
     * })
     */
    upsert<T extends CaseParticipantUserUpsertArgs>(args: SelectSubset<T, CaseParticipantUserUpsertArgs<ExtArgs>>): Prisma__CaseParticipantUserClient<$Result.GetResult<Prisma.$CaseParticipantUserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CaseParticipantUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseParticipantUserCountArgs} args - Arguments to filter CaseParticipantUsers to count.
     * @example
     * // Count the number of CaseParticipantUsers
     * const count = await prisma.caseParticipantUser.count({
     *   where: {
     *     // ... the filter for the CaseParticipantUsers we want to count
     *   }
     * })
    **/
    count<T extends CaseParticipantUserCountArgs>(
      args?: Subset<T, CaseParticipantUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseParticipantUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseParticipantUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseParticipantUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseParticipantUserAggregateArgs>(args: Subset<T, CaseParticipantUserAggregateArgs>): Prisma.PrismaPromise<GetCaseParticipantUserAggregateType<T>>

    /**
     * Group by CaseParticipantUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseParticipantUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseParticipantUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseParticipantUserGroupByArgs['orderBy'] }
        : { orderBy?: CaseParticipantUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseParticipantUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseParticipantUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseParticipantUser model
   */
  readonly fields: CaseParticipantUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseParticipantUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseParticipantUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseParticipantUser model
   */ 
  interface CaseParticipantUserFieldRefs {
    readonly caseId: FieldRef<"CaseParticipantUser", 'String'>
    readonly userId: FieldRef<"CaseParticipantUser", 'String'>
    readonly role: FieldRef<"CaseParticipantUser", 'CaseParticipantUserRole'>
    readonly createdAt: FieldRef<"CaseParticipantUser", 'DateTime'>
    readonly updatedAt: FieldRef<"CaseParticipantUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CaseParticipantUser findUnique
   */
  export type CaseParticipantUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantUser
     */
    select?: CaseParticipantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantUserInclude<ExtArgs> | null
    /**
     * Filter, which CaseParticipantUser to fetch.
     */
    where: CaseParticipantUserWhereUniqueInput
  }

  /**
   * CaseParticipantUser findUniqueOrThrow
   */
  export type CaseParticipantUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantUser
     */
    select?: CaseParticipantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantUserInclude<ExtArgs> | null
    /**
     * Filter, which CaseParticipantUser to fetch.
     */
    where: CaseParticipantUserWhereUniqueInput
  }

  /**
   * CaseParticipantUser findFirst
   */
  export type CaseParticipantUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantUser
     */
    select?: CaseParticipantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantUserInclude<ExtArgs> | null
    /**
     * Filter, which CaseParticipantUser to fetch.
     */
    where?: CaseParticipantUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseParticipantUsers to fetch.
     */
    orderBy?: CaseParticipantUserOrderByWithRelationInput | CaseParticipantUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseParticipantUsers.
     */
    cursor?: CaseParticipantUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseParticipantUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseParticipantUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseParticipantUsers.
     */
    distinct?: CaseParticipantUserScalarFieldEnum | CaseParticipantUserScalarFieldEnum[]
  }

  /**
   * CaseParticipantUser findFirstOrThrow
   */
  export type CaseParticipantUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantUser
     */
    select?: CaseParticipantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantUserInclude<ExtArgs> | null
    /**
     * Filter, which CaseParticipantUser to fetch.
     */
    where?: CaseParticipantUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseParticipantUsers to fetch.
     */
    orderBy?: CaseParticipantUserOrderByWithRelationInput | CaseParticipantUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseParticipantUsers.
     */
    cursor?: CaseParticipantUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseParticipantUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseParticipantUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseParticipantUsers.
     */
    distinct?: CaseParticipantUserScalarFieldEnum | CaseParticipantUserScalarFieldEnum[]
  }

  /**
   * CaseParticipantUser findMany
   */
  export type CaseParticipantUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantUser
     */
    select?: CaseParticipantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantUserInclude<ExtArgs> | null
    /**
     * Filter, which CaseParticipantUsers to fetch.
     */
    where?: CaseParticipantUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseParticipantUsers to fetch.
     */
    orderBy?: CaseParticipantUserOrderByWithRelationInput | CaseParticipantUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseParticipantUsers.
     */
    cursor?: CaseParticipantUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseParticipantUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseParticipantUsers.
     */
    skip?: number
    distinct?: CaseParticipantUserScalarFieldEnum | CaseParticipantUserScalarFieldEnum[]
  }

  /**
   * CaseParticipantUser create
   */
  export type CaseParticipantUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantUser
     */
    select?: CaseParticipantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantUserInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseParticipantUser.
     */
    data: XOR<CaseParticipantUserCreateInput, CaseParticipantUserUncheckedCreateInput>
  }

  /**
   * CaseParticipantUser createMany
   */
  export type CaseParticipantUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseParticipantUsers.
     */
    data: CaseParticipantUserCreateManyInput | CaseParticipantUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseParticipantUser createManyAndReturn
   */
  export type CaseParticipantUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantUser
     */
    select?: CaseParticipantUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CaseParticipantUsers.
     */
    data: CaseParticipantUserCreateManyInput | CaseParticipantUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseParticipantUser update
   */
  export type CaseParticipantUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantUser
     */
    select?: CaseParticipantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantUserInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseParticipantUser.
     */
    data: XOR<CaseParticipantUserUpdateInput, CaseParticipantUserUncheckedUpdateInput>
    /**
     * Choose, which CaseParticipantUser to update.
     */
    where: CaseParticipantUserWhereUniqueInput
  }

  /**
   * CaseParticipantUser updateMany
   */
  export type CaseParticipantUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseParticipantUsers.
     */
    data: XOR<CaseParticipantUserUpdateManyMutationInput, CaseParticipantUserUncheckedUpdateManyInput>
    /**
     * Filter which CaseParticipantUsers to update
     */
    where?: CaseParticipantUserWhereInput
  }

  /**
   * CaseParticipantUser upsert
   */
  export type CaseParticipantUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantUser
     */
    select?: CaseParticipantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantUserInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseParticipantUser to update in case it exists.
     */
    where: CaseParticipantUserWhereUniqueInput
    /**
     * In case the CaseParticipantUser found by the `where` argument doesn't exist, create a new CaseParticipantUser with this data.
     */
    create: XOR<CaseParticipantUserCreateInput, CaseParticipantUserUncheckedCreateInput>
    /**
     * In case the CaseParticipantUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseParticipantUserUpdateInput, CaseParticipantUserUncheckedUpdateInput>
  }

  /**
   * CaseParticipantUser delete
   */
  export type CaseParticipantUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantUser
     */
    select?: CaseParticipantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantUserInclude<ExtArgs> | null
    /**
     * Filter which CaseParticipantUser to delete.
     */
    where: CaseParticipantUserWhereUniqueInput
  }

  /**
   * CaseParticipantUser deleteMany
   */
  export type CaseParticipantUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseParticipantUsers to delete
     */
    where?: CaseParticipantUserWhereInput
  }

  /**
   * CaseParticipantUser without action
   */
  export type CaseParticipantUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantUser
     */
    select?: CaseParticipantUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantUserInclude<ExtArgs> | null
  }


  /**
   * Model CaseParticipantClient
   */

  export type AggregateCaseParticipantClient = {
    _count: CaseParticipantClientCountAggregateOutputType | null
    _min: CaseParticipantClientMinAggregateOutputType | null
    _max: CaseParticipantClientMaxAggregateOutputType | null
  }

  export type CaseParticipantClientMinAggregateOutputType = {
    caseId: string | null
    clientId: string | null
    type: $Enums.CaseParticipantClientType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseParticipantClientMaxAggregateOutputType = {
    caseId: string | null
    clientId: string | null
    type: $Enums.CaseParticipantClientType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseParticipantClientCountAggregateOutputType = {
    caseId: number
    clientId: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CaseParticipantClientMinAggregateInputType = {
    caseId?: true
    clientId?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseParticipantClientMaxAggregateInputType = {
    caseId?: true
    clientId?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseParticipantClientCountAggregateInputType = {
    caseId?: true
    clientId?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CaseParticipantClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseParticipantClient to aggregate.
     */
    where?: CaseParticipantClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseParticipantClients to fetch.
     */
    orderBy?: CaseParticipantClientOrderByWithRelationInput | CaseParticipantClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseParticipantClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseParticipantClients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseParticipantClients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseParticipantClients
    **/
    _count?: true | CaseParticipantClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseParticipantClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseParticipantClientMaxAggregateInputType
  }

  export type GetCaseParticipantClientAggregateType<T extends CaseParticipantClientAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseParticipantClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseParticipantClient[P]>
      : GetScalarType<T[P], AggregateCaseParticipantClient[P]>
  }




  export type CaseParticipantClientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseParticipantClientWhereInput
    orderBy?: CaseParticipantClientOrderByWithAggregationInput | CaseParticipantClientOrderByWithAggregationInput[]
    by: CaseParticipantClientScalarFieldEnum[] | CaseParticipantClientScalarFieldEnum
    having?: CaseParticipantClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseParticipantClientCountAggregateInputType | true
    _min?: CaseParticipantClientMinAggregateInputType
    _max?: CaseParticipantClientMaxAggregateInputType
  }

  export type CaseParticipantClientGroupByOutputType = {
    caseId: string
    clientId: string
    type: $Enums.CaseParticipantClientType
    createdAt: Date
    updatedAt: Date
    _count: CaseParticipantClientCountAggregateOutputType | null
    _min: CaseParticipantClientMinAggregateOutputType | null
    _max: CaseParticipantClientMaxAggregateOutputType | null
  }

  type GetCaseParticipantClientGroupByPayload<T extends CaseParticipantClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseParticipantClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseParticipantClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseParticipantClientGroupByOutputType[P]>
            : GetScalarType<T[P], CaseParticipantClientGroupByOutputType[P]>
        }
      >
    >


  export type CaseParticipantClientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    caseId?: boolean
    clientId?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseParticipantClient"]>

  export type CaseParticipantClientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    caseId?: boolean
    clientId?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseParticipantClient"]>

  export type CaseParticipantClientSelectScalar = {
    caseId?: boolean
    clientId?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CaseParticipantClientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type CaseParticipantClientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $CaseParticipantClientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseParticipantClient"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      client: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      caseId: string
      clientId: string
      type: $Enums.CaseParticipantClientType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["caseParticipantClient"]>
    composites: {}
  }

  type CaseParticipantClientGetPayload<S extends boolean | null | undefined | CaseParticipantClientDefaultArgs> = $Result.GetResult<Prisma.$CaseParticipantClientPayload, S>

  type CaseParticipantClientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaseParticipantClientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaseParticipantClientCountAggregateInputType | true
    }

  export interface CaseParticipantClientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseParticipantClient'], meta: { name: 'CaseParticipantClient' } }
    /**
     * Find zero or one CaseParticipantClient that matches the filter.
     * @param {CaseParticipantClientFindUniqueArgs} args - Arguments to find a CaseParticipantClient
     * @example
     * // Get one CaseParticipantClient
     * const caseParticipantClient = await prisma.caseParticipantClient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseParticipantClientFindUniqueArgs>(args: SelectSubset<T, CaseParticipantClientFindUniqueArgs<ExtArgs>>): Prisma__CaseParticipantClientClient<$Result.GetResult<Prisma.$CaseParticipantClientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CaseParticipantClient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CaseParticipantClientFindUniqueOrThrowArgs} args - Arguments to find a CaseParticipantClient
     * @example
     * // Get one CaseParticipantClient
     * const caseParticipantClient = await prisma.caseParticipantClient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseParticipantClientFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseParticipantClientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseParticipantClientClient<$Result.GetResult<Prisma.$CaseParticipantClientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CaseParticipantClient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseParticipantClientFindFirstArgs} args - Arguments to find a CaseParticipantClient
     * @example
     * // Get one CaseParticipantClient
     * const caseParticipantClient = await prisma.caseParticipantClient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseParticipantClientFindFirstArgs>(args?: SelectSubset<T, CaseParticipantClientFindFirstArgs<ExtArgs>>): Prisma__CaseParticipantClientClient<$Result.GetResult<Prisma.$CaseParticipantClientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CaseParticipantClient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseParticipantClientFindFirstOrThrowArgs} args - Arguments to find a CaseParticipantClient
     * @example
     * // Get one CaseParticipantClient
     * const caseParticipantClient = await prisma.caseParticipantClient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseParticipantClientFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseParticipantClientFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseParticipantClientClient<$Result.GetResult<Prisma.$CaseParticipantClientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CaseParticipantClients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseParticipantClientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseParticipantClients
     * const caseParticipantClients = await prisma.caseParticipantClient.findMany()
     * 
     * // Get first 10 CaseParticipantClients
     * const caseParticipantClients = await prisma.caseParticipantClient.findMany({ take: 10 })
     * 
     * // Only select the `caseId`
     * const caseParticipantClientWithCaseIdOnly = await prisma.caseParticipantClient.findMany({ select: { caseId: true } })
     * 
     */
    findMany<T extends CaseParticipantClientFindManyArgs>(args?: SelectSubset<T, CaseParticipantClientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseParticipantClientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CaseParticipantClient.
     * @param {CaseParticipantClientCreateArgs} args - Arguments to create a CaseParticipantClient.
     * @example
     * // Create one CaseParticipantClient
     * const CaseParticipantClient = await prisma.caseParticipantClient.create({
     *   data: {
     *     // ... data to create a CaseParticipantClient
     *   }
     * })
     * 
     */
    create<T extends CaseParticipantClientCreateArgs>(args: SelectSubset<T, CaseParticipantClientCreateArgs<ExtArgs>>): Prisma__CaseParticipantClientClient<$Result.GetResult<Prisma.$CaseParticipantClientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CaseParticipantClients.
     * @param {CaseParticipantClientCreateManyArgs} args - Arguments to create many CaseParticipantClients.
     * @example
     * // Create many CaseParticipantClients
     * const caseParticipantClient = await prisma.caseParticipantClient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseParticipantClientCreateManyArgs>(args?: SelectSubset<T, CaseParticipantClientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseParticipantClients and returns the data saved in the database.
     * @param {CaseParticipantClientCreateManyAndReturnArgs} args - Arguments to create many CaseParticipantClients.
     * @example
     * // Create many CaseParticipantClients
     * const caseParticipantClient = await prisma.caseParticipantClient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseParticipantClients and only return the `caseId`
     * const caseParticipantClientWithCaseIdOnly = await prisma.caseParticipantClient.createManyAndReturn({ 
     *   select: { caseId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseParticipantClientCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseParticipantClientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseParticipantClientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CaseParticipantClient.
     * @param {CaseParticipantClientDeleteArgs} args - Arguments to delete one CaseParticipantClient.
     * @example
     * // Delete one CaseParticipantClient
     * const CaseParticipantClient = await prisma.caseParticipantClient.delete({
     *   where: {
     *     // ... filter to delete one CaseParticipantClient
     *   }
     * })
     * 
     */
    delete<T extends CaseParticipantClientDeleteArgs>(args: SelectSubset<T, CaseParticipantClientDeleteArgs<ExtArgs>>): Prisma__CaseParticipantClientClient<$Result.GetResult<Prisma.$CaseParticipantClientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CaseParticipantClient.
     * @param {CaseParticipantClientUpdateArgs} args - Arguments to update one CaseParticipantClient.
     * @example
     * // Update one CaseParticipantClient
     * const caseParticipantClient = await prisma.caseParticipantClient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseParticipantClientUpdateArgs>(args: SelectSubset<T, CaseParticipantClientUpdateArgs<ExtArgs>>): Prisma__CaseParticipantClientClient<$Result.GetResult<Prisma.$CaseParticipantClientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CaseParticipantClients.
     * @param {CaseParticipantClientDeleteManyArgs} args - Arguments to filter CaseParticipantClients to delete.
     * @example
     * // Delete a few CaseParticipantClients
     * const { count } = await prisma.caseParticipantClient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseParticipantClientDeleteManyArgs>(args?: SelectSubset<T, CaseParticipantClientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseParticipantClients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseParticipantClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseParticipantClients
     * const caseParticipantClient = await prisma.caseParticipantClient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseParticipantClientUpdateManyArgs>(args: SelectSubset<T, CaseParticipantClientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CaseParticipantClient.
     * @param {CaseParticipantClientUpsertArgs} args - Arguments to update or create a CaseParticipantClient.
     * @example
     * // Update or create a CaseParticipantClient
     * const caseParticipantClient = await prisma.caseParticipantClient.upsert({
     *   create: {
     *     // ... data to create a CaseParticipantClient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseParticipantClient we want to update
     *   }
     * })
     */
    upsert<T extends CaseParticipantClientUpsertArgs>(args: SelectSubset<T, CaseParticipantClientUpsertArgs<ExtArgs>>): Prisma__CaseParticipantClientClient<$Result.GetResult<Prisma.$CaseParticipantClientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CaseParticipantClients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseParticipantClientCountArgs} args - Arguments to filter CaseParticipantClients to count.
     * @example
     * // Count the number of CaseParticipantClients
     * const count = await prisma.caseParticipantClient.count({
     *   where: {
     *     // ... the filter for the CaseParticipantClients we want to count
     *   }
     * })
    **/
    count<T extends CaseParticipantClientCountArgs>(
      args?: Subset<T, CaseParticipantClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseParticipantClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseParticipantClient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseParticipantClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseParticipantClientAggregateArgs>(args: Subset<T, CaseParticipantClientAggregateArgs>): Prisma.PrismaPromise<GetCaseParticipantClientAggregateType<T>>

    /**
     * Group by CaseParticipantClient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseParticipantClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseParticipantClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseParticipantClientGroupByArgs['orderBy'] }
        : { orderBy?: CaseParticipantClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseParticipantClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseParticipantClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseParticipantClient model
   */
  readonly fields: CaseParticipantClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseParticipantClient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseParticipantClientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseParticipantClient model
   */ 
  interface CaseParticipantClientFieldRefs {
    readonly caseId: FieldRef<"CaseParticipantClient", 'String'>
    readonly clientId: FieldRef<"CaseParticipantClient", 'String'>
    readonly type: FieldRef<"CaseParticipantClient", 'CaseParticipantClientType'>
    readonly createdAt: FieldRef<"CaseParticipantClient", 'DateTime'>
    readonly updatedAt: FieldRef<"CaseParticipantClient", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CaseParticipantClient findUnique
   */
  export type CaseParticipantClientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantClient
     */
    select?: CaseParticipantClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantClientInclude<ExtArgs> | null
    /**
     * Filter, which CaseParticipantClient to fetch.
     */
    where: CaseParticipantClientWhereUniqueInput
  }

  /**
   * CaseParticipantClient findUniqueOrThrow
   */
  export type CaseParticipantClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantClient
     */
    select?: CaseParticipantClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantClientInclude<ExtArgs> | null
    /**
     * Filter, which CaseParticipantClient to fetch.
     */
    where: CaseParticipantClientWhereUniqueInput
  }

  /**
   * CaseParticipantClient findFirst
   */
  export type CaseParticipantClientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantClient
     */
    select?: CaseParticipantClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantClientInclude<ExtArgs> | null
    /**
     * Filter, which CaseParticipantClient to fetch.
     */
    where?: CaseParticipantClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseParticipantClients to fetch.
     */
    orderBy?: CaseParticipantClientOrderByWithRelationInput | CaseParticipantClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseParticipantClients.
     */
    cursor?: CaseParticipantClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseParticipantClients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseParticipantClients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseParticipantClients.
     */
    distinct?: CaseParticipantClientScalarFieldEnum | CaseParticipantClientScalarFieldEnum[]
  }

  /**
   * CaseParticipantClient findFirstOrThrow
   */
  export type CaseParticipantClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantClient
     */
    select?: CaseParticipantClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantClientInclude<ExtArgs> | null
    /**
     * Filter, which CaseParticipantClient to fetch.
     */
    where?: CaseParticipantClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseParticipantClients to fetch.
     */
    orderBy?: CaseParticipantClientOrderByWithRelationInput | CaseParticipantClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseParticipantClients.
     */
    cursor?: CaseParticipantClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseParticipantClients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseParticipantClients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseParticipantClients.
     */
    distinct?: CaseParticipantClientScalarFieldEnum | CaseParticipantClientScalarFieldEnum[]
  }

  /**
   * CaseParticipantClient findMany
   */
  export type CaseParticipantClientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantClient
     */
    select?: CaseParticipantClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantClientInclude<ExtArgs> | null
    /**
     * Filter, which CaseParticipantClients to fetch.
     */
    where?: CaseParticipantClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseParticipantClients to fetch.
     */
    orderBy?: CaseParticipantClientOrderByWithRelationInput | CaseParticipantClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseParticipantClients.
     */
    cursor?: CaseParticipantClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseParticipantClients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseParticipantClients.
     */
    skip?: number
    distinct?: CaseParticipantClientScalarFieldEnum | CaseParticipantClientScalarFieldEnum[]
  }

  /**
   * CaseParticipantClient create
   */
  export type CaseParticipantClientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantClient
     */
    select?: CaseParticipantClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantClientInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseParticipantClient.
     */
    data: XOR<CaseParticipantClientCreateInput, CaseParticipantClientUncheckedCreateInput>
  }

  /**
   * CaseParticipantClient createMany
   */
  export type CaseParticipantClientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseParticipantClients.
     */
    data: CaseParticipantClientCreateManyInput | CaseParticipantClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseParticipantClient createManyAndReturn
   */
  export type CaseParticipantClientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantClient
     */
    select?: CaseParticipantClientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CaseParticipantClients.
     */
    data: CaseParticipantClientCreateManyInput | CaseParticipantClientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantClientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseParticipantClient update
   */
  export type CaseParticipantClientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantClient
     */
    select?: CaseParticipantClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantClientInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseParticipantClient.
     */
    data: XOR<CaseParticipantClientUpdateInput, CaseParticipantClientUncheckedUpdateInput>
    /**
     * Choose, which CaseParticipantClient to update.
     */
    where: CaseParticipantClientWhereUniqueInput
  }

  /**
   * CaseParticipantClient updateMany
   */
  export type CaseParticipantClientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseParticipantClients.
     */
    data: XOR<CaseParticipantClientUpdateManyMutationInput, CaseParticipantClientUncheckedUpdateManyInput>
    /**
     * Filter which CaseParticipantClients to update
     */
    where?: CaseParticipantClientWhereInput
  }

  /**
   * CaseParticipantClient upsert
   */
  export type CaseParticipantClientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantClient
     */
    select?: CaseParticipantClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantClientInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseParticipantClient to update in case it exists.
     */
    where: CaseParticipantClientWhereUniqueInput
    /**
     * In case the CaseParticipantClient found by the `where` argument doesn't exist, create a new CaseParticipantClient with this data.
     */
    create: XOR<CaseParticipantClientCreateInput, CaseParticipantClientUncheckedCreateInput>
    /**
     * In case the CaseParticipantClient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseParticipantClientUpdateInput, CaseParticipantClientUncheckedUpdateInput>
  }

  /**
   * CaseParticipantClient delete
   */
  export type CaseParticipantClientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantClient
     */
    select?: CaseParticipantClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantClientInclude<ExtArgs> | null
    /**
     * Filter which CaseParticipantClient to delete.
     */
    where: CaseParticipantClientWhereUniqueInput
  }

  /**
   * CaseParticipantClient deleteMany
   */
  export type CaseParticipantClientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseParticipantClients to delete
     */
    where?: CaseParticipantClientWhereInput
  }

  /**
   * CaseParticipantClient without action
   */
  export type CaseParticipantClientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseParticipantClient
     */
    select?: CaseParticipantClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseParticipantClientInclude<ExtArgs> | null
  }


  /**
   * Model CaseEvent
   */

  export type AggregateCaseEvent = {
    _count: CaseEventCountAggregateOutputType | null
    _min: CaseEventMinAggregateOutputType | null
    _max: CaseEventMaxAggregateOutputType | null
  }

  export type CaseEventMinAggregateOutputType = {
    id: string | null
    type: string | null
    description: string | null
    timestamp: Date | null
    caseId: string | null
    userId: string | null
    tenantId: string | null
  }

  export type CaseEventMaxAggregateOutputType = {
    id: string | null
    type: string | null
    description: string | null
    timestamp: Date | null
    caseId: string | null
    userId: string | null
    tenantId: string | null
  }

  export type CaseEventCountAggregateOutputType = {
    id: number
    type: number
    description: number
    timestamp: number
    caseId: number
    userId: number
    tenantId: number
    _all: number
  }


  export type CaseEventMinAggregateInputType = {
    id?: true
    type?: true
    description?: true
    timestamp?: true
    caseId?: true
    userId?: true
    tenantId?: true
  }

  export type CaseEventMaxAggregateInputType = {
    id?: true
    type?: true
    description?: true
    timestamp?: true
    caseId?: true
    userId?: true
    tenantId?: true
  }

  export type CaseEventCountAggregateInputType = {
    id?: true
    type?: true
    description?: true
    timestamp?: true
    caseId?: true
    userId?: true
    tenantId?: true
    _all?: true
  }

  export type CaseEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseEvent to aggregate.
     */
    where?: CaseEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseEvents to fetch.
     */
    orderBy?: CaseEventOrderByWithRelationInput | CaseEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseEvents
    **/
    _count?: true | CaseEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseEventMaxAggregateInputType
  }

  export type GetCaseEventAggregateType<T extends CaseEventAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseEvent[P]>
      : GetScalarType<T[P], AggregateCaseEvent[P]>
  }




  export type CaseEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseEventWhereInput
    orderBy?: CaseEventOrderByWithAggregationInput | CaseEventOrderByWithAggregationInput[]
    by: CaseEventScalarFieldEnum[] | CaseEventScalarFieldEnum
    having?: CaseEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseEventCountAggregateInputType | true
    _min?: CaseEventMinAggregateInputType
    _max?: CaseEventMaxAggregateInputType
  }

  export type CaseEventGroupByOutputType = {
    id: string
    type: string
    description: string | null
    timestamp: Date
    caseId: string
    userId: string | null
    tenantId: string
    _count: CaseEventCountAggregateOutputType | null
    _min: CaseEventMinAggregateOutputType | null
    _max: CaseEventMaxAggregateOutputType | null
  }

  type GetCaseEventGroupByPayload<T extends CaseEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseEventGroupByOutputType[P]>
            : GetScalarType<T[P], CaseEventGroupByOutputType[P]>
        }
      >
    >


  export type CaseEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    description?: boolean
    timestamp?: boolean
    caseId?: boolean
    userId?: boolean
    tenantId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    user?: boolean | CaseEvent$userArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseEvent"]>

  export type CaseEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    description?: boolean
    timestamp?: boolean
    caseId?: boolean
    userId?: boolean
    tenantId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    user?: boolean | CaseEvent$userArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseEvent"]>

  export type CaseEventSelectScalar = {
    id?: boolean
    type?: boolean
    description?: boolean
    timestamp?: boolean
    caseId?: boolean
    userId?: boolean
    tenantId?: boolean
  }

  export type CaseEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    user?: boolean | CaseEvent$userArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type CaseEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    user?: boolean | CaseEvent$userArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $CaseEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseEvent"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      description: string | null
      timestamp: Date
      caseId: string
      userId: string | null
      tenantId: string
    }, ExtArgs["result"]["caseEvent"]>
    composites: {}
  }

  type CaseEventGetPayload<S extends boolean | null | undefined | CaseEventDefaultArgs> = $Result.GetResult<Prisma.$CaseEventPayload, S>

  type CaseEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaseEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaseEventCountAggregateInputType | true
    }

  export interface CaseEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseEvent'], meta: { name: 'CaseEvent' } }
    /**
     * Find zero or one CaseEvent that matches the filter.
     * @param {CaseEventFindUniqueArgs} args - Arguments to find a CaseEvent
     * @example
     * // Get one CaseEvent
     * const caseEvent = await prisma.caseEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseEventFindUniqueArgs>(args: SelectSubset<T, CaseEventFindUniqueArgs<ExtArgs>>): Prisma__CaseEventClient<$Result.GetResult<Prisma.$CaseEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CaseEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CaseEventFindUniqueOrThrowArgs} args - Arguments to find a CaseEvent
     * @example
     * // Get one CaseEvent
     * const caseEvent = await prisma.caseEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseEventFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseEventClient<$Result.GetResult<Prisma.$CaseEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CaseEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseEventFindFirstArgs} args - Arguments to find a CaseEvent
     * @example
     * // Get one CaseEvent
     * const caseEvent = await prisma.caseEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseEventFindFirstArgs>(args?: SelectSubset<T, CaseEventFindFirstArgs<ExtArgs>>): Prisma__CaseEventClient<$Result.GetResult<Prisma.$CaseEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CaseEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseEventFindFirstOrThrowArgs} args - Arguments to find a CaseEvent
     * @example
     * // Get one CaseEvent
     * const caseEvent = await prisma.caseEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseEventFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseEventClient<$Result.GetResult<Prisma.$CaseEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CaseEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseEvents
     * const caseEvents = await prisma.caseEvent.findMany()
     * 
     * // Get first 10 CaseEvents
     * const caseEvents = await prisma.caseEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseEventWithIdOnly = await prisma.caseEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseEventFindManyArgs>(args?: SelectSubset<T, CaseEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CaseEvent.
     * @param {CaseEventCreateArgs} args - Arguments to create a CaseEvent.
     * @example
     * // Create one CaseEvent
     * const CaseEvent = await prisma.caseEvent.create({
     *   data: {
     *     // ... data to create a CaseEvent
     *   }
     * })
     * 
     */
    create<T extends CaseEventCreateArgs>(args: SelectSubset<T, CaseEventCreateArgs<ExtArgs>>): Prisma__CaseEventClient<$Result.GetResult<Prisma.$CaseEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CaseEvents.
     * @param {CaseEventCreateManyArgs} args - Arguments to create many CaseEvents.
     * @example
     * // Create many CaseEvents
     * const caseEvent = await prisma.caseEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseEventCreateManyArgs>(args?: SelectSubset<T, CaseEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseEvents and returns the data saved in the database.
     * @param {CaseEventCreateManyAndReturnArgs} args - Arguments to create many CaseEvents.
     * @example
     * // Create many CaseEvents
     * const caseEvent = await prisma.caseEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseEvents and only return the `id`
     * const caseEventWithIdOnly = await prisma.caseEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseEventCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CaseEvent.
     * @param {CaseEventDeleteArgs} args - Arguments to delete one CaseEvent.
     * @example
     * // Delete one CaseEvent
     * const CaseEvent = await prisma.caseEvent.delete({
     *   where: {
     *     // ... filter to delete one CaseEvent
     *   }
     * })
     * 
     */
    delete<T extends CaseEventDeleteArgs>(args: SelectSubset<T, CaseEventDeleteArgs<ExtArgs>>): Prisma__CaseEventClient<$Result.GetResult<Prisma.$CaseEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CaseEvent.
     * @param {CaseEventUpdateArgs} args - Arguments to update one CaseEvent.
     * @example
     * // Update one CaseEvent
     * const caseEvent = await prisma.caseEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseEventUpdateArgs>(args: SelectSubset<T, CaseEventUpdateArgs<ExtArgs>>): Prisma__CaseEventClient<$Result.GetResult<Prisma.$CaseEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CaseEvents.
     * @param {CaseEventDeleteManyArgs} args - Arguments to filter CaseEvents to delete.
     * @example
     * // Delete a few CaseEvents
     * const { count } = await prisma.caseEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseEventDeleteManyArgs>(args?: SelectSubset<T, CaseEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseEvents
     * const caseEvent = await prisma.caseEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseEventUpdateManyArgs>(args: SelectSubset<T, CaseEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CaseEvent.
     * @param {CaseEventUpsertArgs} args - Arguments to update or create a CaseEvent.
     * @example
     * // Update or create a CaseEvent
     * const caseEvent = await prisma.caseEvent.upsert({
     *   create: {
     *     // ... data to create a CaseEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseEvent we want to update
     *   }
     * })
     */
    upsert<T extends CaseEventUpsertArgs>(args: SelectSubset<T, CaseEventUpsertArgs<ExtArgs>>): Prisma__CaseEventClient<$Result.GetResult<Prisma.$CaseEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CaseEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseEventCountArgs} args - Arguments to filter CaseEvents to count.
     * @example
     * // Count the number of CaseEvents
     * const count = await prisma.caseEvent.count({
     *   where: {
     *     // ... the filter for the CaseEvents we want to count
     *   }
     * })
    **/
    count<T extends CaseEventCountArgs>(
      args?: Subset<T, CaseEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseEventAggregateArgs>(args: Subset<T, CaseEventAggregateArgs>): Prisma.PrismaPromise<GetCaseEventAggregateType<T>>

    /**
     * Group by CaseEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseEventGroupByArgs['orderBy'] }
        : { orderBy?: CaseEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseEvent model
   */
  readonly fields: CaseEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends CaseEvent$userArgs<ExtArgs> = {}>(args?: Subset<T, CaseEvent$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseEvent model
   */ 
  interface CaseEventFieldRefs {
    readonly id: FieldRef<"CaseEvent", 'String'>
    readonly type: FieldRef<"CaseEvent", 'String'>
    readonly description: FieldRef<"CaseEvent", 'String'>
    readonly timestamp: FieldRef<"CaseEvent", 'DateTime'>
    readonly caseId: FieldRef<"CaseEvent", 'String'>
    readonly userId: FieldRef<"CaseEvent", 'String'>
    readonly tenantId: FieldRef<"CaseEvent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CaseEvent findUnique
   */
  export type CaseEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseEvent
     */
    select?: CaseEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseEventInclude<ExtArgs> | null
    /**
     * Filter, which CaseEvent to fetch.
     */
    where: CaseEventWhereUniqueInput
  }

  /**
   * CaseEvent findUniqueOrThrow
   */
  export type CaseEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseEvent
     */
    select?: CaseEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseEventInclude<ExtArgs> | null
    /**
     * Filter, which CaseEvent to fetch.
     */
    where: CaseEventWhereUniqueInput
  }

  /**
   * CaseEvent findFirst
   */
  export type CaseEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseEvent
     */
    select?: CaseEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseEventInclude<ExtArgs> | null
    /**
     * Filter, which CaseEvent to fetch.
     */
    where?: CaseEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseEvents to fetch.
     */
    orderBy?: CaseEventOrderByWithRelationInput | CaseEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseEvents.
     */
    cursor?: CaseEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseEvents.
     */
    distinct?: CaseEventScalarFieldEnum | CaseEventScalarFieldEnum[]
  }

  /**
   * CaseEvent findFirstOrThrow
   */
  export type CaseEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseEvent
     */
    select?: CaseEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseEventInclude<ExtArgs> | null
    /**
     * Filter, which CaseEvent to fetch.
     */
    where?: CaseEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseEvents to fetch.
     */
    orderBy?: CaseEventOrderByWithRelationInput | CaseEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseEvents.
     */
    cursor?: CaseEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseEvents.
     */
    distinct?: CaseEventScalarFieldEnum | CaseEventScalarFieldEnum[]
  }

  /**
   * CaseEvent findMany
   */
  export type CaseEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseEvent
     */
    select?: CaseEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseEventInclude<ExtArgs> | null
    /**
     * Filter, which CaseEvents to fetch.
     */
    where?: CaseEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseEvents to fetch.
     */
    orderBy?: CaseEventOrderByWithRelationInput | CaseEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseEvents.
     */
    cursor?: CaseEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseEvents.
     */
    skip?: number
    distinct?: CaseEventScalarFieldEnum | CaseEventScalarFieldEnum[]
  }

  /**
   * CaseEvent create
   */
  export type CaseEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseEvent
     */
    select?: CaseEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseEventInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseEvent.
     */
    data: XOR<CaseEventCreateInput, CaseEventUncheckedCreateInput>
  }

  /**
   * CaseEvent createMany
   */
  export type CaseEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseEvents.
     */
    data: CaseEventCreateManyInput | CaseEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseEvent createManyAndReturn
   */
  export type CaseEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseEvent
     */
    select?: CaseEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CaseEvents.
     */
    data: CaseEventCreateManyInput | CaseEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseEvent update
   */
  export type CaseEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseEvent
     */
    select?: CaseEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseEventInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseEvent.
     */
    data: XOR<CaseEventUpdateInput, CaseEventUncheckedUpdateInput>
    /**
     * Choose, which CaseEvent to update.
     */
    where: CaseEventWhereUniqueInput
  }

  /**
   * CaseEvent updateMany
   */
  export type CaseEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseEvents.
     */
    data: XOR<CaseEventUpdateManyMutationInput, CaseEventUncheckedUpdateManyInput>
    /**
     * Filter which CaseEvents to update
     */
    where?: CaseEventWhereInput
  }

  /**
   * CaseEvent upsert
   */
  export type CaseEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseEvent
     */
    select?: CaseEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseEventInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseEvent to update in case it exists.
     */
    where: CaseEventWhereUniqueInput
    /**
     * In case the CaseEvent found by the `where` argument doesn't exist, create a new CaseEvent with this data.
     */
    create: XOR<CaseEventCreateInput, CaseEventUncheckedCreateInput>
    /**
     * In case the CaseEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseEventUpdateInput, CaseEventUncheckedUpdateInput>
  }

  /**
   * CaseEvent delete
   */
  export type CaseEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseEvent
     */
    select?: CaseEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseEventInclude<ExtArgs> | null
    /**
     * Filter which CaseEvent to delete.
     */
    where: CaseEventWhereUniqueInput
  }

  /**
   * CaseEvent deleteMany
   */
  export type CaseEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseEvents to delete
     */
    where?: CaseEventWhereInput
  }

  /**
   * CaseEvent.user
   */
  export type CaseEvent$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CaseEvent without action
   */
  export type CaseEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseEvent
     */
    select?: CaseEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseEventInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    content: string | null
    viewed: boolean | null
    viewedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
    tenantId: string | null
    senderId: string | null
    senderClientId: string | null
    receiverClientId: string | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    content: string | null
    viewed: boolean | null
    viewedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
    tenantId: string | null
    senderId: string | null
    senderClientId: string | null
    receiverClientId: string | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    content: number
    viewed: number
    viewedAt: number
    createdAt: number
    updatedAt: number
    caseId: number
    tenantId: number
    senderId: number
    senderClientId: number
    receiverClientId: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    content?: true
    viewed?: true
    viewedAt?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    tenantId?: true
    senderId?: true
    senderClientId?: true
    receiverClientId?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    content?: true
    viewed?: true
    viewedAt?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    tenantId?: true
    senderId?: true
    senderClientId?: true
    receiverClientId?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    content?: true
    viewed?: true
    viewedAt?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    tenantId?: true
    senderId?: true
    senderClientId?: true
    receiverClientId?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    content: string
    viewed: boolean
    viewedAt: Date | null
    createdAt: Date
    updatedAt: Date
    caseId: string
    tenantId: string
    senderId: string | null
    senderClientId: string | null
    receiverClientId: string
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    viewed?: boolean
    viewedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    tenantId?: boolean
    senderId?: boolean
    senderClientId?: boolean
    receiverClientId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    sender?: boolean | Message$senderArgs<ExtArgs>
    senderClient?: boolean | Message$senderClientArgs<ExtArgs>
    receiverClient?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    viewed?: boolean
    viewedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    tenantId?: boolean
    senderId?: boolean
    senderClientId?: boolean
    receiverClientId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    sender?: boolean | Message$senderArgs<ExtArgs>
    senderClient?: boolean | Message$senderClientArgs<ExtArgs>
    receiverClient?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    content?: boolean
    viewed?: boolean
    viewedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    tenantId?: boolean
    senderId?: boolean
    senderClientId?: boolean
    receiverClientId?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    sender?: boolean | Message$senderArgs<ExtArgs>
    senderClient?: boolean | Message$senderClientArgs<ExtArgs>
    receiverClient?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    sender?: boolean | Message$senderArgs<ExtArgs>
    senderClient?: boolean | Message$senderClientArgs<ExtArgs>
    receiverClient?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs> | null
      senderClient: Prisma.$ClientPayload<ExtArgs> | null
      receiverClient: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      viewed: boolean
      viewedAt: Date | null
      createdAt: Date
      updatedAt: Date
      caseId: string
      tenantId: string
      senderId: string | null
      senderClientId: string | null
      receiverClientId: string
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sender<T extends Message$senderArgs<ExtArgs> = {}>(args?: Subset<T, Message$senderArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    senderClient<T extends Message$senderClientArgs<ExtArgs> = {}>(args?: Subset<T, Message$senderClientArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    receiverClient<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly content: FieldRef<"Message", 'String'>
    readonly viewed: FieldRef<"Message", 'Boolean'>
    readonly viewedAt: FieldRef<"Message", 'DateTime'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly updatedAt: FieldRef<"Message", 'DateTime'>
    readonly caseId: FieldRef<"Message", 'String'>
    readonly tenantId: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'String'>
    readonly senderClientId: FieldRef<"Message", 'String'>
    readonly receiverClientId: FieldRef<"Message", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message.sender
   */
  export type Message$senderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Message.senderClient
   */
  export type Message$senderClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    name: string | null
    url: string | null
    uploadedAt: Date | null
    tenantId: string | null
    caseId: string | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    url: string | null
    uploadedAt: Date | null
    tenantId: string | null
    caseId: string | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    name: number
    url: number
    uploadedAt: number
    tenantId: number
    caseId: number
    _all: number
  }


  export type FileMinAggregateInputType = {
    id?: true
    name?: true
    url?: true
    uploadedAt?: true
    tenantId?: true
    caseId?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    name?: true
    url?: true
    uploadedAt?: true
    tenantId?: true
    caseId?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    name?: true
    url?: true
    uploadedAt?: true
    tenantId?: true
    caseId?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: string
    name: string
    url: string
    uploadedAt: Date
    tenantId: string
    caseId: string
    _count: FileCountAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    uploadedAt?: boolean
    tenantId?: boolean
    caseId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    uploadedAt?: boolean
    tenantId?: boolean
    caseId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    name?: boolean
    url?: boolean
    uploadedAt?: boolean
    tenantId?: boolean
    caseId?: boolean
  }

  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      case: Prisma.$CasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      url: string
      uploadedAt: Date
      tenantId: string
      caseId: string
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */ 
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'String'>
    readonly name: FieldRef<"File", 'String'>
    readonly url: FieldRef<"File", 'String'>
    readonly uploadedAt: FieldRef<"File", 'DateTime'>
    readonly tenantId: FieldRef<"File", 'String'>
    readonly caseId: FieldRef<"File", 'String'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Model Invite
   */

  export type AggregateInvite = {
    _count: InviteCountAggregateOutputType | null
    _min: InviteMinAggregateOutputType | null
    _max: InviteMaxAggregateOutputType | null
  }

  export type InviteMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expiresAt: Date | null
    isUsed: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
    tenantId: string | null
  }

  export type InviteMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expiresAt: Date | null
    isUsed: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    caseId: string | null
    tenantId: string | null
  }

  export type InviteCountAggregateOutputType = {
    id: number
    email: number
    token: number
    expiresAt: number
    isUsed: number
    createdAt: number
    updatedAt: number
    caseId: number
    tenantId: number
    _all: number
  }


  export type InviteMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expiresAt?: true
    isUsed?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    tenantId?: true
  }

  export type InviteMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expiresAt?: true
    isUsed?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    tenantId?: true
  }

  export type InviteCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expiresAt?: true
    isUsed?: true
    createdAt?: true
    updatedAt?: true
    caseId?: true
    tenantId?: true
    _all?: true
  }

  export type InviteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invite to aggregate.
     */
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     */
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invites
    **/
    _count?: true | InviteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InviteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InviteMaxAggregateInputType
  }

  export type GetInviteAggregateType<T extends InviteAggregateArgs> = {
        [P in keyof T & keyof AggregateInvite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvite[P]>
      : GetScalarType<T[P], AggregateInvite[P]>
  }




  export type InviteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InviteWhereInput
    orderBy?: InviteOrderByWithAggregationInput | InviteOrderByWithAggregationInput[]
    by: InviteScalarFieldEnum[] | InviteScalarFieldEnum
    having?: InviteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InviteCountAggregateInputType | true
    _min?: InviteMinAggregateInputType
    _max?: InviteMaxAggregateInputType
  }

  export type InviteGroupByOutputType = {
    id: string
    email: string
    token: string
    expiresAt: Date
    isUsed: boolean
    createdAt: Date
    updatedAt: Date
    caseId: string
    tenantId: string
    _count: InviteCountAggregateOutputType | null
    _min: InviteMinAggregateOutputType | null
    _max: InviteMaxAggregateOutputType | null
  }

  type GetInviteGroupByPayload<T extends InviteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InviteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InviteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InviteGroupByOutputType[P]>
            : GetScalarType<T[P], InviteGroupByOutputType[P]>
        }
      >
    >


  export type InviteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expiresAt?: boolean
    isUsed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    tenantId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invite"]>

  export type InviteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expiresAt?: boolean
    isUsed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    tenantId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invite"]>

  export type InviteSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    expiresAt?: boolean
    isUsed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseId?: boolean
    tenantId?: boolean
  }

  export type InviteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type InviteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $InvitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invite"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      token: string
      expiresAt: Date
      isUsed: boolean
      createdAt: Date
      updatedAt: Date
      caseId: string
      tenantId: string
    }, ExtArgs["result"]["invite"]>
    composites: {}
  }

  type InviteGetPayload<S extends boolean | null | undefined | InviteDefaultArgs> = $Result.GetResult<Prisma.$InvitePayload, S>

  type InviteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InviteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InviteCountAggregateInputType | true
    }

  export interface InviteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invite'], meta: { name: 'Invite' } }
    /**
     * Find zero or one Invite that matches the filter.
     * @param {InviteFindUniqueArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InviteFindUniqueArgs>(args: SelectSubset<T, InviteFindUniqueArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Invite that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InviteFindUniqueOrThrowArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InviteFindUniqueOrThrowArgs>(args: SelectSubset<T, InviteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Invite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteFindFirstArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InviteFindFirstArgs>(args?: SelectSubset<T, InviteFindFirstArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Invite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteFindFirstOrThrowArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InviteFindFirstOrThrowArgs>(args?: SelectSubset<T, InviteFindFirstOrThrowArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Invites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invites
     * const invites = await prisma.invite.findMany()
     * 
     * // Get first 10 Invites
     * const invites = await prisma.invite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inviteWithIdOnly = await prisma.invite.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InviteFindManyArgs>(args?: SelectSubset<T, InviteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Invite.
     * @param {InviteCreateArgs} args - Arguments to create a Invite.
     * @example
     * // Create one Invite
     * const Invite = await prisma.invite.create({
     *   data: {
     *     // ... data to create a Invite
     *   }
     * })
     * 
     */
    create<T extends InviteCreateArgs>(args: SelectSubset<T, InviteCreateArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Invites.
     * @param {InviteCreateManyArgs} args - Arguments to create many Invites.
     * @example
     * // Create many Invites
     * const invite = await prisma.invite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InviteCreateManyArgs>(args?: SelectSubset<T, InviteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invites and returns the data saved in the database.
     * @param {InviteCreateManyAndReturnArgs} args - Arguments to create many Invites.
     * @example
     * // Create many Invites
     * const invite = await prisma.invite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invites and only return the `id`
     * const inviteWithIdOnly = await prisma.invite.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InviteCreateManyAndReturnArgs>(args?: SelectSubset<T, InviteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Invite.
     * @param {InviteDeleteArgs} args - Arguments to delete one Invite.
     * @example
     * // Delete one Invite
     * const Invite = await prisma.invite.delete({
     *   where: {
     *     // ... filter to delete one Invite
     *   }
     * })
     * 
     */
    delete<T extends InviteDeleteArgs>(args: SelectSubset<T, InviteDeleteArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Invite.
     * @param {InviteUpdateArgs} args - Arguments to update one Invite.
     * @example
     * // Update one Invite
     * const invite = await prisma.invite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InviteUpdateArgs>(args: SelectSubset<T, InviteUpdateArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Invites.
     * @param {InviteDeleteManyArgs} args - Arguments to filter Invites to delete.
     * @example
     * // Delete a few Invites
     * const { count } = await prisma.invite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InviteDeleteManyArgs>(args?: SelectSubset<T, InviteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invites
     * const invite = await prisma.invite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InviteUpdateManyArgs>(args: SelectSubset<T, InviteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Invite.
     * @param {InviteUpsertArgs} args - Arguments to update or create a Invite.
     * @example
     * // Update or create a Invite
     * const invite = await prisma.invite.upsert({
     *   create: {
     *     // ... data to create a Invite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invite we want to update
     *   }
     * })
     */
    upsert<T extends InviteUpsertArgs>(args: SelectSubset<T, InviteUpsertArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Invites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteCountArgs} args - Arguments to filter Invites to count.
     * @example
     * // Count the number of Invites
     * const count = await prisma.invite.count({
     *   where: {
     *     // ... the filter for the Invites we want to count
     *   }
     * })
    **/
    count<T extends InviteCountArgs>(
      args?: Subset<T, InviteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InviteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InviteAggregateArgs>(args: Subset<T, InviteAggregateArgs>): Prisma.PrismaPromise<GetInviteAggregateType<T>>

    /**
     * Group by Invite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InviteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InviteGroupByArgs['orderBy'] }
        : { orderBy?: InviteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InviteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInviteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invite model
   */
  readonly fields: InviteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InviteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invite model
   */ 
  interface InviteFieldRefs {
    readonly id: FieldRef<"Invite", 'String'>
    readonly email: FieldRef<"Invite", 'String'>
    readonly token: FieldRef<"Invite", 'String'>
    readonly expiresAt: FieldRef<"Invite", 'DateTime'>
    readonly isUsed: FieldRef<"Invite", 'Boolean'>
    readonly createdAt: FieldRef<"Invite", 'DateTime'>
    readonly updatedAt: FieldRef<"Invite", 'DateTime'>
    readonly caseId: FieldRef<"Invite", 'String'>
    readonly tenantId: FieldRef<"Invite", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Invite findUnique
   */
  export type InviteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invite to fetch.
     */
    where: InviteWhereUniqueInput
  }

  /**
   * Invite findUniqueOrThrow
   */
  export type InviteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invite to fetch.
     */
    where: InviteWhereUniqueInput
  }

  /**
   * Invite findFirst
   */
  export type InviteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invite to fetch.
     */
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     */
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invites.
     */
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invites.
     */
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Invite findFirstOrThrow
   */
  export type InviteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invite to fetch.
     */
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     */
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invites.
     */
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invites.
     */
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Invite findMany
   */
  export type InviteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invites to fetch.
     */
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     */
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invites.
     */
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     */
    skip?: number
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Invite create
   */
  export type InviteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * The data needed to create a Invite.
     */
    data: XOR<InviteCreateInput, InviteUncheckedCreateInput>
  }

  /**
   * Invite createMany
   */
  export type InviteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invites.
     */
    data: InviteCreateManyInput | InviteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invite createManyAndReturn
   */
  export type InviteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Invites.
     */
    data: InviteCreateManyInput | InviteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invite update
   */
  export type InviteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * The data needed to update a Invite.
     */
    data: XOR<InviteUpdateInput, InviteUncheckedUpdateInput>
    /**
     * Choose, which Invite to update.
     */
    where: InviteWhereUniqueInput
  }

  /**
   * Invite updateMany
   */
  export type InviteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invites.
     */
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyInput>
    /**
     * Filter which Invites to update
     */
    where?: InviteWhereInput
  }

  /**
   * Invite upsert
   */
  export type InviteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * The filter to search for the Invite to update in case it exists.
     */
    where: InviteWhereUniqueInput
    /**
     * In case the Invite found by the `where` argument doesn't exist, create a new Invite with this data.
     */
    create: XOR<InviteCreateInput, InviteUncheckedCreateInput>
    /**
     * In case the Invite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InviteUpdateInput, InviteUncheckedUpdateInput>
  }

  /**
   * Invite delete
   */
  export type InviteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter which Invite to delete.
     */
    where: InviteWhereUniqueInput
  }

  /**
   * Invite deleteMany
   */
  export type InviteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invites to delete
     */
    where?: InviteWhereInput
  }

  /**
   * Invite without action
   */
  export type InviteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
  }


  /**
   * Model GeneralSetting
   */

  export type AggregateGeneralSetting = {
    _count: GeneralSettingCountAggregateOutputType | null
    _min: GeneralSettingMinAggregateOutputType | null
    _max: GeneralSettingMaxAggregateOutputType | null
  }

  export type GeneralSettingMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    theme: string | null
    businessName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GeneralSettingMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    theme: string | null
    businessName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GeneralSettingCountAggregateOutputType = {
    id: number
    tenantId: number
    theme: number
    businessName: number
    workingDays: number
    workingHours: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GeneralSettingMinAggregateInputType = {
    id?: true
    tenantId?: true
    theme?: true
    businessName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GeneralSettingMaxAggregateInputType = {
    id?: true
    tenantId?: true
    theme?: true
    businessName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GeneralSettingCountAggregateInputType = {
    id?: true
    tenantId?: true
    theme?: true
    businessName?: true
    workingDays?: true
    workingHours?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GeneralSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneralSetting to aggregate.
     */
    where?: GeneralSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralSettings to fetch.
     */
    orderBy?: GeneralSettingOrderByWithRelationInput | GeneralSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneralSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneralSettings
    **/
    _count?: true | GeneralSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneralSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneralSettingMaxAggregateInputType
  }

  export type GetGeneralSettingAggregateType<T extends GeneralSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneralSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneralSetting[P]>
      : GetScalarType<T[P], AggregateGeneralSetting[P]>
  }




  export type GeneralSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneralSettingWhereInput
    orderBy?: GeneralSettingOrderByWithAggregationInput | GeneralSettingOrderByWithAggregationInput[]
    by: GeneralSettingScalarFieldEnum[] | GeneralSettingScalarFieldEnum
    having?: GeneralSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneralSettingCountAggregateInputType | true
    _min?: GeneralSettingMinAggregateInputType
    _max?: GeneralSettingMaxAggregateInputType
  }

  export type GeneralSettingGroupByOutputType = {
    id: string
    tenantId: string
    theme: string | null
    businessName: string | null
    workingDays: string[]
    workingHours: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: GeneralSettingCountAggregateOutputType | null
    _min: GeneralSettingMinAggregateOutputType | null
    _max: GeneralSettingMaxAggregateOutputType | null
  }

  type GetGeneralSettingGroupByPayload<T extends GeneralSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneralSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneralSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneralSettingGroupByOutputType[P]>
            : GetScalarType<T[P], GeneralSettingGroupByOutputType[P]>
        }
      >
    >


  export type GeneralSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    theme?: boolean
    businessName?: boolean
    workingDays?: boolean
    workingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["generalSetting"]>

  export type GeneralSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    theme?: boolean
    businessName?: boolean
    workingDays?: boolean
    workingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["generalSetting"]>

  export type GeneralSettingSelectScalar = {
    id?: boolean
    tenantId?: boolean
    theme?: boolean
    businessName?: boolean
    workingDays?: boolean
    workingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GeneralSettingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type GeneralSettingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $GeneralSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeneralSetting"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      theme: string | null
      businessName: string | null
      workingDays: string[]
      workingHours: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["generalSetting"]>
    composites: {}
  }

  type GeneralSettingGetPayload<S extends boolean | null | undefined | GeneralSettingDefaultArgs> = $Result.GetResult<Prisma.$GeneralSettingPayload, S>

  type GeneralSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GeneralSettingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GeneralSettingCountAggregateInputType | true
    }

  export interface GeneralSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeneralSetting'], meta: { name: 'GeneralSetting' } }
    /**
     * Find zero or one GeneralSetting that matches the filter.
     * @param {GeneralSettingFindUniqueArgs} args - Arguments to find a GeneralSetting
     * @example
     * // Get one GeneralSetting
     * const generalSetting = await prisma.generalSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GeneralSettingFindUniqueArgs>(args: SelectSubset<T, GeneralSettingFindUniqueArgs<ExtArgs>>): Prisma__GeneralSettingClient<$Result.GetResult<Prisma.$GeneralSettingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GeneralSetting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GeneralSettingFindUniqueOrThrowArgs} args - Arguments to find a GeneralSetting
     * @example
     * // Get one GeneralSetting
     * const generalSetting = await prisma.generalSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GeneralSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, GeneralSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GeneralSettingClient<$Result.GetResult<Prisma.$GeneralSettingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GeneralSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralSettingFindFirstArgs} args - Arguments to find a GeneralSetting
     * @example
     * // Get one GeneralSetting
     * const generalSetting = await prisma.generalSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GeneralSettingFindFirstArgs>(args?: SelectSubset<T, GeneralSettingFindFirstArgs<ExtArgs>>): Prisma__GeneralSettingClient<$Result.GetResult<Prisma.$GeneralSettingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GeneralSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralSettingFindFirstOrThrowArgs} args - Arguments to find a GeneralSetting
     * @example
     * // Get one GeneralSetting
     * const generalSetting = await prisma.generalSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GeneralSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, GeneralSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__GeneralSettingClient<$Result.GetResult<Prisma.$GeneralSettingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GeneralSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneralSettings
     * const generalSettings = await prisma.generalSetting.findMany()
     * 
     * // Get first 10 GeneralSettings
     * const generalSettings = await prisma.generalSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generalSettingWithIdOnly = await prisma.generalSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GeneralSettingFindManyArgs>(args?: SelectSubset<T, GeneralSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralSettingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GeneralSetting.
     * @param {GeneralSettingCreateArgs} args - Arguments to create a GeneralSetting.
     * @example
     * // Create one GeneralSetting
     * const GeneralSetting = await prisma.generalSetting.create({
     *   data: {
     *     // ... data to create a GeneralSetting
     *   }
     * })
     * 
     */
    create<T extends GeneralSettingCreateArgs>(args: SelectSubset<T, GeneralSettingCreateArgs<ExtArgs>>): Prisma__GeneralSettingClient<$Result.GetResult<Prisma.$GeneralSettingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GeneralSettings.
     * @param {GeneralSettingCreateManyArgs} args - Arguments to create many GeneralSettings.
     * @example
     * // Create many GeneralSettings
     * const generalSetting = await prisma.generalSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GeneralSettingCreateManyArgs>(args?: SelectSubset<T, GeneralSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GeneralSettings and returns the data saved in the database.
     * @param {GeneralSettingCreateManyAndReturnArgs} args - Arguments to create many GeneralSettings.
     * @example
     * // Create many GeneralSettings
     * const generalSetting = await prisma.generalSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GeneralSettings and only return the `id`
     * const generalSettingWithIdOnly = await prisma.generalSetting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GeneralSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, GeneralSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralSettingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GeneralSetting.
     * @param {GeneralSettingDeleteArgs} args - Arguments to delete one GeneralSetting.
     * @example
     * // Delete one GeneralSetting
     * const GeneralSetting = await prisma.generalSetting.delete({
     *   where: {
     *     // ... filter to delete one GeneralSetting
     *   }
     * })
     * 
     */
    delete<T extends GeneralSettingDeleteArgs>(args: SelectSubset<T, GeneralSettingDeleteArgs<ExtArgs>>): Prisma__GeneralSettingClient<$Result.GetResult<Prisma.$GeneralSettingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GeneralSetting.
     * @param {GeneralSettingUpdateArgs} args - Arguments to update one GeneralSetting.
     * @example
     * // Update one GeneralSetting
     * const generalSetting = await prisma.generalSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GeneralSettingUpdateArgs>(args: SelectSubset<T, GeneralSettingUpdateArgs<ExtArgs>>): Prisma__GeneralSettingClient<$Result.GetResult<Prisma.$GeneralSettingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GeneralSettings.
     * @param {GeneralSettingDeleteManyArgs} args - Arguments to filter GeneralSettings to delete.
     * @example
     * // Delete a few GeneralSettings
     * const { count } = await prisma.generalSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GeneralSettingDeleteManyArgs>(args?: SelectSubset<T, GeneralSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneralSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneralSettings
     * const generalSetting = await prisma.generalSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GeneralSettingUpdateManyArgs>(args: SelectSubset<T, GeneralSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GeneralSetting.
     * @param {GeneralSettingUpsertArgs} args - Arguments to update or create a GeneralSetting.
     * @example
     * // Update or create a GeneralSetting
     * const generalSetting = await prisma.generalSetting.upsert({
     *   create: {
     *     // ... data to create a GeneralSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneralSetting we want to update
     *   }
     * })
     */
    upsert<T extends GeneralSettingUpsertArgs>(args: SelectSubset<T, GeneralSettingUpsertArgs<ExtArgs>>): Prisma__GeneralSettingClient<$Result.GetResult<Prisma.$GeneralSettingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GeneralSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralSettingCountArgs} args - Arguments to filter GeneralSettings to count.
     * @example
     * // Count the number of GeneralSettings
     * const count = await prisma.generalSetting.count({
     *   where: {
     *     // ... the filter for the GeneralSettings we want to count
     *   }
     * })
    **/
    count<T extends GeneralSettingCountArgs>(
      args?: Subset<T, GeneralSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneralSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneralSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneralSettingAggregateArgs>(args: Subset<T, GeneralSettingAggregateArgs>): Prisma.PrismaPromise<GetGeneralSettingAggregateType<T>>

    /**
     * Group by GeneralSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneralSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneralSettingGroupByArgs['orderBy'] }
        : { orderBy?: GeneralSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneralSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneralSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeneralSetting model
   */
  readonly fields: GeneralSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneralSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneralSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GeneralSetting model
   */ 
  interface GeneralSettingFieldRefs {
    readonly id: FieldRef<"GeneralSetting", 'String'>
    readonly tenantId: FieldRef<"GeneralSetting", 'String'>
    readonly theme: FieldRef<"GeneralSetting", 'String'>
    readonly businessName: FieldRef<"GeneralSetting", 'String'>
    readonly workingDays: FieldRef<"GeneralSetting", 'String[]'>
    readonly workingHours: FieldRef<"GeneralSetting", 'Json'>
    readonly createdAt: FieldRef<"GeneralSetting", 'DateTime'>
    readonly updatedAt: FieldRef<"GeneralSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GeneralSetting findUnique
   */
  export type GeneralSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSetting
     */
    select?: GeneralSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSettingInclude<ExtArgs> | null
    /**
     * Filter, which GeneralSetting to fetch.
     */
    where: GeneralSettingWhereUniqueInput
  }

  /**
   * GeneralSetting findUniqueOrThrow
   */
  export type GeneralSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSetting
     */
    select?: GeneralSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSettingInclude<ExtArgs> | null
    /**
     * Filter, which GeneralSetting to fetch.
     */
    where: GeneralSettingWhereUniqueInput
  }

  /**
   * GeneralSetting findFirst
   */
  export type GeneralSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSetting
     */
    select?: GeneralSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSettingInclude<ExtArgs> | null
    /**
     * Filter, which GeneralSetting to fetch.
     */
    where?: GeneralSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralSettings to fetch.
     */
    orderBy?: GeneralSettingOrderByWithRelationInput | GeneralSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneralSettings.
     */
    cursor?: GeneralSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneralSettings.
     */
    distinct?: GeneralSettingScalarFieldEnum | GeneralSettingScalarFieldEnum[]
  }

  /**
   * GeneralSetting findFirstOrThrow
   */
  export type GeneralSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSetting
     */
    select?: GeneralSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSettingInclude<ExtArgs> | null
    /**
     * Filter, which GeneralSetting to fetch.
     */
    where?: GeneralSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralSettings to fetch.
     */
    orderBy?: GeneralSettingOrderByWithRelationInput | GeneralSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneralSettings.
     */
    cursor?: GeneralSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneralSettings.
     */
    distinct?: GeneralSettingScalarFieldEnum | GeneralSettingScalarFieldEnum[]
  }

  /**
   * GeneralSetting findMany
   */
  export type GeneralSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSetting
     */
    select?: GeneralSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSettingInclude<ExtArgs> | null
    /**
     * Filter, which GeneralSettings to fetch.
     */
    where?: GeneralSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralSettings to fetch.
     */
    orderBy?: GeneralSettingOrderByWithRelationInput | GeneralSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneralSettings.
     */
    cursor?: GeneralSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralSettings.
     */
    skip?: number
    distinct?: GeneralSettingScalarFieldEnum | GeneralSettingScalarFieldEnum[]
  }

  /**
   * GeneralSetting create
   */
  export type GeneralSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSetting
     */
    select?: GeneralSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSettingInclude<ExtArgs> | null
    /**
     * The data needed to create a GeneralSetting.
     */
    data: XOR<GeneralSettingCreateInput, GeneralSettingUncheckedCreateInput>
  }

  /**
   * GeneralSetting createMany
   */
  export type GeneralSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeneralSettings.
     */
    data: GeneralSettingCreateManyInput | GeneralSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GeneralSetting createManyAndReturn
   */
  export type GeneralSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSetting
     */
    select?: GeneralSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GeneralSettings.
     */
    data: GeneralSettingCreateManyInput | GeneralSettingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSettingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GeneralSetting update
   */
  export type GeneralSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSetting
     */
    select?: GeneralSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSettingInclude<ExtArgs> | null
    /**
     * The data needed to update a GeneralSetting.
     */
    data: XOR<GeneralSettingUpdateInput, GeneralSettingUncheckedUpdateInput>
    /**
     * Choose, which GeneralSetting to update.
     */
    where: GeneralSettingWhereUniqueInput
  }

  /**
   * GeneralSetting updateMany
   */
  export type GeneralSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeneralSettings.
     */
    data: XOR<GeneralSettingUpdateManyMutationInput, GeneralSettingUncheckedUpdateManyInput>
    /**
     * Filter which GeneralSettings to update
     */
    where?: GeneralSettingWhereInput
  }

  /**
   * GeneralSetting upsert
   */
  export type GeneralSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSetting
     */
    select?: GeneralSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSettingInclude<ExtArgs> | null
    /**
     * The filter to search for the GeneralSetting to update in case it exists.
     */
    where: GeneralSettingWhereUniqueInput
    /**
     * In case the GeneralSetting found by the `where` argument doesn't exist, create a new GeneralSetting with this data.
     */
    create: XOR<GeneralSettingCreateInput, GeneralSettingUncheckedCreateInput>
    /**
     * In case the GeneralSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneralSettingUpdateInput, GeneralSettingUncheckedUpdateInput>
  }

  /**
   * GeneralSetting delete
   */
  export type GeneralSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSetting
     */
    select?: GeneralSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSettingInclude<ExtArgs> | null
    /**
     * Filter which GeneralSetting to delete.
     */
    where: GeneralSettingWhereUniqueInput
  }

  /**
   * GeneralSetting deleteMany
   */
  export type GeneralSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneralSettings to delete
     */
    where?: GeneralSettingWhereInput
  }

  /**
   * GeneralSetting without action
   */
  export type GeneralSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSetting
     */
    select?: GeneralSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSettingInclude<ExtArgs> | null
  }


  /**
   * Model NotificationSetting
   */

  export type AggregateNotificationSetting = {
    _count: NotificationSettingCountAggregateOutputType | null
    _min: NotificationSettingMinAggregateOutputType | null
    _max: NotificationSettingMaxAggregateOutputType | null
  }

  export type NotificationSettingMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    email: boolean | null
    whatsapp: boolean | null
    app: boolean | null
    newMessage: boolean | null
    caseUpdate: boolean | null
    newDocument: boolean | null
    signatureRequest: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationSettingMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    email: boolean | null
    whatsapp: boolean | null
    app: boolean | null
    newMessage: boolean | null
    caseUpdate: boolean | null
    newDocument: boolean | null
    signatureRequest: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationSettingCountAggregateOutputType = {
    id: number
    tenantId: number
    email: number
    whatsapp: number
    app: number
    newMessage: number
    caseUpdate: number
    newDocument: number
    signatureRequest: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationSettingMinAggregateInputType = {
    id?: true
    tenantId?: true
    email?: true
    whatsapp?: true
    app?: true
    newMessage?: true
    caseUpdate?: true
    newDocument?: true
    signatureRequest?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationSettingMaxAggregateInputType = {
    id?: true
    tenantId?: true
    email?: true
    whatsapp?: true
    app?: true
    newMessage?: true
    caseUpdate?: true
    newDocument?: true
    signatureRequest?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationSettingCountAggregateInputType = {
    id?: true
    tenantId?: true
    email?: true
    whatsapp?: true
    app?: true
    newMessage?: true
    caseUpdate?: true
    newDocument?: true
    signatureRequest?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationSetting to aggregate.
     */
    where?: NotificationSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingOrderByWithRelationInput | NotificationSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationSettings
    **/
    _count?: true | NotificationSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationSettingMaxAggregateInputType
  }

  export type GetNotificationSettingAggregateType<T extends NotificationSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationSetting[P]>
      : GetScalarType<T[P], AggregateNotificationSetting[P]>
  }




  export type NotificationSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationSettingWhereInput
    orderBy?: NotificationSettingOrderByWithAggregationInput | NotificationSettingOrderByWithAggregationInput[]
    by: NotificationSettingScalarFieldEnum[] | NotificationSettingScalarFieldEnum
    having?: NotificationSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationSettingCountAggregateInputType | true
    _min?: NotificationSettingMinAggregateInputType
    _max?: NotificationSettingMaxAggregateInputType
  }

  export type NotificationSettingGroupByOutputType = {
    id: string
    tenantId: string
    email: boolean
    whatsapp: boolean
    app: boolean
    newMessage: boolean
    caseUpdate: boolean
    newDocument: boolean
    signatureRequest: boolean
    createdAt: Date
    updatedAt: Date
    _count: NotificationSettingCountAggregateOutputType | null
    _min: NotificationSettingMinAggregateOutputType | null
    _max: NotificationSettingMaxAggregateOutputType | null
  }

  type GetNotificationSettingGroupByPayload<T extends NotificationSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationSettingGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationSettingGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    email?: boolean
    whatsapp?: boolean
    app?: boolean
    newMessage?: boolean
    caseUpdate?: boolean
    newDocument?: boolean
    signatureRequest?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationSetting"]>

  export type NotificationSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    email?: boolean
    whatsapp?: boolean
    app?: boolean
    newMessage?: boolean
    caseUpdate?: boolean
    newDocument?: boolean
    signatureRequest?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationSetting"]>

  export type NotificationSettingSelectScalar = {
    id?: boolean
    tenantId?: boolean
    email?: boolean
    whatsapp?: boolean
    app?: boolean
    newMessage?: boolean
    caseUpdate?: boolean
    newDocument?: boolean
    signatureRequest?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationSettingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type NotificationSettingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $NotificationSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationSetting"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      email: boolean
      whatsapp: boolean
      app: boolean
      newMessage: boolean
      caseUpdate: boolean
      newDocument: boolean
      signatureRequest: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notificationSetting"]>
    composites: {}
  }

  type NotificationSettingGetPayload<S extends boolean | null | undefined | NotificationSettingDefaultArgs> = $Result.GetResult<Prisma.$NotificationSettingPayload, S>

  type NotificationSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationSettingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationSettingCountAggregateInputType | true
    }

  export interface NotificationSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationSetting'], meta: { name: 'NotificationSetting' } }
    /**
     * Find zero or one NotificationSetting that matches the filter.
     * @param {NotificationSettingFindUniqueArgs} args - Arguments to find a NotificationSetting
     * @example
     * // Get one NotificationSetting
     * const notificationSetting = await prisma.notificationSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationSettingFindUniqueArgs>(args: SelectSubset<T, NotificationSettingFindUniqueArgs<ExtArgs>>): Prisma__NotificationSettingClient<$Result.GetResult<Prisma.$NotificationSettingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NotificationSetting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationSettingFindUniqueOrThrowArgs} args - Arguments to find a NotificationSetting
     * @example
     * // Get one NotificationSetting
     * const notificationSetting = await prisma.notificationSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationSettingClient<$Result.GetResult<Prisma.$NotificationSettingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NotificationSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingFindFirstArgs} args - Arguments to find a NotificationSetting
     * @example
     * // Get one NotificationSetting
     * const notificationSetting = await prisma.notificationSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationSettingFindFirstArgs>(args?: SelectSubset<T, NotificationSettingFindFirstArgs<ExtArgs>>): Prisma__NotificationSettingClient<$Result.GetResult<Prisma.$NotificationSettingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NotificationSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingFindFirstOrThrowArgs} args - Arguments to find a NotificationSetting
     * @example
     * // Get one NotificationSetting
     * const notificationSetting = await prisma.notificationSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationSettingClient<$Result.GetResult<Prisma.$NotificationSettingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NotificationSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationSettings
     * const notificationSettings = await prisma.notificationSetting.findMany()
     * 
     * // Get first 10 NotificationSettings
     * const notificationSettings = await prisma.notificationSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationSettingWithIdOnly = await prisma.notificationSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationSettingFindManyArgs>(args?: SelectSubset<T, NotificationSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationSettingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NotificationSetting.
     * @param {NotificationSettingCreateArgs} args - Arguments to create a NotificationSetting.
     * @example
     * // Create one NotificationSetting
     * const NotificationSetting = await prisma.notificationSetting.create({
     *   data: {
     *     // ... data to create a NotificationSetting
     *   }
     * })
     * 
     */
    create<T extends NotificationSettingCreateArgs>(args: SelectSubset<T, NotificationSettingCreateArgs<ExtArgs>>): Prisma__NotificationSettingClient<$Result.GetResult<Prisma.$NotificationSettingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NotificationSettings.
     * @param {NotificationSettingCreateManyArgs} args - Arguments to create many NotificationSettings.
     * @example
     * // Create many NotificationSettings
     * const notificationSetting = await prisma.notificationSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationSettingCreateManyArgs>(args?: SelectSubset<T, NotificationSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationSettings and returns the data saved in the database.
     * @param {NotificationSettingCreateManyAndReturnArgs} args - Arguments to create many NotificationSettings.
     * @example
     * // Create many NotificationSettings
     * const notificationSetting = await prisma.notificationSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationSettings and only return the `id`
     * const notificationSettingWithIdOnly = await prisma.notificationSetting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationSettingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a NotificationSetting.
     * @param {NotificationSettingDeleteArgs} args - Arguments to delete one NotificationSetting.
     * @example
     * // Delete one NotificationSetting
     * const NotificationSetting = await prisma.notificationSetting.delete({
     *   where: {
     *     // ... filter to delete one NotificationSetting
     *   }
     * })
     * 
     */
    delete<T extends NotificationSettingDeleteArgs>(args: SelectSubset<T, NotificationSettingDeleteArgs<ExtArgs>>): Prisma__NotificationSettingClient<$Result.GetResult<Prisma.$NotificationSettingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NotificationSetting.
     * @param {NotificationSettingUpdateArgs} args - Arguments to update one NotificationSetting.
     * @example
     * // Update one NotificationSetting
     * const notificationSetting = await prisma.notificationSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationSettingUpdateArgs>(args: SelectSubset<T, NotificationSettingUpdateArgs<ExtArgs>>): Prisma__NotificationSettingClient<$Result.GetResult<Prisma.$NotificationSettingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NotificationSettings.
     * @param {NotificationSettingDeleteManyArgs} args - Arguments to filter NotificationSettings to delete.
     * @example
     * // Delete a few NotificationSettings
     * const { count } = await prisma.notificationSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationSettingDeleteManyArgs>(args?: SelectSubset<T, NotificationSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationSettings
     * const notificationSetting = await prisma.notificationSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationSettingUpdateManyArgs>(args: SelectSubset<T, NotificationSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NotificationSetting.
     * @param {NotificationSettingUpsertArgs} args - Arguments to update or create a NotificationSetting.
     * @example
     * // Update or create a NotificationSetting
     * const notificationSetting = await prisma.notificationSetting.upsert({
     *   create: {
     *     // ... data to create a NotificationSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationSetting we want to update
     *   }
     * })
     */
    upsert<T extends NotificationSettingUpsertArgs>(args: SelectSubset<T, NotificationSettingUpsertArgs<ExtArgs>>): Prisma__NotificationSettingClient<$Result.GetResult<Prisma.$NotificationSettingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingCountArgs} args - Arguments to filter NotificationSettings to count.
     * @example
     * // Count the number of NotificationSettings
     * const count = await prisma.notificationSetting.count({
     *   where: {
     *     // ... the filter for the NotificationSettings we want to count
     *   }
     * })
    **/
    count<T extends NotificationSettingCountArgs>(
      args?: Subset<T, NotificationSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationSettingAggregateArgs>(args: Subset<T, NotificationSettingAggregateArgs>): Prisma.PrismaPromise<GetNotificationSettingAggregateType<T>>

    /**
     * Group by NotificationSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationSettingGroupByArgs['orderBy'] }
        : { orderBy?: NotificationSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationSetting model
   */
  readonly fields: NotificationSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationSetting model
   */ 
  interface NotificationSettingFieldRefs {
    readonly id: FieldRef<"NotificationSetting", 'String'>
    readonly tenantId: FieldRef<"NotificationSetting", 'String'>
    readonly email: FieldRef<"NotificationSetting", 'Boolean'>
    readonly whatsapp: FieldRef<"NotificationSetting", 'Boolean'>
    readonly app: FieldRef<"NotificationSetting", 'Boolean'>
    readonly newMessage: FieldRef<"NotificationSetting", 'Boolean'>
    readonly caseUpdate: FieldRef<"NotificationSetting", 'Boolean'>
    readonly newDocument: FieldRef<"NotificationSetting", 'Boolean'>
    readonly signatureRequest: FieldRef<"NotificationSetting", 'Boolean'>
    readonly createdAt: FieldRef<"NotificationSetting", 'DateTime'>
    readonly updatedAt: FieldRef<"NotificationSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationSetting findUnique
   */
  export type NotificationSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSetting
     */
    select?: NotificationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSetting to fetch.
     */
    where: NotificationSettingWhereUniqueInput
  }

  /**
   * NotificationSetting findUniqueOrThrow
   */
  export type NotificationSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSetting
     */
    select?: NotificationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSetting to fetch.
     */
    where: NotificationSettingWhereUniqueInput
  }

  /**
   * NotificationSetting findFirst
   */
  export type NotificationSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSetting
     */
    select?: NotificationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSetting to fetch.
     */
    where?: NotificationSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingOrderByWithRelationInput | NotificationSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationSettings.
     */
    cursor?: NotificationSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationSettings.
     */
    distinct?: NotificationSettingScalarFieldEnum | NotificationSettingScalarFieldEnum[]
  }

  /**
   * NotificationSetting findFirstOrThrow
   */
  export type NotificationSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSetting
     */
    select?: NotificationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSetting to fetch.
     */
    where?: NotificationSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingOrderByWithRelationInput | NotificationSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationSettings.
     */
    cursor?: NotificationSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationSettings.
     */
    distinct?: NotificationSettingScalarFieldEnum | NotificationSettingScalarFieldEnum[]
  }

  /**
   * NotificationSetting findMany
   */
  export type NotificationSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSetting
     */
    select?: NotificationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where?: NotificationSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingOrderByWithRelationInput | NotificationSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationSettings.
     */
    cursor?: NotificationSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    distinct?: NotificationSettingScalarFieldEnum | NotificationSettingScalarFieldEnum[]
  }

  /**
   * NotificationSetting create
   */
  export type NotificationSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSetting
     */
    select?: NotificationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationSetting.
     */
    data: XOR<NotificationSettingCreateInput, NotificationSettingUncheckedCreateInput>
  }

  /**
   * NotificationSetting createMany
   */
  export type NotificationSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationSettings.
     */
    data: NotificationSettingCreateManyInput | NotificationSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationSetting createManyAndReturn
   */
  export type NotificationSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSetting
     */
    select?: NotificationSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many NotificationSettings.
     */
    data: NotificationSettingCreateManyInput | NotificationSettingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationSetting update
   */
  export type NotificationSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSetting
     */
    select?: NotificationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationSetting.
     */
    data: XOR<NotificationSettingUpdateInput, NotificationSettingUncheckedUpdateInput>
    /**
     * Choose, which NotificationSetting to update.
     */
    where: NotificationSettingWhereUniqueInput
  }

  /**
   * NotificationSetting updateMany
   */
  export type NotificationSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationSettings.
     */
    data: XOR<NotificationSettingUpdateManyMutationInput, NotificationSettingUncheckedUpdateManyInput>
    /**
     * Filter which NotificationSettings to update
     */
    where?: NotificationSettingWhereInput
  }

  /**
   * NotificationSetting upsert
   */
  export type NotificationSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSetting
     */
    select?: NotificationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationSetting to update in case it exists.
     */
    where: NotificationSettingWhereUniqueInput
    /**
     * In case the NotificationSetting found by the `where` argument doesn't exist, create a new NotificationSetting with this data.
     */
    create: XOR<NotificationSettingCreateInput, NotificationSettingUncheckedCreateInput>
    /**
     * In case the NotificationSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationSettingUpdateInput, NotificationSettingUncheckedUpdateInput>
  }

  /**
   * NotificationSetting delete
   */
  export type NotificationSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSetting
     */
    select?: NotificationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingInclude<ExtArgs> | null
    /**
     * Filter which NotificationSetting to delete.
     */
    where: NotificationSettingWhereUniqueInput
  }

  /**
   * NotificationSetting deleteMany
   */
  export type NotificationSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationSettings to delete
     */
    where?: NotificationSettingWhereInput
  }

  /**
   * NotificationSetting without action
   */
  export type NotificationSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSetting
     */
    select?: NotificationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingInclude<ExtArgs> | null
  }


  /**
   * Model SecuritySetting
   */

  export type AggregateSecuritySetting = {
    _count: SecuritySettingCountAggregateOutputType | null
    _avg: SecuritySettingAvgAggregateOutputType | null
    _sum: SecuritySettingSumAggregateOutputType | null
    _min: SecuritySettingMinAggregateOutputType | null
    _max: SecuritySettingMaxAggregateOutputType | null
  }

  export type SecuritySettingAvgAggregateOutputType = {
    autoLogoutMinutes: number | null
  }

  export type SecuritySettingSumAggregateOutputType = {
    autoLogoutMinutes: number | null
  }

  export type SecuritySettingMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    twoFAEnabled: boolean | null
    autoLogoutMinutes: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SecuritySettingMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    twoFAEnabled: boolean | null
    autoLogoutMinutes: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SecuritySettingCountAggregateOutputType = {
    id: number
    tenantId: number
    twoFAEnabled: number
    autoLogoutMinutes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SecuritySettingAvgAggregateInputType = {
    autoLogoutMinutes?: true
  }

  export type SecuritySettingSumAggregateInputType = {
    autoLogoutMinutes?: true
  }

  export type SecuritySettingMinAggregateInputType = {
    id?: true
    tenantId?: true
    twoFAEnabled?: true
    autoLogoutMinutes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SecuritySettingMaxAggregateInputType = {
    id?: true
    tenantId?: true
    twoFAEnabled?: true
    autoLogoutMinutes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SecuritySettingCountAggregateInputType = {
    id?: true
    tenantId?: true
    twoFAEnabled?: true
    autoLogoutMinutes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SecuritySettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SecuritySetting to aggregate.
     */
    where?: SecuritySettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecuritySettings to fetch.
     */
    orderBy?: SecuritySettingOrderByWithRelationInput | SecuritySettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SecuritySettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecuritySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecuritySettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SecuritySettings
    **/
    _count?: true | SecuritySettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SecuritySettingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SecuritySettingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SecuritySettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SecuritySettingMaxAggregateInputType
  }

  export type GetSecuritySettingAggregateType<T extends SecuritySettingAggregateArgs> = {
        [P in keyof T & keyof AggregateSecuritySetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSecuritySetting[P]>
      : GetScalarType<T[P], AggregateSecuritySetting[P]>
  }




  export type SecuritySettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SecuritySettingWhereInput
    orderBy?: SecuritySettingOrderByWithAggregationInput | SecuritySettingOrderByWithAggregationInput[]
    by: SecuritySettingScalarFieldEnum[] | SecuritySettingScalarFieldEnum
    having?: SecuritySettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SecuritySettingCountAggregateInputType | true
    _avg?: SecuritySettingAvgAggregateInputType
    _sum?: SecuritySettingSumAggregateInputType
    _min?: SecuritySettingMinAggregateInputType
    _max?: SecuritySettingMaxAggregateInputType
  }

  export type SecuritySettingGroupByOutputType = {
    id: string
    tenantId: string
    twoFAEnabled: boolean
    autoLogoutMinutes: number
    createdAt: Date
    updatedAt: Date
    _count: SecuritySettingCountAggregateOutputType | null
    _avg: SecuritySettingAvgAggregateOutputType | null
    _sum: SecuritySettingSumAggregateOutputType | null
    _min: SecuritySettingMinAggregateOutputType | null
    _max: SecuritySettingMaxAggregateOutputType | null
  }

  type GetSecuritySettingGroupByPayload<T extends SecuritySettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SecuritySettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SecuritySettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SecuritySettingGroupByOutputType[P]>
            : GetScalarType<T[P], SecuritySettingGroupByOutputType[P]>
        }
      >
    >


  export type SecuritySettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    twoFAEnabled?: boolean
    autoLogoutMinutes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["securitySetting"]>

  export type SecuritySettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    twoFAEnabled?: boolean
    autoLogoutMinutes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["securitySetting"]>

  export type SecuritySettingSelectScalar = {
    id?: boolean
    tenantId?: boolean
    twoFAEnabled?: boolean
    autoLogoutMinutes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SecuritySettingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type SecuritySettingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $SecuritySettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SecuritySetting"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      twoFAEnabled: boolean
      autoLogoutMinutes: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["securitySetting"]>
    composites: {}
  }

  type SecuritySettingGetPayload<S extends boolean | null | undefined | SecuritySettingDefaultArgs> = $Result.GetResult<Prisma.$SecuritySettingPayload, S>

  type SecuritySettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SecuritySettingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SecuritySettingCountAggregateInputType | true
    }

  export interface SecuritySettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SecuritySetting'], meta: { name: 'SecuritySetting' } }
    /**
     * Find zero or one SecuritySetting that matches the filter.
     * @param {SecuritySettingFindUniqueArgs} args - Arguments to find a SecuritySetting
     * @example
     * // Get one SecuritySetting
     * const securitySetting = await prisma.securitySetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SecuritySettingFindUniqueArgs>(args: SelectSubset<T, SecuritySettingFindUniqueArgs<ExtArgs>>): Prisma__SecuritySettingClient<$Result.GetResult<Prisma.$SecuritySettingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SecuritySetting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SecuritySettingFindUniqueOrThrowArgs} args - Arguments to find a SecuritySetting
     * @example
     * // Get one SecuritySetting
     * const securitySetting = await prisma.securitySetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SecuritySettingFindUniqueOrThrowArgs>(args: SelectSubset<T, SecuritySettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SecuritySettingClient<$Result.GetResult<Prisma.$SecuritySettingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SecuritySetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecuritySettingFindFirstArgs} args - Arguments to find a SecuritySetting
     * @example
     * // Get one SecuritySetting
     * const securitySetting = await prisma.securitySetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SecuritySettingFindFirstArgs>(args?: SelectSubset<T, SecuritySettingFindFirstArgs<ExtArgs>>): Prisma__SecuritySettingClient<$Result.GetResult<Prisma.$SecuritySettingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SecuritySetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecuritySettingFindFirstOrThrowArgs} args - Arguments to find a SecuritySetting
     * @example
     * // Get one SecuritySetting
     * const securitySetting = await prisma.securitySetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SecuritySettingFindFirstOrThrowArgs>(args?: SelectSubset<T, SecuritySettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SecuritySettingClient<$Result.GetResult<Prisma.$SecuritySettingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SecuritySettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecuritySettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SecuritySettings
     * const securitySettings = await prisma.securitySetting.findMany()
     * 
     * // Get first 10 SecuritySettings
     * const securitySettings = await prisma.securitySetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const securitySettingWithIdOnly = await prisma.securitySetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SecuritySettingFindManyArgs>(args?: SelectSubset<T, SecuritySettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecuritySettingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SecuritySetting.
     * @param {SecuritySettingCreateArgs} args - Arguments to create a SecuritySetting.
     * @example
     * // Create one SecuritySetting
     * const SecuritySetting = await prisma.securitySetting.create({
     *   data: {
     *     // ... data to create a SecuritySetting
     *   }
     * })
     * 
     */
    create<T extends SecuritySettingCreateArgs>(args: SelectSubset<T, SecuritySettingCreateArgs<ExtArgs>>): Prisma__SecuritySettingClient<$Result.GetResult<Prisma.$SecuritySettingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SecuritySettings.
     * @param {SecuritySettingCreateManyArgs} args - Arguments to create many SecuritySettings.
     * @example
     * // Create many SecuritySettings
     * const securitySetting = await prisma.securitySetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SecuritySettingCreateManyArgs>(args?: SelectSubset<T, SecuritySettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SecuritySettings and returns the data saved in the database.
     * @param {SecuritySettingCreateManyAndReturnArgs} args - Arguments to create many SecuritySettings.
     * @example
     * // Create many SecuritySettings
     * const securitySetting = await prisma.securitySetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SecuritySettings and only return the `id`
     * const securitySettingWithIdOnly = await prisma.securitySetting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SecuritySettingCreateManyAndReturnArgs>(args?: SelectSubset<T, SecuritySettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecuritySettingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SecuritySetting.
     * @param {SecuritySettingDeleteArgs} args - Arguments to delete one SecuritySetting.
     * @example
     * // Delete one SecuritySetting
     * const SecuritySetting = await prisma.securitySetting.delete({
     *   where: {
     *     // ... filter to delete one SecuritySetting
     *   }
     * })
     * 
     */
    delete<T extends SecuritySettingDeleteArgs>(args: SelectSubset<T, SecuritySettingDeleteArgs<ExtArgs>>): Prisma__SecuritySettingClient<$Result.GetResult<Prisma.$SecuritySettingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SecuritySetting.
     * @param {SecuritySettingUpdateArgs} args - Arguments to update one SecuritySetting.
     * @example
     * // Update one SecuritySetting
     * const securitySetting = await prisma.securitySetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SecuritySettingUpdateArgs>(args: SelectSubset<T, SecuritySettingUpdateArgs<ExtArgs>>): Prisma__SecuritySettingClient<$Result.GetResult<Prisma.$SecuritySettingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SecuritySettings.
     * @param {SecuritySettingDeleteManyArgs} args - Arguments to filter SecuritySettings to delete.
     * @example
     * // Delete a few SecuritySettings
     * const { count } = await prisma.securitySetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SecuritySettingDeleteManyArgs>(args?: SelectSubset<T, SecuritySettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SecuritySettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecuritySettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SecuritySettings
     * const securitySetting = await prisma.securitySetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SecuritySettingUpdateManyArgs>(args: SelectSubset<T, SecuritySettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SecuritySetting.
     * @param {SecuritySettingUpsertArgs} args - Arguments to update or create a SecuritySetting.
     * @example
     * // Update or create a SecuritySetting
     * const securitySetting = await prisma.securitySetting.upsert({
     *   create: {
     *     // ... data to create a SecuritySetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SecuritySetting we want to update
     *   }
     * })
     */
    upsert<T extends SecuritySettingUpsertArgs>(args: SelectSubset<T, SecuritySettingUpsertArgs<ExtArgs>>): Prisma__SecuritySettingClient<$Result.GetResult<Prisma.$SecuritySettingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SecuritySettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecuritySettingCountArgs} args - Arguments to filter SecuritySettings to count.
     * @example
     * // Count the number of SecuritySettings
     * const count = await prisma.securitySetting.count({
     *   where: {
     *     // ... the filter for the SecuritySettings we want to count
     *   }
     * })
    **/
    count<T extends SecuritySettingCountArgs>(
      args?: Subset<T, SecuritySettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SecuritySettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SecuritySetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecuritySettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SecuritySettingAggregateArgs>(args: Subset<T, SecuritySettingAggregateArgs>): Prisma.PrismaPromise<GetSecuritySettingAggregateType<T>>

    /**
     * Group by SecuritySetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecuritySettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SecuritySettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SecuritySettingGroupByArgs['orderBy'] }
        : { orderBy?: SecuritySettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SecuritySettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSecuritySettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SecuritySetting model
   */
  readonly fields: SecuritySettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SecuritySetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SecuritySettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SecuritySetting model
   */ 
  interface SecuritySettingFieldRefs {
    readonly id: FieldRef<"SecuritySetting", 'String'>
    readonly tenantId: FieldRef<"SecuritySetting", 'String'>
    readonly twoFAEnabled: FieldRef<"SecuritySetting", 'Boolean'>
    readonly autoLogoutMinutes: FieldRef<"SecuritySetting", 'Int'>
    readonly createdAt: FieldRef<"SecuritySetting", 'DateTime'>
    readonly updatedAt: FieldRef<"SecuritySetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SecuritySetting findUnique
   */
  export type SecuritySettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySetting
     */
    select?: SecuritySettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingInclude<ExtArgs> | null
    /**
     * Filter, which SecuritySetting to fetch.
     */
    where: SecuritySettingWhereUniqueInput
  }

  /**
   * SecuritySetting findUniqueOrThrow
   */
  export type SecuritySettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySetting
     */
    select?: SecuritySettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingInclude<ExtArgs> | null
    /**
     * Filter, which SecuritySetting to fetch.
     */
    where: SecuritySettingWhereUniqueInput
  }

  /**
   * SecuritySetting findFirst
   */
  export type SecuritySettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySetting
     */
    select?: SecuritySettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingInclude<ExtArgs> | null
    /**
     * Filter, which SecuritySetting to fetch.
     */
    where?: SecuritySettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecuritySettings to fetch.
     */
    orderBy?: SecuritySettingOrderByWithRelationInput | SecuritySettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SecuritySettings.
     */
    cursor?: SecuritySettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecuritySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecuritySettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SecuritySettings.
     */
    distinct?: SecuritySettingScalarFieldEnum | SecuritySettingScalarFieldEnum[]
  }

  /**
   * SecuritySetting findFirstOrThrow
   */
  export type SecuritySettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySetting
     */
    select?: SecuritySettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingInclude<ExtArgs> | null
    /**
     * Filter, which SecuritySetting to fetch.
     */
    where?: SecuritySettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecuritySettings to fetch.
     */
    orderBy?: SecuritySettingOrderByWithRelationInput | SecuritySettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SecuritySettings.
     */
    cursor?: SecuritySettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecuritySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecuritySettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SecuritySettings.
     */
    distinct?: SecuritySettingScalarFieldEnum | SecuritySettingScalarFieldEnum[]
  }

  /**
   * SecuritySetting findMany
   */
  export type SecuritySettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySetting
     */
    select?: SecuritySettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingInclude<ExtArgs> | null
    /**
     * Filter, which SecuritySettings to fetch.
     */
    where?: SecuritySettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecuritySettings to fetch.
     */
    orderBy?: SecuritySettingOrderByWithRelationInput | SecuritySettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SecuritySettings.
     */
    cursor?: SecuritySettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecuritySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecuritySettings.
     */
    skip?: number
    distinct?: SecuritySettingScalarFieldEnum | SecuritySettingScalarFieldEnum[]
  }

  /**
   * SecuritySetting create
   */
  export type SecuritySettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySetting
     */
    select?: SecuritySettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingInclude<ExtArgs> | null
    /**
     * The data needed to create a SecuritySetting.
     */
    data: XOR<SecuritySettingCreateInput, SecuritySettingUncheckedCreateInput>
  }

  /**
   * SecuritySetting createMany
   */
  export type SecuritySettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SecuritySettings.
     */
    data: SecuritySettingCreateManyInput | SecuritySettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SecuritySetting createManyAndReturn
   */
  export type SecuritySettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySetting
     */
    select?: SecuritySettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SecuritySettings.
     */
    data: SecuritySettingCreateManyInput | SecuritySettingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SecuritySetting update
   */
  export type SecuritySettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySetting
     */
    select?: SecuritySettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingInclude<ExtArgs> | null
    /**
     * The data needed to update a SecuritySetting.
     */
    data: XOR<SecuritySettingUpdateInput, SecuritySettingUncheckedUpdateInput>
    /**
     * Choose, which SecuritySetting to update.
     */
    where: SecuritySettingWhereUniqueInput
  }

  /**
   * SecuritySetting updateMany
   */
  export type SecuritySettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SecuritySettings.
     */
    data: XOR<SecuritySettingUpdateManyMutationInput, SecuritySettingUncheckedUpdateManyInput>
    /**
     * Filter which SecuritySettings to update
     */
    where?: SecuritySettingWhereInput
  }

  /**
   * SecuritySetting upsert
   */
  export type SecuritySettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySetting
     */
    select?: SecuritySettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingInclude<ExtArgs> | null
    /**
     * The filter to search for the SecuritySetting to update in case it exists.
     */
    where: SecuritySettingWhereUniqueInput
    /**
     * In case the SecuritySetting found by the `where` argument doesn't exist, create a new SecuritySetting with this data.
     */
    create: XOR<SecuritySettingCreateInput, SecuritySettingUncheckedCreateInput>
    /**
     * In case the SecuritySetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SecuritySettingUpdateInput, SecuritySettingUncheckedUpdateInput>
  }

  /**
   * SecuritySetting delete
   */
  export type SecuritySettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySetting
     */
    select?: SecuritySettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingInclude<ExtArgs> | null
    /**
     * Filter which SecuritySetting to delete.
     */
    where: SecuritySettingWhereUniqueInput
  }

  /**
   * SecuritySetting deleteMany
   */
  export type SecuritySettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SecuritySettings to delete
     */
    where?: SecuritySettingWhereInput
  }

  /**
   * SecuritySetting without action
   */
  export type SecuritySettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySetting
     */
    select?: SecuritySettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingInclude<ExtArgs> | null
  }


  /**
   * Model BillingSetting
   */

  export type AggregateBillingSetting = {
    _count: BillingSettingCountAggregateOutputType | null
    _min: BillingSettingMinAggregateOutputType | null
    _max: BillingSettingMaxAggregateOutputType | null
  }

  export type BillingSettingMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    plan: string | null
    nextCharge: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BillingSettingMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    plan: string | null
    nextCharge: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BillingSettingCountAggregateOutputType = {
    id: number
    tenantId: number
    plan: number
    nextCharge: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BillingSettingMinAggregateInputType = {
    id?: true
    tenantId?: true
    plan?: true
    nextCharge?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BillingSettingMaxAggregateInputType = {
    id?: true
    tenantId?: true
    plan?: true
    nextCharge?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BillingSettingCountAggregateInputType = {
    id?: true
    tenantId?: true
    plan?: true
    nextCharge?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BillingSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillingSetting to aggregate.
     */
    where?: BillingSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingSettings to fetch.
     */
    orderBy?: BillingSettingOrderByWithRelationInput | BillingSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BillingSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BillingSettings
    **/
    _count?: true | BillingSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillingSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillingSettingMaxAggregateInputType
  }

  export type GetBillingSettingAggregateType<T extends BillingSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateBillingSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBillingSetting[P]>
      : GetScalarType<T[P], AggregateBillingSetting[P]>
  }




  export type BillingSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingSettingWhereInput
    orderBy?: BillingSettingOrderByWithAggregationInput | BillingSettingOrderByWithAggregationInput[]
    by: BillingSettingScalarFieldEnum[] | BillingSettingScalarFieldEnum
    having?: BillingSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillingSettingCountAggregateInputType | true
    _min?: BillingSettingMinAggregateInputType
    _max?: BillingSettingMaxAggregateInputType
  }

  export type BillingSettingGroupByOutputType = {
    id: string
    tenantId: string
    plan: string
    nextCharge: Date
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: BillingSettingCountAggregateOutputType | null
    _min: BillingSettingMinAggregateOutputType | null
    _max: BillingSettingMaxAggregateOutputType | null
  }

  type GetBillingSettingGroupByPayload<T extends BillingSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BillingSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BillingSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BillingSettingGroupByOutputType[P]>
            : GetScalarType<T[P], BillingSettingGroupByOutputType[P]>
        }
      >
    >


  export type BillingSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    plan?: boolean
    nextCharge?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billingSetting"]>

  export type BillingSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    plan?: boolean
    nextCharge?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billingSetting"]>

  export type BillingSettingSelectScalar = {
    id?: boolean
    tenantId?: boolean
    plan?: boolean
    nextCharge?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BillingSettingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type BillingSettingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $BillingSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BillingSetting"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      plan: string
      nextCharge: Date
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["billingSetting"]>
    composites: {}
  }

  type BillingSettingGetPayload<S extends boolean | null | undefined | BillingSettingDefaultArgs> = $Result.GetResult<Prisma.$BillingSettingPayload, S>

  type BillingSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BillingSettingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BillingSettingCountAggregateInputType | true
    }

  export interface BillingSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BillingSetting'], meta: { name: 'BillingSetting' } }
    /**
     * Find zero or one BillingSetting that matches the filter.
     * @param {BillingSettingFindUniqueArgs} args - Arguments to find a BillingSetting
     * @example
     * // Get one BillingSetting
     * const billingSetting = await prisma.billingSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BillingSettingFindUniqueArgs>(args: SelectSubset<T, BillingSettingFindUniqueArgs<ExtArgs>>): Prisma__BillingSettingClient<$Result.GetResult<Prisma.$BillingSettingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BillingSetting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BillingSettingFindUniqueOrThrowArgs} args - Arguments to find a BillingSetting
     * @example
     * // Get one BillingSetting
     * const billingSetting = await prisma.billingSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BillingSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, BillingSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BillingSettingClient<$Result.GetResult<Prisma.$BillingSettingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BillingSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingSettingFindFirstArgs} args - Arguments to find a BillingSetting
     * @example
     * // Get one BillingSetting
     * const billingSetting = await prisma.billingSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BillingSettingFindFirstArgs>(args?: SelectSubset<T, BillingSettingFindFirstArgs<ExtArgs>>): Prisma__BillingSettingClient<$Result.GetResult<Prisma.$BillingSettingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BillingSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingSettingFindFirstOrThrowArgs} args - Arguments to find a BillingSetting
     * @example
     * // Get one BillingSetting
     * const billingSetting = await prisma.billingSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BillingSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, BillingSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__BillingSettingClient<$Result.GetResult<Prisma.$BillingSettingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BillingSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BillingSettings
     * const billingSettings = await prisma.billingSetting.findMany()
     * 
     * // Get first 10 BillingSettings
     * const billingSettings = await prisma.billingSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billingSettingWithIdOnly = await prisma.billingSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BillingSettingFindManyArgs>(args?: SelectSubset<T, BillingSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingSettingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BillingSetting.
     * @param {BillingSettingCreateArgs} args - Arguments to create a BillingSetting.
     * @example
     * // Create one BillingSetting
     * const BillingSetting = await prisma.billingSetting.create({
     *   data: {
     *     // ... data to create a BillingSetting
     *   }
     * })
     * 
     */
    create<T extends BillingSettingCreateArgs>(args: SelectSubset<T, BillingSettingCreateArgs<ExtArgs>>): Prisma__BillingSettingClient<$Result.GetResult<Prisma.$BillingSettingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BillingSettings.
     * @param {BillingSettingCreateManyArgs} args - Arguments to create many BillingSettings.
     * @example
     * // Create many BillingSettings
     * const billingSetting = await prisma.billingSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BillingSettingCreateManyArgs>(args?: SelectSubset<T, BillingSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BillingSettings and returns the data saved in the database.
     * @param {BillingSettingCreateManyAndReturnArgs} args - Arguments to create many BillingSettings.
     * @example
     * // Create many BillingSettings
     * const billingSetting = await prisma.billingSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BillingSettings and only return the `id`
     * const billingSettingWithIdOnly = await prisma.billingSetting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BillingSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, BillingSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingSettingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BillingSetting.
     * @param {BillingSettingDeleteArgs} args - Arguments to delete one BillingSetting.
     * @example
     * // Delete one BillingSetting
     * const BillingSetting = await prisma.billingSetting.delete({
     *   where: {
     *     // ... filter to delete one BillingSetting
     *   }
     * })
     * 
     */
    delete<T extends BillingSettingDeleteArgs>(args: SelectSubset<T, BillingSettingDeleteArgs<ExtArgs>>): Prisma__BillingSettingClient<$Result.GetResult<Prisma.$BillingSettingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BillingSetting.
     * @param {BillingSettingUpdateArgs} args - Arguments to update one BillingSetting.
     * @example
     * // Update one BillingSetting
     * const billingSetting = await prisma.billingSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BillingSettingUpdateArgs>(args: SelectSubset<T, BillingSettingUpdateArgs<ExtArgs>>): Prisma__BillingSettingClient<$Result.GetResult<Prisma.$BillingSettingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BillingSettings.
     * @param {BillingSettingDeleteManyArgs} args - Arguments to filter BillingSettings to delete.
     * @example
     * // Delete a few BillingSettings
     * const { count } = await prisma.billingSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BillingSettingDeleteManyArgs>(args?: SelectSubset<T, BillingSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BillingSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BillingSettings
     * const billingSetting = await prisma.billingSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BillingSettingUpdateManyArgs>(args: SelectSubset<T, BillingSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BillingSetting.
     * @param {BillingSettingUpsertArgs} args - Arguments to update or create a BillingSetting.
     * @example
     * // Update or create a BillingSetting
     * const billingSetting = await prisma.billingSetting.upsert({
     *   create: {
     *     // ... data to create a BillingSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BillingSetting we want to update
     *   }
     * })
     */
    upsert<T extends BillingSettingUpsertArgs>(args: SelectSubset<T, BillingSettingUpsertArgs<ExtArgs>>): Prisma__BillingSettingClient<$Result.GetResult<Prisma.$BillingSettingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BillingSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingSettingCountArgs} args - Arguments to filter BillingSettings to count.
     * @example
     * // Count the number of BillingSettings
     * const count = await prisma.billingSetting.count({
     *   where: {
     *     // ... the filter for the BillingSettings we want to count
     *   }
     * })
    **/
    count<T extends BillingSettingCountArgs>(
      args?: Subset<T, BillingSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillingSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BillingSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillingSettingAggregateArgs>(args: Subset<T, BillingSettingAggregateArgs>): Prisma.PrismaPromise<GetBillingSettingAggregateType<T>>

    /**
     * Group by BillingSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BillingSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BillingSettingGroupByArgs['orderBy'] }
        : { orderBy?: BillingSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BillingSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillingSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BillingSetting model
   */
  readonly fields: BillingSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BillingSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BillingSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BillingSetting model
   */ 
  interface BillingSettingFieldRefs {
    readonly id: FieldRef<"BillingSetting", 'String'>
    readonly tenantId: FieldRef<"BillingSetting", 'String'>
    readonly plan: FieldRef<"BillingSetting", 'String'>
    readonly nextCharge: FieldRef<"BillingSetting", 'DateTime'>
    readonly isActive: FieldRef<"BillingSetting", 'Boolean'>
    readonly createdAt: FieldRef<"BillingSetting", 'DateTime'>
    readonly updatedAt: FieldRef<"BillingSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BillingSetting findUnique
   */
  export type BillingSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingSetting
     */
    select?: BillingSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingSettingInclude<ExtArgs> | null
    /**
     * Filter, which BillingSetting to fetch.
     */
    where: BillingSettingWhereUniqueInput
  }

  /**
   * BillingSetting findUniqueOrThrow
   */
  export type BillingSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingSetting
     */
    select?: BillingSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingSettingInclude<ExtArgs> | null
    /**
     * Filter, which BillingSetting to fetch.
     */
    where: BillingSettingWhereUniqueInput
  }

  /**
   * BillingSetting findFirst
   */
  export type BillingSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingSetting
     */
    select?: BillingSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingSettingInclude<ExtArgs> | null
    /**
     * Filter, which BillingSetting to fetch.
     */
    where?: BillingSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingSettings to fetch.
     */
    orderBy?: BillingSettingOrderByWithRelationInput | BillingSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillingSettings.
     */
    cursor?: BillingSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillingSettings.
     */
    distinct?: BillingSettingScalarFieldEnum | BillingSettingScalarFieldEnum[]
  }

  /**
   * BillingSetting findFirstOrThrow
   */
  export type BillingSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingSetting
     */
    select?: BillingSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingSettingInclude<ExtArgs> | null
    /**
     * Filter, which BillingSetting to fetch.
     */
    where?: BillingSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingSettings to fetch.
     */
    orderBy?: BillingSettingOrderByWithRelationInput | BillingSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillingSettings.
     */
    cursor?: BillingSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillingSettings.
     */
    distinct?: BillingSettingScalarFieldEnum | BillingSettingScalarFieldEnum[]
  }

  /**
   * BillingSetting findMany
   */
  export type BillingSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingSetting
     */
    select?: BillingSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingSettingInclude<ExtArgs> | null
    /**
     * Filter, which BillingSettings to fetch.
     */
    where?: BillingSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingSettings to fetch.
     */
    orderBy?: BillingSettingOrderByWithRelationInput | BillingSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BillingSettings.
     */
    cursor?: BillingSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingSettings.
     */
    skip?: number
    distinct?: BillingSettingScalarFieldEnum | BillingSettingScalarFieldEnum[]
  }

  /**
   * BillingSetting create
   */
  export type BillingSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingSetting
     */
    select?: BillingSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingSettingInclude<ExtArgs> | null
    /**
     * The data needed to create a BillingSetting.
     */
    data: XOR<BillingSettingCreateInput, BillingSettingUncheckedCreateInput>
  }

  /**
   * BillingSetting createMany
   */
  export type BillingSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BillingSettings.
     */
    data: BillingSettingCreateManyInput | BillingSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BillingSetting createManyAndReturn
   */
  export type BillingSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingSetting
     */
    select?: BillingSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BillingSettings.
     */
    data: BillingSettingCreateManyInput | BillingSettingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingSettingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BillingSetting update
   */
  export type BillingSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingSetting
     */
    select?: BillingSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingSettingInclude<ExtArgs> | null
    /**
     * The data needed to update a BillingSetting.
     */
    data: XOR<BillingSettingUpdateInput, BillingSettingUncheckedUpdateInput>
    /**
     * Choose, which BillingSetting to update.
     */
    where: BillingSettingWhereUniqueInput
  }

  /**
   * BillingSetting updateMany
   */
  export type BillingSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BillingSettings.
     */
    data: XOR<BillingSettingUpdateManyMutationInput, BillingSettingUncheckedUpdateManyInput>
    /**
     * Filter which BillingSettings to update
     */
    where?: BillingSettingWhereInput
  }

  /**
   * BillingSetting upsert
   */
  export type BillingSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingSetting
     */
    select?: BillingSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingSettingInclude<ExtArgs> | null
    /**
     * The filter to search for the BillingSetting to update in case it exists.
     */
    where: BillingSettingWhereUniqueInput
    /**
     * In case the BillingSetting found by the `where` argument doesn't exist, create a new BillingSetting with this data.
     */
    create: XOR<BillingSettingCreateInput, BillingSettingUncheckedCreateInput>
    /**
     * In case the BillingSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BillingSettingUpdateInput, BillingSettingUncheckedUpdateInput>
  }

  /**
   * BillingSetting delete
   */
  export type BillingSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingSetting
     */
    select?: BillingSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingSettingInclude<ExtArgs> | null
    /**
     * Filter which BillingSetting to delete.
     */
    where: BillingSettingWhereUniqueInput
  }

  /**
   * BillingSetting deleteMany
   */
  export type BillingSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillingSettings to delete
     */
    where?: BillingSettingWhereInput
  }

  /**
   * BillingSetting without action
   */
  export type BillingSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingSetting
     */
    select?: BillingSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingSettingInclude<ExtArgs> | null
  }


  /**
   * Model IntegrationSetting
   */

  export type AggregateIntegrationSetting = {
    _count: IntegrationSettingCountAggregateOutputType | null
    _min: IntegrationSettingMinAggregateOutputType | null
    _max: IntegrationSettingMaxAggregateOutputType | null
  }

  export type IntegrationSettingMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    d4signConnected: boolean | null
    smtpConfigured: boolean | null
    googleCalendarLinked: boolean | null
    webhookUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IntegrationSettingMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    d4signConnected: boolean | null
    smtpConfigured: boolean | null
    googleCalendarLinked: boolean | null
    webhookUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IntegrationSettingCountAggregateOutputType = {
    id: number
    tenantId: number
    d4signConnected: number
    smtpConfigured: number
    googleCalendarLinked: number
    webhookUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type IntegrationSettingMinAggregateInputType = {
    id?: true
    tenantId?: true
    d4signConnected?: true
    smtpConfigured?: true
    googleCalendarLinked?: true
    webhookUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IntegrationSettingMaxAggregateInputType = {
    id?: true
    tenantId?: true
    d4signConnected?: true
    smtpConfigured?: true
    googleCalendarLinked?: true
    webhookUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IntegrationSettingCountAggregateInputType = {
    id?: true
    tenantId?: true
    d4signConnected?: true
    smtpConfigured?: true
    googleCalendarLinked?: true
    webhookUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type IntegrationSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IntegrationSetting to aggregate.
     */
    where?: IntegrationSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationSettings to fetch.
     */
    orderBy?: IntegrationSettingOrderByWithRelationInput | IntegrationSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IntegrationSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IntegrationSettings
    **/
    _count?: true | IntegrationSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IntegrationSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IntegrationSettingMaxAggregateInputType
  }

  export type GetIntegrationSettingAggregateType<T extends IntegrationSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateIntegrationSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntegrationSetting[P]>
      : GetScalarType<T[P], AggregateIntegrationSetting[P]>
  }




  export type IntegrationSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationSettingWhereInput
    orderBy?: IntegrationSettingOrderByWithAggregationInput | IntegrationSettingOrderByWithAggregationInput[]
    by: IntegrationSettingScalarFieldEnum[] | IntegrationSettingScalarFieldEnum
    having?: IntegrationSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IntegrationSettingCountAggregateInputType | true
    _min?: IntegrationSettingMinAggregateInputType
    _max?: IntegrationSettingMaxAggregateInputType
  }

  export type IntegrationSettingGroupByOutputType = {
    id: string
    tenantId: string
    d4signConnected: boolean
    smtpConfigured: boolean
    googleCalendarLinked: boolean
    webhookUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: IntegrationSettingCountAggregateOutputType | null
    _min: IntegrationSettingMinAggregateOutputType | null
    _max: IntegrationSettingMaxAggregateOutputType | null
  }

  type GetIntegrationSettingGroupByPayload<T extends IntegrationSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IntegrationSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IntegrationSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IntegrationSettingGroupByOutputType[P]>
            : GetScalarType<T[P], IntegrationSettingGroupByOutputType[P]>
        }
      >
    >


  export type IntegrationSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    d4signConnected?: boolean
    smtpConfigured?: boolean
    googleCalendarLinked?: boolean
    webhookUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integrationSetting"]>

  export type IntegrationSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    d4signConnected?: boolean
    smtpConfigured?: boolean
    googleCalendarLinked?: boolean
    webhookUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integrationSetting"]>

  export type IntegrationSettingSelectScalar = {
    id?: boolean
    tenantId?: boolean
    d4signConnected?: boolean
    smtpConfigured?: boolean
    googleCalendarLinked?: boolean
    webhookUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type IntegrationSettingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type IntegrationSettingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $IntegrationSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IntegrationSetting"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      d4signConnected: boolean
      smtpConfigured: boolean
      googleCalendarLinked: boolean
      webhookUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["integrationSetting"]>
    composites: {}
  }

  type IntegrationSettingGetPayload<S extends boolean | null | undefined | IntegrationSettingDefaultArgs> = $Result.GetResult<Prisma.$IntegrationSettingPayload, S>

  type IntegrationSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IntegrationSettingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IntegrationSettingCountAggregateInputType | true
    }

  export interface IntegrationSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IntegrationSetting'], meta: { name: 'IntegrationSetting' } }
    /**
     * Find zero or one IntegrationSetting that matches the filter.
     * @param {IntegrationSettingFindUniqueArgs} args - Arguments to find a IntegrationSetting
     * @example
     * // Get one IntegrationSetting
     * const integrationSetting = await prisma.integrationSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IntegrationSettingFindUniqueArgs>(args: SelectSubset<T, IntegrationSettingFindUniqueArgs<ExtArgs>>): Prisma__IntegrationSettingClient<$Result.GetResult<Prisma.$IntegrationSettingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one IntegrationSetting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IntegrationSettingFindUniqueOrThrowArgs} args - Arguments to find a IntegrationSetting
     * @example
     * // Get one IntegrationSetting
     * const integrationSetting = await prisma.integrationSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IntegrationSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, IntegrationSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IntegrationSettingClient<$Result.GetResult<Prisma.$IntegrationSettingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first IntegrationSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSettingFindFirstArgs} args - Arguments to find a IntegrationSetting
     * @example
     * // Get one IntegrationSetting
     * const integrationSetting = await prisma.integrationSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IntegrationSettingFindFirstArgs>(args?: SelectSubset<T, IntegrationSettingFindFirstArgs<ExtArgs>>): Prisma__IntegrationSettingClient<$Result.GetResult<Prisma.$IntegrationSettingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first IntegrationSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSettingFindFirstOrThrowArgs} args - Arguments to find a IntegrationSetting
     * @example
     * // Get one IntegrationSetting
     * const integrationSetting = await prisma.integrationSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IntegrationSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, IntegrationSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__IntegrationSettingClient<$Result.GetResult<Prisma.$IntegrationSettingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more IntegrationSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IntegrationSettings
     * const integrationSettings = await prisma.integrationSetting.findMany()
     * 
     * // Get first 10 IntegrationSettings
     * const integrationSettings = await prisma.integrationSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const integrationSettingWithIdOnly = await prisma.integrationSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IntegrationSettingFindManyArgs>(args?: SelectSubset<T, IntegrationSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationSettingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a IntegrationSetting.
     * @param {IntegrationSettingCreateArgs} args - Arguments to create a IntegrationSetting.
     * @example
     * // Create one IntegrationSetting
     * const IntegrationSetting = await prisma.integrationSetting.create({
     *   data: {
     *     // ... data to create a IntegrationSetting
     *   }
     * })
     * 
     */
    create<T extends IntegrationSettingCreateArgs>(args: SelectSubset<T, IntegrationSettingCreateArgs<ExtArgs>>): Prisma__IntegrationSettingClient<$Result.GetResult<Prisma.$IntegrationSettingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many IntegrationSettings.
     * @param {IntegrationSettingCreateManyArgs} args - Arguments to create many IntegrationSettings.
     * @example
     * // Create many IntegrationSettings
     * const integrationSetting = await prisma.integrationSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IntegrationSettingCreateManyArgs>(args?: SelectSubset<T, IntegrationSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IntegrationSettings and returns the data saved in the database.
     * @param {IntegrationSettingCreateManyAndReturnArgs} args - Arguments to create many IntegrationSettings.
     * @example
     * // Create many IntegrationSettings
     * const integrationSetting = await prisma.integrationSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IntegrationSettings and only return the `id`
     * const integrationSettingWithIdOnly = await prisma.integrationSetting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IntegrationSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, IntegrationSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationSettingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a IntegrationSetting.
     * @param {IntegrationSettingDeleteArgs} args - Arguments to delete one IntegrationSetting.
     * @example
     * // Delete one IntegrationSetting
     * const IntegrationSetting = await prisma.integrationSetting.delete({
     *   where: {
     *     // ... filter to delete one IntegrationSetting
     *   }
     * })
     * 
     */
    delete<T extends IntegrationSettingDeleteArgs>(args: SelectSubset<T, IntegrationSettingDeleteArgs<ExtArgs>>): Prisma__IntegrationSettingClient<$Result.GetResult<Prisma.$IntegrationSettingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one IntegrationSetting.
     * @param {IntegrationSettingUpdateArgs} args - Arguments to update one IntegrationSetting.
     * @example
     * // Update one IntegrationSetting
     * const integrationSetting = await prisma.integrationSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IntegrationSettingUpdateArgs>(args: SelectSubset<T, IntegrationSettingUpdateArgs<ExtArgs>>): Prisma__IntegrationSettingClient<$Result.GetResult<Prisma.$IntegrationSettingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more IntegrationSettings.
     * @param {IntegrationSettingDeleteManyArgs} args - Arguments to filter IntegrationSettings to delete.
     * @example
     * // Delete a few IntegrationSettings
     * const { count } = await prisma.integrationSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IntegrationSettingDeleteManyArgs>(args?: SelectSubset<T, IntegrationSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IntegrationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IntegrationSettings
     * const integrationSetting = await prisma.integrationSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IntegrationSettingUpdateManyArgs>(args: SelectSubset<T, IntegrationSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IntegrationSetting.
     * @param {IntegrationSettingUpsertArgs} args - Arguments to update or create a IntegrationSetting.
     * @example
     * // Update or create a IntegrationSetting
     * const integrationSetting = await prisma.integrationSetting.upsert({
     *   create: {
     *     // ... data to create a IntegrationSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IntegrationSetting we want to update
     *   }
     * })
     */
    upsert<T extends IntegrationSettingUpsertArgs>(args: SelectSubset<T, IntegrationSettingUpsertArgs<ExtArgs>>): Prisma__IntegrationSettingClient<$Result.GetResult<Prisma.$IntegrationSettingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of IntegrationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSettingCountArgs} args - Arguments to filter IntegrationSettings to count.
     * @example
     * // Count the number of IntegrationSettings
     * const count = await prisma.integrationSetting.count({
     *   where: {
     *     // ... the filter for the IntegrationSettings we want to count
     *   }
     * })
    **/
    count<T extends IntegrationSettingCountArgs>(
      args?: Subset<T, IntegrationSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IntegrationSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IntegrationSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IntegrationSettingAggregateArgs>(args: Subset<T, IntegrationSettingAggregateArgs>): Prisma.PrismaPromise<GetIntegrationSettingAggregateType<T>>

    /**
     * Group by IntegrationSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IntegrationSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IntegrationSettingGroupByArgs['orderBy'] }
        : { orderBy?: IntegrationSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IntegrationSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntegrationSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IntegrationSetting model
   */
  readonly fields: IntegrationSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IntegrationSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IntegrationSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IntegrationSetting model
   */ 
  interface IntegrationSettingFieldRefs {
    readonly id: FieldRef<"IntegrationSetting", 'String'>
    readonly tenantId: FieldRef<"IntegrationSetting", 'String'>
    readonly d4signConnected: FieldRef<"IntegrationSetting", 'Boolean'>
    readonly smtpConfigured: FieldRef<"IntegrationSetting", 'Boolean'>
    readonly googleCalendarLinked: FieldRef<"IntegrationSetting", 'Boolean'>
    readonly webhookUrl: FieldRef<"IntegrationSetting", 'String'>
    readonly createdAt: FieldRef<"IntegrationSetting", 'DateTime'>
    readonly updatedAt: FieldRef<"IntegrationSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * IntegrationSetting findUnique
   */
  export type IntegrationSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSetting
     */
    select?: IntegrationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSettingInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationSetting to fetch.
     */
    where: IntegrationSettingWhereUniqueInput
  }

  /**
   * IntegrationSetting findUniqueOrThrow
   */
  export type IntegrationSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSetting
     */
    select?: IntegrationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSettingInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationSetting to fetch.
     */
    where: IntegrationSettingWhereUniqueInput
  }

  /**
   * IntegrationSetting findFirst
   */
  export type IntegrationSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSetting
     */
    select?: IntegrationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSettingInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationSetting to fetch.
     */
    where?: IntegrationSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationSettings to fetch.
     */
    orderBy?: IntegrationSettingOrderByWithRelationInput | IntegrationSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IntegrationSettings.
     */
    cursor?: IntegrationSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IntegrationSettings.
     */
    distinct?: IntegrationSettingScalarFieldEnum | IntegrationSettingScalarFieldEnum[]
  }

  /**
   * IntegrationSetting findFirstOrThrow
   */
  export type IntegrationSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSetting
     */
    select?: IntegrationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSettingInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationSetting to fetch.
     */
    where?: IntegrationSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationSettings to fetch.
     */
    orderBy?: IntegrationSettingOrderByWithRelationInput | IntegrationSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IntegrationSettings.
     */
    cursor?: IntegrationSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IntegrationSettings.
     */
    distinct?: IntegrationSettingScalarFieldEnum | IntegrationSettingScalarFieldEnum[]
  }

  /**
   * IntegrationSetting findMany
   */
  export type IntegrationSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSetting
     */
    select?: IntegrationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSettingInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationSettings to fetch.
     */
    where?: IntegrationSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationSettings to fetch.
     */
    orderBy?: IntegrationSettingOrderByWithRelationInput | IntegrationSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IntegrationSettings.
     */
    cursor?: IntegrationSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationSettings.
     */
    skip?: number
    distinct?: IntegrationSettingScalarFieldEnum | IntegrationSettingScalarFieldEnum[]
  }

  /**
   * IntegrationSetting create
   */
  export type IntegrationSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSetting
     */
    select?: IntegrationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSettingInclude<ExtArgs> | null
    /**
     * The data needed to create a IntegrationSetting.
     */
    data: XOR<IntegrationSettingCreateInput, IntegrationSettingUncheckedCreateInput>
  }

  /**
   * IntegrationSetting createMany
   */
  export type IntegrationSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IntegrationSettings.
     */
    data: IntegrationSettingCreateManyInput | IntegrationSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IntegrationSetting createManyAndReturn
   */
  export type IntegrationSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSetting
     */
    select?: IntegrationSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many IntegrationSettings.
     */
    data: IntegrationSettingCreateManyInput | IntegrationSettingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSettingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * IntegrationSetting update
   */
  export type IntegrationSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSetting
     */
    select?: IntegrationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSettingInclude<ExtArgs> | null
    /**
     * The data needed to update a IntegrationSetting.
     */
    data: XOR<IntegrationSettingUpdateInput, IntegrationSettingUncheckedUpdateInput>
    /**
     * Choose, which IntegrationSetting to update.
     */
    where: IntegrationSettingWhereUniqueInput
  }

  /**
   * IntegrationSetting updateMany
   */
  export type IntegrationSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IntegrationSettings.
     */
    data: XOR<IntegrationSettingUpdateManyMutationInput, IntegrationSettingUncheckedUpdateManyInput>
    /**
     * Filter which IntegrationSettings to update
     */
    where?: IntegrationSettingWhereInput
  }

  /**
   * IntegrationSetting upsert
   */
  export type IntegrationSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSetting
     */
    select?: IntegrationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSettingInclude<ExtArgs> | null
    /**
     * The filter to search for the IntegrationSetting to update in case it exists.
     */
    where: IntegrationSettingWhereUniqueInput
    /**
     * In case the IntegrationSetting found by the `where` argument doesn't exist, create a new IntegrationSetting with this data.
     */
    create: XOR<IntegrationSettingCreateInput, IntegrationSettingUncheckedCreateInput>
    /**
     * In case the IntegrationSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IntegrationSettingUpdateInput, IntegrationSettingUncheckedUpdateInput>
  }

  /**
   * IntegrationSetting delete
   */
  export type IntegrationSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSetting
     */
    select?: IntegrationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSettingInclude<ExtArgs> | null
    /**
     * Filter which IntegrationSetting to delete.
     */
    where: IntegrationSettingWhereUniqueInput
  }

  /**
   * IntegrationSetting deleteMany
   */
  export type IntegrationSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IntegrationSettings to delete
     */
    where?: IntegrationSettingWhereInput
  }

  /**
   * IntegrationSetting without action
   */
  export type IntegrationSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSetting
     */
    select?: IntegrationSettingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSettingInclude<ExtArgs> | null
  }


  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    email: string | null
    name: string | null
    role: $Enums.UserRole | null
    status: $Enums.EmployeeStatus | null
    invitedAt: Date | null
    acceptedAt: Date | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    email: string | null
    name: string | null
    role: $Enums.UserRole | null
    status: $Enums.EmployeeStatus | null
    invitedAt: Date | null
    acceptedAt: Date | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    tenantId: number
    email: number
    name: number
    role: number
    status: number
    invitedAt: number
    acceptedAt: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmployeeMinAggregateInputType = {
    id?: true
    tenantId?: true
    email?: true
    name?: true
    role?: true
    status?: true
    invitedAt?: true
    acceptedAt?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    tenantId?: true
    email?: true
    name?: true
    role?: true
    status?: true
    invitedAt?: true
    acceptedAt?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    tenantId?: true
    email?: true
    name?: true
    role?: true
    status?: true
    invitedAt?: true
    acceptedAt?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: string
    tenantId: string
    email: string
    name: string | null
    role: $Enums.UserRole
    status: $Enums.EmployeeStatus
    invitedAt: Date
    acceptedAt: Date | null
    userId: string | null
    createdAt: Date
    updatedAt: Date
    _count: EmployeeCountAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    status?: boolean
    invitedAt?: boolean
    acceptedAt?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    user?: boolean | Employee$userArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    status?: boolean
    invitedAt?: boolean
    acceptedAt?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    user?: boolean | Employee$userArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    id?: boolean
    tenantId?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    status?: boolean
    invitedAt?: boolean
    acceptedAt?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    user?: boolean | Employee$userArgs<ExtArgs>
  }
  export type EmployeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    user?: boolean | Employee$userArgs<ExtArgs>
  }

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      email: string
      name: string | null
      role: $Enums.UserRole
      status: $Enums.EmployeeStatus
      invitedAt: Date
      acceptedAt: Date | null
      userId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employees and returns the data saved in the database.
     * @param {EmployeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends Employee$userArgs<ExtArgs> = {}>(args?: Subset<T, Employee$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */ 
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'String'>
    readonly tenantId: FieldRef<"Employee", 'String'>
    readonly email: FieldRef<"Employee", 'String'>
    readonly name: FieldRef<"Employee", 'String'>
    readonly role: FieldRef<"Employee", 'UserRole'>
    readonly status: FieldRef<"Employee", 'EmployeeStatus'>
    readonly invitedAt: FieldRef<"Employee", 'DateTime'>
    readonly acceptedAt: FieldRef<"Employee", 'DateTime'>
    readonly userId: FieldRef<"Employee", 'String'>
    readonly createdAt: FieldRef<"Employee", 'DateTime'>
    readonly updatedAt: FieldRef<"Employee", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee createManyAndReturn
   */
  export type EmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
  }

  /**
   * Employee.user
   */
  export type Employee$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const UserPermissionScalarFieldEnum: {
    userId: 'userId',
    permissionId: 'permissionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserPermissionScalarFieldEnum = (typeof UserPermissionScalarFieldEnum)[keyof typeof UserPermissionScalarFieldEnum]


  export const TenantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TenantScalarFieldEnum = (typeof TenantScalarFieldEnum)[keyof typeof TenantScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isActive: 'isActive',
    tenantId: 'tenantId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phoneNumber: 'phoneNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId',
    userId: 'userId'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const CaseScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId',
    lawyerPrimaryId: 'lawyerPrimaryId',
    clientPrimaryId: 'clientPrimaryId'
  };

  export type CaseScalarFieldEnum = (typeof CaseScalarFieldEnum)[keyof typeof CaseScalarFieldEnum]


  export const CaseParticipantUserScalarFieldEnum: {
    caseId: 'caseId',
    userId: 'userId',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CaseParticipantUserScalarFieldEnum = (typeof CaseParticipantUserScalarFieldEnum)[keyof typeof CaseParticipantUserScalarFieldEnum]


  export const CaseParticipantClientScalarFieldEnum: {
    caseId: 'caseId',
    clientId: 'clientId',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CaseParticipantClientScalarFieldEnum = (typeof CaseParticipantClientScalarFieldEnum)[keyof typeof CaseParticipantClientScalarFieldEnum]


  export const CaseEventScalarFieldEnum: {
    id: 'id',
    type: 'type',
    description: 'description',
    timestamp: 'timestamp',
    caseId: 'caseId',
    userId: 'userId',
    tenantId: 'tenantId'
  };

  export type CaseEventScalarFieldEnum = (typeof CaseEventScalarFieldEnum)[keyof typeof CaseEventScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    content: 'content',
    viewed: 'viewed',
    viewedAt: 'viewedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    caseId: 'caseId',
    tenantId: 'tenantId',
    senderId: 'senderId',
    senderClientId: 'senderClientId',
    receiverClientId: 'receiverClientId'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    url: 'url',
    uploadedAt: 'uploadedAt',
    tenantId: 'tenantId',
    caseId: 'caseId'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const InviteScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    expiresAt: 'expiresAt',
    isUsed: 'isUsed',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    caseId: 'caseId',
    tenantId: 'tenantId'
  };

  export type InviteScalarFieldEnum = (typeof InviteScalarFieldEnum)[keyof typeof InviteScalarFieldEnum]


  export const GeneralSettingScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    theme: 'theme',
    businessName: 'businessName',
    workingDays: 'workingDays',
    workingHours: 'workingHours',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GeneralSettingScalarFieldEnum = (typeof GeneralSettingScalarFieldEnum)[keyof typeof GeneralSettingScalarFieldEnum]


  export const NotificationSettingScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    email: 'email',
    whatsapp: 'whatsapp',
    app: 'app',
    newMessage: 'newMessage',
    caseUpdate: 'caseUpdate',
    newDocument: 'newDocument',
    signatureRequest: 'signatureRequest',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationSettingScalarFieldEnum = (typeof NotificationSettingScalarFieldEnum)[keyof typeof NotificationSettingScalarFieldEnum]


  export const SecuritySettingScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    twoFAEnabled: 'twoFAEnabled',
    autoLogoutMinutes: 'autoLogoutMinutes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SecuritySettingScalarFieldEnum = (typeof SecuritySettingScalarFieldEnum)[keyof typeof SecuritySettingScalarFieldEnum]


  export const BillingSettingScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    plan: 'plan',
    nextCharge: 'nextCharge',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BillingSettingScalarFieldEnum = (typeof BillingSettingScalarFieldEnum)[keyof typeof BillingSettingScalarFieldEnum]


  export const IntegrationSettingScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    d4signConnected: 'd4signConnected',
    smtpConfigured: 'smtpConfigured',
    googleCalendarLinked: 'googleCalendarLinked',
    webhookUrl: 'webhookUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type IntegrationSettingScalarFieldEnum = (typeof IntegrationSettingScalarFieldEnum)[keyof typeof IntegrationSettingScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    email: 'email',
    name: 'name',
    role: 'role',
    status: 'status',
    invitedAt: 'invitedAt',
    acceptedAt: 'acceptedAt',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'CaseStatus'
   */
  export type EnumCaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseStatus'>
    


  /**
   * Reference to a field of type 'CaseStatus[]'
   */
  export type ListEnumCaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseStatus[]'>
    


  /**
   * Reference to a field of type 'CaseParticipantUserRole'
   */
  export type EnumCaseParticipantUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseParticipantUserRole'>
    


  /**
   * Reference to a field of type 'CaseParticipantUserRole[]'
   */
  export type ListEnumCaseParticipantUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseParticipantUserRole[]'>
    


  /**
   * Reference to a field of type 'CaseParticipantClientType'
   */
  export type EnumCaseParticipantClientTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseParticipantClientType'>
    


  /**
   * Reference to a field of type 'CaseParticipantClientType[]'
   */
  export type ListEnumCaseParticipantClientTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseParticipantClientType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'EmployeeStatus'
   */
  export type EnumEmployeeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmployeeStatus'>
    


  /**
   * Reference to a field of type 'EmployeeStatus[]'
   */
  export type ListEnumEmployeeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmployeeStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: StringFilter<"Permission"> | string
    name?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    userPermissions?: UserPermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userPermissions?: UserPermissionOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    description?: StringNullableFilter<"Permission"> | string | null
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    userPermissions?: UserPermissionListRelationFilter
  }, "id" | "name">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Permission"> | string
    name?: StringWithAggregatesFilter<"Permission"> | string
    description?: StringNullableWithAggregatesFilter<"Permission"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
  }

  export type UserPermissionWhereInput = {
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: StringFilter<"UserPermission"> | string
    createdAt?: DateTimeFilter<"UserPermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserPermission"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }

  export type UserPermissionOrderByWithRelationInput = {
    userId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
  }

  export type UserPermissionWhereUniqueInput = Prisma.AtLeast<{
    userId_permissionId?: UserPermissionUserIdPermissionIdCompoundUniqueInput
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: StringFilter<"UserPermission"> | string
    createdAt?: DateTimeFilter<"UserPermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserPermission"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }, "userId_permissionId">

  export type UserPermissionOrderByWithAggregationInput = {
    userId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserPermissionCountOrderByAggregateInput
    _max?: UserPermissionMaxOrderByAggregateInput
    _min?: UserPermissionMinOrderByAggregateInput
  }

  export type UserPermissionScalarWhereWithAggregatesInput = {
    AND?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    OR?: UserPermissionScalarWhereWithAggregatesInput[]
    NOT?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserPermission"> | string
    permissionId?: StringWithAggregatesFilter<"UserPermission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserPermission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserPermission"> | Date | string
  }

  export type TenantWhereInput = {
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    id?: StringFilter<"Tenant"> | string
    name?: StringFilter<"Tenant"> | string
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    users?: UserListRelationFilter
    clients?: ClientListRelationFilter
    cases?: CaseListRelationFilter
    messages?: MessageListRelationFilter
    files?: FileListRelationFilter
    invites?: InviteListRelationFilter
    caseEvents?: CaseEventListRelationFilter
    generalSetting?: XOR<GeneralSettingNullableRelationFilter, GeneralSettingWhereInput> | null
    notificationSetting?: XOR<NotificationSettingNullableRelationFilter, NotificationSettingWhereInput> | null
    securitySetting?: XOR<SecuritySettingNullableRelationFilter, SecuritySettingWhereInput> | null
    billingSetting?: XOR<BillingSettingNullableRelationFilter, BillingSettingWhereInput> | null
    integrationSetting?: XOR<IntegrationSettingNullableRelationFilter, IntegrationSettingWhereInput> | null
    employees?: EmployeeListRelationFilter
  }

  export type TenantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    clients?: ClientOrderByRelationAggregateInput
    cases?: CaseOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
    invites?: InviteOrderByRelationAggregateInput
    caseEvents?: CaseEventOrderByRelationAggregateInput
    generalSetting?: GeneralSettingOrderByWithRelationInput
    notificationSetting?: NotificationSettingOrderByWithRelationInput
    securitySetting?: SecuritySettingOrderByWithRelationInput
    billingSetting?: BillingSettingOrderByWithRelationInput
    integrationSetting?: IntegrationSettingOrderByWithRelationInput
    employees?: EmployeeOrderByRelationAggregateInput
  }

  export type TenantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    users?: UserListRelationFilter
    clients?: ClientListRelationFilter
    cases?: CaseListRelationFilter
    messages?: MessageListRelationFilter
    files?: FileListRelationFilter
    invites?: InviteListRelationFilter
    caseEvents?: CaseEventListRelationFilter
    generalSetting?: XOR<GeneralSettingNullableRelationFilter, GeneralSettingWhereInput> | null
    notificationSetting?: XOR<NotificationSettingNullableRelationFilter, NotificationSettingWhereInput> | null
    securitySetting?: XOR<SecuritySettingNullableRelationFilter, SecuritySettingWhereInput> | null
    billingSetting?: XOR<BillingSettingNullableRelationFilter, BillingSettingWhereInput> | null
    integrationSetting?: XOR<IntegrationSettingNullableRelationFilter, IntegrationSettingWhereInput> | null
    employees?: EmployeeListRelationFilter
  }, "id" | "name">

  export type TenantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TenantCountOrderByAggregateInput
    _max?: TenantMaxOrderByAggregateInput
    _min?: TenantMinOrderByAggregateInput
  }

  export type TenantScalarWhereWithAggregatesInput = {
    AND?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    OR?: TenantScalarWhereWithAggregatesInput[]
    NOT?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tenant"> | string
    name?: StringWithAggregatesFilter<"Tenant"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isActive?: BoolFilter<"User"> | boolean
    tenantId?: StringFilter<"User"> | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    primaryCases?: CaseListRelationFilter
    sentMessages?: MessageListRelationFilter
    participatingCases?: CaseParticipantUserListRelationFilter
    caseEvents?: CaseEventListRelationFilter
    userPermissions?: UserPermissionListRelationFilter
    employee?: XOR<EmployeeNullableRelationFilter, EmployeeWhereInput> | null
    Client?: XOR<ClientNullableRelationFilter, ClientWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    tenantId?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    primaryCases?: CaseOrderByRelationAggregateInput
    sentMessages?: MessageOrderByRelationAggregateInput
    participatingCases?: CaseParticipantUserOrderByRelationAggregateInput
    caseEvents?: CaseEventOrderByRelationAggregateInput
    userPermissions?: UserPermissionOrderByRelationAggregateInput
    employee?: EmployeeOrderByWithRelationInput
    Client?: ClientOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isActive?: BoolFilter<"User"> | boolean
    tenantId?: StringFilter<"User"> | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    primaryCases?: CaseListRelationFilter
    sentMessages?: MessageListRelationFilter
    participatingCases?: CaseParticipantUserListRelationFilter
    caseEvents?: CaseEventListRelationFilter
    userPermissions?: UserPermissionListRelationFilter
    employee?: XOR<EmployeeNullableRelationFilter, EmployeeWhereInput> | null
    Client?: XOR<ClientNullableRelationFilter, ClientWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    tenantId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    tenantId?: StringWithAggregatesFilter<"User"> | string
  }

  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    id?: StringFilter<"Client"> | string
    firstName?: StringFilter<"Client"> | string
    lastName?: StringFilter<"Client"> | string
    email?: StringFilter<"Client"> | string
    phoneNumber?: StringNullableFilter<"Client"> | string | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    tenantId?: StringFilter<"Client"> | string
    userId?: StringNullableFilter<"Client"> | string | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    primaryCases?: CaseListRelationFilter
    receivedMessages?: MessageListRelationFilter
    sentMessages?: MessageListRelationFilter
    participatingCases?: CaseParticipantClientListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    userId?: SortOrderInput | SortOrder
    tenant?: TenantOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    primaryCases?: CaseOrderByRelationAggregateInput
    receivedMessages?: MessageOrderByRelationAggregateInput
    sentMessages?: MessageOrderByRelationAggregateInput
    participatingCases?: CaseParticipantClientOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    userId?: string
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    firstName?: StringFilter<"Client"> | string
    lastName?: StringFilter<"Client"> | string
    phoneNumber?: StringNullableFilter<"Client"> | string | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    tenantId?: StringFilter<"Client"> | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    primaryCases?: CaseListRelationFilter
    receivedMessages?: MessageListRelationFilter
    sentMessages?: MessageListRelationFilter
    participatingCases?: CaseParticipantClientListRelationFilter
  }, "id" | "email" | "userId">

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: ClientCountOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Client"> | string
    firstName?: StringWithAggregatesFilter<"Client"> | string
    lastName?: StringWithAggregatesFilter<"Client"> | string
    email?: StringWithAggregatesFilter<"Client"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"Client"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
    tenantId?: StringWithAggregatesFilter<"Client"> | string
    userId?: StringNullableWithAggregatesFilter<"Client"> | string | null
  }

  export type CaseWhereInput = {
    AND?: CaseWhereInput | CaseWhereInput[]
    OR?: CaseWhereInput[]
    NOT?: CaseWhereInput | CaseWhereInput[]
    id?: StringFilter<"Case"> | string
    title?: StringFilter<"Case"> | string
    description?: StringNullableFilter<"Case"> | string | null
    status?: EnumCaseStatusFilter<"Case"> | $Enums.CaseStatus
    createdAt?: DateTimeFilter<"Case"> | Date | string
    updatedAt?: DateTimeFilter<"Case"> | Date | string
    tenantId?: StringFilter<"Case"> | string
    lawyerPrimaryId?: StringNullableFilter<"Case"> | string | null
    clientPrimaryId?: StringNullableFilter<"Case"> | string | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    lawyerPrimary?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    clientPrimary?: XOR<ClientNullableRelationFilter, ClientWhereInput> | null
    messages?: MessageListRelationFilter
    files?: FileListRelationFilter
    invites?: InviteListRelationFilter
    caseEvents?: CaseEventListRelationFilter
    participantsUsers?: CaseParticipantUserListRelationFilter
    participantsClients?: CaseParticipantClientListRelationFilter
  }

  export type CaseOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    lawyerPrimaryId?: SortOrderInput | SortOrder
    clientPrimaryId?: SortOrderInput | SortOrder
    tenant?: TenantOrderByWithRelationInput
    lawyerPrimary?: UserOrderByWithRelationInput
    clientPrimary?: ClientOrderByWithRelationInput
    messages?: MessageOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
    invites?: InviteOrderByRelationAggregateInput
    caseEvents?: CaseEventOrderByRelationAggregateInput
    participantsUsers?: CaseParticipantUserOrderByRelationAggregateInput
    participantsClients?: CaseParticipantClientOrderByRelationAggregateInput
  }

  export type CaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CaseWhereInput | CaseWhereInput[]
    OR?: CaseWhereInput[]
    NOT?: CaseWhereInput | CaseWhereInput[]
    title?: StringFilter<"Case"> | string
    description?: StringNullableFilter<"Case"> | string | null
    status?: EnumCaseStatusFilter<"Case"> | $Enums.CaseStatus
    createdAt?: DateTimeFilter<"Case"> | Date | string
    updatedAt?: DateTimeFilter<"Case"> | Date | string
    tenantId?: StringFilter<"Case"> | string
    lawyerPrimaryId?: StringNullableFilter<"Case"> | string | null
    clientPrimaryId?: StringNullableFilter<"Case"> | string | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    lawyerPrimary?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    clientPrimary?: XOR<ClientNullableRelationFilter, ClientWhereInput> | null
    messages?: MessageListRelationFilter
    files?: FileListRelationFilter
    invites?: InviteListRelationFilter
    caseEvents?: CaseEventListRelationFilter
    participantsUsers?: CaseParticipantUserListRelationFilter
    participantsClients?: CaseParticipantClientListRelationFilter
  }, "id">

  export type CaseOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    lawyerPrimaryId?: SortOrderInput | SortOrder
    clientPrimaryId?: SortOrderInput | SortOrder
    _count?: CaseCountOrderByAggregateInput
    _max?: CaseMaxOrderByAggregateInput
    _min?: CaseMinOrderByAggregateInput
  }

  export type CaseScalarWhereWithAggregatesInput = {
    AND?: CaseScalarWhereWithAggregatesInput | CaseScalarWhereWithAggregatesInput[]
    OR?: CaseScalarWhereWithAggregatesInput[]
    NOT?: CaseScalarWhereWithAggregatesInput | CaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Case"> | string
    title?: StringWithAggregatesFilter<"Case"> | string
    description?: StringNullableWithAggregatesFilter<"Case"> | string | null
    status?: EnumCaseStatusWithAggregatesFilter<"Case"> | $Enums.CaseStatus
    createdAt?: DateTimeWithAggregatesFilter<"Case"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Case"> | Date | string
    tenantId?: StringWithAggregatesFilter<"Case"> | string
    lawyerPrimaryId?: StringNullableWithAggregatesFilter<"Case"> | string | null
    clientPrimaryId?: StringNullableWithAggregatesFilter<"Case"> | string | null
  }

  export type CaseParticipantUserWhereInput = {
    AND?: CaseParticipantUserWhereInput | CaseParticipantUserWhereInput[]
    OR?: CaseParticipantUserWhereInput[]
    NOT?: CaseParticipantUserWhereInput | CaseParticipantUserWhereInput[]
    caseId?: StringFilter<"CaseParticipantUser"> | string
    userId?: StringFilter<"CaseParticipantUser"> | string
    role?: EnumCaseParticipantUserRoleFilter<"CaseParticipantUser"> | $Enums.CaseParticipantUserRole
    createdAt?: DateTimeFilter<"CaseParticipantUser"> | Date | string
    updatedAt?: DateTimeFilter<"CaseParticipantUser"> | Date | string
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CaseParticipantUserOrderByWithRelationInput = {
    caseId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    case?: CaseOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CaseParticipantUserWhereUniqueInput = Prisma.AtLeast<{
    caseId_userId?: CaseParticipantUserCaseIdUserIdCompoundUniqueInput
    AND?: CaseParticipantUserWhereInput | CaseParticipantUserWhereInput[]
    OR?: CaseParticipantUserWhereInput[]
    NOT?: CaseParticipantUserWhereInput | CaseParticipantUserWhereInput[]
    caseId?: StringFilter<"CaseParticipantUser"> | string
    userId?: StringFilter<"CaseParticipantUser"> | string
    role?: EnumCaseParticipantUserRoleFilter<"CaseParticipantUser"> | $Enums.CaseParticipantUserRole
    createdAt?: DateTimeFilter<"CaseParticipantUser"> | Date | string
    updatedAt?: DateTimeFilter<"CaseParticipantUser"> | Date | string
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "caseId_userId">

  export type CaseParticipantUserOrderByWithAggregationInput = {
    caseId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CaseParticipantUserCountOrderByAggregateInput
    _max?: CaseParticipantUserMaxOrderByAggregateInput
    _min?: CaseParticipantUserMinOrderByAggregateInput
  }

  export type CaseParticipantUserScalarWhereWithAggregatesInput = {
    AND?: CaseParticipantUserScalarWhereWithAggregatesInput | CaseParticipantUserScalarWhereWithAggregatesInput[]
    OR?: CaseParticipantUserScalarWhereWithAggregatesInput[]
    NOT?: CaseParticipantUserScalarWhereWithAggregatesInput | CaseParticipantUserScalarWhereWithAggregatesInput[]
    caseId?: StringWithAggregatesFilter<"CaseParticipantUser"> | string
    userId?: StringWithAggregatesFilter<"CaseParticipantUser"> | string
    role?: EnumCaseParticipantUserRoleWithAggregatesFilter<"CaseParticipantUser"> | $Enums.CaseParticipantUserRole
    createdAt?: DateTimeWithAggregatesFilter<"CaseParticipantUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CaseParticipantUser"> | Date | string
  }

  export type CaseParticipantClientWhereInput = {
    AND?: CaseParticipantClientWhereInput | CaseParticipantClientWhereInput[]
    OR?: CaseParticipantClientWhereInput[]
    NOT?: CaseParticipantClientWhereInput | CaseParticipantClientWhereInput[]
    caseId?: StringFilter<"CaseParticipantClient"> | string
    clientId?: StringFilter<"CaseParticipantClient"> | string
    type?: EnumCaseParticipantClientTypeFilter<"CaseParticipantClient"> | $Enums.CaseParticipantClientType
    createdAt?: DateTimeFilter<"CaseParticipantClient"> | Date | string
    updatedAt?: DateTimeFilter<"CaseParticipantClient"> | Date | string
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    client?: XOR<ClientRelationFilter, ClientWhereInput>
  }

  export type CaseParticipantClientOrderByWithRelationInput = {
    caseId?: SortOrder
    clientId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    case?: CaseOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
  }

  export type CaseParticipantClientWhereUniqueInput = Prisma.AtLeast<{
    caseId_clientId?: CaseParticipantClientCaseIdClientIdCompoundUniqueInput
    AND?: CaseParticipantClientWhereInput | CaseParticipantClientWhereInput[]
    OR?: CaseParticipantClientWhereInput[]
    NOT?: CaseParticipantClientWhereInput | CaseParticipantClientWhereInput[]
    caseId?: StringFilter<"CaseParticipantClient"> | string
    clientId?: StringFilter<"CaseParticipantClient"> | string
    type?: EnumCaseParticipantClientTypeFilter<"CaseParticipantClient"> | $Enums.CaseParticipantClientType
    createdAt?: DateTimeFilter<"CaseParticipantClient"> | Date | string
    updatedAt?: DateTimeFilter<"CaseParticipantClient"> | Date | string
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    client?: XOR<ClientRelationFilter, ClientWhereInput>
  }, "caseId_clientId">

  export type CaseParticipantClientOrderByWithAggregationInput = {
    caseId?: SortOrder
    clientId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CaseParticipantClientCountOrderByAggregateInput
    _max?: CaseParticipantClientMaxOrderByAggregateInput
    _min?: CaseParticipantClientMinOrderByAggregateInput
  }

  export type CaseParticipantClientScalarWhereWithAggregatesInput = {
    AND?: CaseParticipantClientScalarWhereWithAggregatesInput | CaseParticipantClientScalarWhereWithAggregatesInput[]
    OR?: CaseParticipantClientScalarWhereWithAggregatesInput[]
    NOT?: CaseParticipantClientScalarWhereWithAggregatesInput | CaseParticipantClientScalarWhereWithAggregatesInput[]
    caseId?: StringWithAggregatesFilter<"CaseParticipantClient"> | string
    clientId?: StringWithAggregatesFilter<"CaseParticipantClient"> | string
    type?: EnumCaseParticipantClientTypeWithAggregatesFilter<"CaseParticipantClient"> | $Enums.CaseParticipantClientType
    createdAt?: DateTimeWithAggregatesFilter<"CaseParticipantClient"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CaseParticipantClient"> | Date | string
  }

  export type CaseEventWhereInput = {
    AND?: CaseEventWhereInput | CaseEventWhereInput[]
    OR?: CaseEventWhereInput[]
    NOT?: CaseEventWhereInput | CaseEventWhereInput[]
    id?: StringFilter<"CaseEvent"> | string
    type?: StringFilter<"CaseEvent"> | string
    description?: StringNullableFilter<"CaseEvent"> | string | null
    timestamp?: DateTimeFilter<"CaseEvent"> | Date | string
    caseId?: StringFilter<"CaseEvent"> | string
    userId?: StringNullableFilter<"CaseEvent"> | string | null
    tenantId?: StringFilter<"CaseEvent"> | string
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type CaseEventOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    caseId?: SortOrder
    userId?: SortOrderInput | SortOrder
    tenantId?: SortOrder
    case?: CaseOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type CaseEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CaseEventWhereInput | CaseEventWhereInput[]
    OR?: CaseEventWhereInput[]
    NOT?: CaseEventWhereInput | CaseEventWhereInput[]
    type?: StringFilter<"CaseEvent"> | string
    description?: StringNullableFilter<"CaseEvent"> | string | null
    timestamp?: DateTimeFilter<"CaseEvent"> | Date | string
    caseId?: StringFilter<"CaseEvent"> | string
    userId?: StringNullableFilter<"CaseEvent"> | string | null
    tenantId?: StringFilter<"CaseEvent"> | string
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id">

  export type CaseEventOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    caseId?: SortOrder
    userId?: SortOrderInput | SortOrder
    tenantId?: SortOrder
    _count?: CaseEventCountOrderByAggregateInput
    _max?: CaseEventMaxOrderByAggregateInput
    _min?: CaseEventMinOrderByAggregateInput
  }

  export type CaseEventScalarWhereWithAggregatesInput = {
    AND?: CaseEventScalarWhereWithAggregatesInput | CaseEventScalarWhereWithAggregatesInput[]
    OR?: CaseEventScalarWhereWithAggregatesInput[]
    NOT?: CaseEventScalarWhereWithAggregatesInput | CaseEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CaseEvent"> | string
    type?: StringWithAggregatesFilter<"CaseEvent"> | string
    description?: StringNullableWithAggregatesFilter<"CaseEvent"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"CaseEvent"> | Date | string
    caseId?: StringWithAggregatesFilter<"CaseEvent"> | string
    userId?: StringNullableWithAggregatesFilter<"CaseEvent"> | string | null
    tenantId?: StringWithAggregatesFilter<"CaseEvent"> | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    viewed?: BoolFilter<"Message"> | boolean
    viewedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    caseId?: StringFilter<"Message"> | string
    tenantId?: StringFilter<"Message"> | string
    senderId?: StringNullableFilter<"Message"> | string | null
    senderClientId?: StringNullableFilter<"Message"> | string | null
    receiverClientId?: StringFilter<"Message"> | string
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    sender?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    senderClient?: XOR<ClientNullableRelationFilter, ClientWhereInput> | null
    receiverClient?: XOR<ClientRelationFilter, ClientWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    viewed?: SortOrder
    viewedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    tenantId?: SortOrder
    senderId?: SortOrderInput | SortOrder
    senderClientId?: SortOrderInput | SortOrder
    receiverClientId?: SortOrder
    case?: CaseOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
    senderClient?: ClientOrderByWithRelationInput
    receiverClient?: ClientOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    content?: StringFilter<"Message"> | string
    viewed?: BoolFilter<"Message"> | boolean
    viewedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    caseId?: StringFilter<"Message"> | string
    tenantId?: StringFilter<"Message"> | string
    senderId?: StringNullableFilter<"Message"> | string | null
    senderClientId?: StringNullableFilter<"Message"> | string | null
    receiverClientId?: StringFilter<"Message"> | string
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    sender?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    senderClient?: XOR<ClientNullableRelationFilter, ClientWhereInput> | null
    receiverClient?: XOR<ClientRelationFilter, ClientWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    viewed?: SortOrder
    viewedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    tenantId?: SortOrder
    senderId?: SortOrderInput | SortOrder
    senderClientId?: SortOrderInput | SortOrder
    receiverClientId?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    content?: StringWithAggregatesFilter<"Message"> | string
    viewed?: BoolWithAggregatesFilter<"Message"> | boolean
    viewedAt?: DateTimeNullableWithAggregatesFilter<"Message"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    caseId?: StringWithAggregatesFilter<"Message"> | string
    tenantId?: StringWithAggregatesFilter<"Message"> | string
    senderId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    senderClientId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    receiverClientId?: StringWithAggregatesFilter<"Message"> | string
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: StringFilter<"File"> | string
    name?: StringFilter<"File"> | string
    url?: StringFilter<"File"> | string
    uploadedAt?: DateTimeFilter<"File"> | Date | string
    tenantId?: StringFilter<"File"> | string
    caseId?: StringFilter<"File"> | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    case?: XOR<CaseRelationFilter, CaseWhereInput>
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    uploadedAt?: SortOrder
    tenantId?: SortOrder
    caseId?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    case?: CaseOrderByWithRelationInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    name?: StringFilter<"File"> | string
    url?: StringFilter<"File"> | string
    uploadedAt?: DateTimeFilter<"File"> | Date | string
    tenantId?: StringFilter<"File"> | string
    caseId?: StringFilter<"File"> | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    case?: XOR<CaseRelationFilter, CaseWhereInput>
  }, "id">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    uploadedAt?: SortOrder
    tenantId?: SortOrder
    caseId?: SortOrder
    _count?: FileCountOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"File"> | string
    name?: StringWithAggregatesFilter<"File"> | string
    url?: StringWithAggregatesFilter<"File"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    tenantId?: StringWithAggregatesFilter<"File"> | string
    caseId?: StringWithAggregatesFilter<"File"> | string
  }

  export type InviteWhereInput = {
    AND?: InviteWhereInput | InviteWhereInput[]
    OR?: InviteWhereInput[]
    NOT?: InviteWhereInput | InviteWhereInput[]
    id?: StringFilter<"Invite"> | string
    email?: StringFilter<"Invite"> | string
    token?: StringFilter<"Invite"> | string
    expiresAt?: DateTimeFilter<"Invite"> | Date | string
    isUsed?: BoolFilter<"Invite"> | boolean
    createdAt?: DateTimeFilter<"Invite"> | Date | string
    updatedAt?: DateTimeFilter<"Invite"> | Date | string
    caseId?: StringFilter<"Invite"> | string
    tenantId?: StringFilter<"Invite"> | string
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type InviteOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    tenantId?: SortOrder
    case?: CaseOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type InviteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: InviteWhereInput | InviteWhereInput[]
    OR?: InviteWhereInput[]
    NOT?: InviteWhereInput | InviteWhereInput[]
    email?: StringFilter<"Invite"> | string
    expiresAt?: DateTimeFilter<"Invite"> | Date | string
    isUsed?: BoolFilter<"Invite"> | boolean
    createdAt?: DateTimeFilter<"Invite"> | Date | string
    updatedAt?: DateTimeFilter<"Invite"> | Date | string
    caseId?: StringFilter<"Invite"> | string
    tenantId?: StringFilter<"Invite"> | string
    case?: XOR<CaseRelationFilter, CaseWhereInput>
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id" | "token">

  export type InviteOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    tenantId?: SortOrder
    _count?: InviteCountOrderByAggregateInput
    _max?: InviteMaxOrderByAggregateInput
    _min?: InviteMinOrderByAggregateInput
  }

  export type InviteScalarWhereWithAggregatesInput = {
    AND?: InviteScalarWhereWithAggregatesInput | InviteScalarWhereWithAggregatesInput[]
    OR?: InviteScalarWhereWithAggregatesInput[]
    NOT?: InviteScalarWhereWithAggregatesInput | InviteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Invite"> | string
    email?: StringWithAggregatesFilter<"Invite"> | string
    token?: StringWithAggregatesFilter<"Invite"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Invite"> | Date | string
    isUsed?: BoolWithAggregatesFilter<"Invite"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Invite"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Invite"> | Date | string
    caseId?: StringWithAggregatesFilter<"Invite"> | string
    tenantId?: StringWithAggregatesFilter<"Invite"> | string
  }

  export type GeneralSettingWhereInput = {
    AND?: GeneralSettingWhereInput | GeneralSettingWhereInput[]
    OR?: GeneralSettingWhereInput[]
    NOT?: GeneralSettingWhereInput | GeneralSettingWhereInput[]
    id?: StringFilter<"GeneralSetting"> | string
    tenantId?: StringFilter<"GeneralSetting"> | string
    theme?: StringNullableFilter<"GeneralSetting"> | string | null
    businessName?: StringNullableFilter<"GeneralSetting"> | string | null
    workingDays?: StringNullableListFilter<"GeneralSetting">
    workingHours?: JsonNullableFilter<"GeneralSetting">
    createdAt?: DateTimeFilter<"GeneralSetting"> | Date | string
    updatedAt?: DateTimeFilter<"GeneralSetting"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type GeneralSettingOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    theme?: SortOrderInput | SortOrder
    businessName?: SortOrderInput | SortOrder
    workingDays?: SortOrder
    workingHours?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type GeneralSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tenantId?: string
    AND?: GeneralSettingWhereInput | GeneralSettingWhereInput[]
    OR?: GeneralSettingWhereInput[]
    NOT?: GeneralSettingWhereInput | GeneralSettingWhereInput[]
    theme?: StringNullableFilter<"GeneralSetting"> | string | null
    businessName?: StringNullableFilter<"GeneralSetting"> | string | null
    workingDays?: StringNullableListFilter<"GeneralSetting">
    workingHours?: JsonNullableFilter<"GeneralSetting">
    createdAt?: DateTimeFilter<"GeneralSetting"> | Date | string
    updatedAt?: DateTimeFilter<"GeneralSetting"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id" | "tenantId">

  export type GeneralSettingOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    theme?: SortOrderInput | SortOrder
    businessName?: SortOrderInput | SortOrder
    workingDays?: SortOrder
    workingHours?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GeneralSettingCountOrderByAggregateInput
    _max?: GeneralSettingMaxOrderByAggregateInput
    _min?: GeneralSettingMinOrderByAggregateInput
  }

  export type GeneralSettingScalarWhereWithAggregatesInput = {
    AND?: GeneralSettingScalarWhereWithAggregatesInput | GeneralSettingScalarWhereWithAggregatesInput[]
    OR?: GeneralSettingScalarWhereWithAggregatesInput[]
    NOT?: GeneralSettingScalarWhereWithAggregatesInput | GeneralSettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GeneralSetting"> | string
    tenantId?: StringWithAggregatesFilter<"GeneralSetting"> | string
    theme?: StringNullableWithAggregatesFilter<"GeneralSetting"> | string | null
    businessName?: StringNullableWithAggregatesFilter<"GeneralSetting"> | string | null
    workingDays?: StringNullableListFilter<"GeneralSetting">
    workingHours?: JsonNullableWithAggregatesFilter<"GeneralSetting">
    createdAt?: DateTimeWithAggregatesFilter<"GeneralSetting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GeneralSetting"> | Date | string
  }

  export type NotificationSettingWhereInput = {
    AND?: NotificationSettingWhereInput | NotificationSettingWhereInput[]
    OR?: NotificationSettingWhereInput[]
    NOT?: NotificationSettingWhereInput | NotificationSettingWhereInput[]
    id?: StringFilter<"NotificationSetting"> | string
    tenantId?: StringFilter<"NotificationSetting"> | string
    email?: BoolFilter<"NotificationSetting"> | boolean
    whatsapp?: BoolFilter<"NotificationSetting"> | boolean
    app?: BoolFilter<"NotificationSetting"> | boolean
    newMessage?: BoolFilter<"NotificationSetting"> | boolean
    caseUpdate?: BoolFilter<"NotificationSetting"> | boolean
    newDocument?: BoolFilter<"NotificationSetting"> | boolean
    signatureRequest?: BoolFilter<"NotificationSetting"> | boolean
    createdAt?: DateTimeFilter<"NotificationSetting"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationSetting"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type NotificationSettingOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    app?: SortOrder
    newMessage?: SortOrder
    caseUpdate?: SortOrder
    newDocument?: SortOrder
    signatureRequest?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type NotificationSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tenantId?: string
    AND?: NotificationSettingWhereInput | NotificationSettingWhereInput[]
    OR?: NotificationSettingWhereInput[]
    NOT?: NotificationSettingWhereInput | NotificationSettingWhereInput[]
    email?: BoolFilter<"NotificationSetting"> | boolean
    whatsapp?: BoolFilter<"NotificationSetting"> | boolean
    app?: BoolFilter<"NotificationSetting"> | boolean
    newMessage?: BoolFilter<"NotificationSetting"> | boolean
    caseUpdate?: BoolFilter<"NotificationSetting"> | boolean
    newDocument?: BoolFilter<"NotificationSetting"> | boolean
    signatureRequest?: BoolFilter<"NotificationSetting"> | boolean
    createdAt?: DateTimeFilter<"NotificationSetting"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationSetting"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id" | "tenantId">

  export type NotificationSettingOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    app?: SortOrder
    newMessage?: SortOrder
    caseUpdate?: SortOrder
    newDocument?: SortOrder
    signatureRequest?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationSettingCountOrderByAggregateInput
    _max?: NotificationSettingMaxOrderByAggregateInput
    _min?: NotificationSettingMinOrderByAggregateInput
  }

  export type NotificationSettingScalarWhereWithAggregatesInput = {
    AND?: NotificationSettingScalarWhereWithAggregatesInput | NotificationSettingScalarWhereWithAggregatesInput[]
    OR?: NotificationSettingScalarWhereWithAggregatesInput[]
    NOT?: NotificationSettingScalarWhereWithAggregatesInput | NotificationSettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationSetting"> | string
    tenantId?: StringWithAggregatesFilter<"NotificationSetting"> | string
    email?: BoolWithAggregatesFilter<"NotificationSetting"> | boolean
    whatsapp?: BoolWithAggregatesFilter<"NotificationSetting"> | boolean
    app?: BoolWithAggregatesFilter<"NotificationSetting"> | boolean
    newMessage?: BoolWithAggregatesFilter<"NotificationSetting"> | boolean
    caseUpdate?: BoolWithAggregatesFilter<"NotificationSetting"> | boolean
    newDocument?: BoolWithAggregatesFilter<"NotificationSetting"> | boolean
    signatureRequest?: BoolWithAggregatesFilter<"NotificationSetting"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"NotificationSetting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NotificationSetting"> | Date | string
  }

  export type SecuritySettingWhereInput = {
    AND?: SecuritySettingWhereInput | SecuritySettingWhereInput[]
    OR?: SecuritySettingWhereInput[]
    NOT?: SecuritySettingWhereInput | SecuritySettingWhereInput[]
    id?: StringFilter<"SecuritySetting"> | string
    tenantId?: StringFilter<"SecuritySetting"> | string
    twoFAEnabled?: BoolFilter<"SecuritySetting"> | boolean
    autoLogoutMinutes?: IntFilter<"SecuritySetting"> | number
    createdAt?: DateTimeFilter<"SecuritySetting"> | Date | string
    updatedAt?: DateTimeFilter<"SecuritySetting"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type SecuritySettingOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    twoFAEnabled?: SortOrder
    autoLogoutMinutes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type SecuritySettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tenantId?: string
    AND?: SecuritySettingWhereInput | SecuritySettingWhereInput[]
    OR?: SecuritySettingWhereInput[]
    NOT?: SecuritySettingWhereInput | SecuritySettingWhereInput[]
    twoFAEnabled?: BoolFilter<"SecuritySetting"> | boolean
    autoLogoutMinutes?: IntFilter<"SecuritySetting"> | number
    createdAt?: DateTimeFilter<"SecuritySetting"> | Date | string
    updatedAt?: DateTimeFilter<"SecuritySetting"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id" | "tenantId">

  export type SecuritySettingOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    twoFAEnabled?: SortOrder
    autoLogoutMinutes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SecuritySettingCountOrderByAggregateInput
    _avg?: SecuritySettingAvgOrderByAggregateInput
    _max?: SecuritySettingMaxOrderByAggregateInput
    _min?: SecuritySettingMinOrderByAggregateInput
    _sum?: SecuritySettingSumOrderByAggregateInput
  }

  export type SecuritySettingScalarWhereWithAggregatesInput = {
    AND?: SecuritySettingScalarWhereWithAggregatesInput | SecuritySettingScalarWhereWithAggregatesInput[]
    OR?: SecuritySettingScalarWhereWithAggregatesInput[]
    NOT?: SecuritySettingScalarWhereWithAggregatesInput | SecuritySettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SecuritySetting"> | string
    tenantId?: StringWithAggregatesFilter<"SecuritySetting"> | string
    twoFAEnabled?: BoolWithAggregatesFilter<"SecuritySetting"> | boolean
    autoLogoutMinutes?: IntWithAggregatesFilter<"SecuritySetting"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SecuritySetting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SecuritySetting"> | Date | string
  }

  export type BillingSettingWhereInput = {
    AND?: BillingSettingWhereInput | BillingSettingWhereInput[]
    OR?: BillingSettingWhereInput[]
    NOT?: BillingSettingWhereInput | BillingSettingWhereInput[]
    id?: StringFilter<"BillingSetting"> | string
    tenantId?: StringFilter<"BillingSetting"> | string
    plan?: StringFilter<"BillingSetting"> | string
    nextCharge?: DateTimeFilter<"BillingSetting"> | Date | string
    isActive?: BoolFilter<"BillingSetting"> | boolean
    createdAt?: DateTimeFilter<"BillingSetting"> | Date | string
    updatedAt?: DateTimeFilter<"BillingSetting"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type BillingSettingOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    plan?: SortOrder
    nextCharge?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type BillingSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tenantId?: string
    AND?: BillingSettingWhereInput | BillingSettingWhereInput[]
    OR?: BillingSettingWhereInput[]
    NOT?: BillingSettingWhereInput | BillingSettingWhereInput[]
    plan?: StringFilter<"BillingSetting"> | string
    nextCharge?: DateTimeFilter<"BillingSetting"> | Date | string
    isActive?: BoolFilter<"BillingSetting"> | boolean
    createdAt?: DateTimeFilter<"BillingSetting"> | Date | string
    updatedAt?: DateTimeFilter<"BillingSetting"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id" | "tenantId">

  export type BillingSettingOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    plan?: SortOrder
    nextCharge?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BillingSettingCountOrderByAggregateInput
    _max?: BillingSettingMaxOrderByAggregateInput
    _min?: BillingSettingMinOrderByAggregateInput
  }

  export type BillingSettingScalarWhereWithAggregatesInput = {
    AND?: BillingSettingScalarWhereWithAggregatesInput | BillingSettingScalarWhereWithAggregatesInput[]
    OR?: BillingSettingScalarWhereWithAggregatesInput[]
    NOT?: BillingSettingScalarWhereWithAggregatesInput | BillingSettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BillingSetting"> | string
    tenantId?: StringWithAggregatesFilter<"BillingSetting"> | string
    plan?: StringWithAggregatesFilter<"BillingSetting"> | string
    nextCharge?: DateTimeWithAggregatesFilter<"BillingSetting"> | Date | string
    isActive?: BoolWithAggregatesFilter<"BillingSetting"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"BillingSetting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BillingSetting"> | Date | string
  }

  export type IntegrationSettingWhereInput = {
    AND?: IntegrationSettingWhereInput | IntegrationSettingWhereInput[]
    OR?: IntegrationSettingWhereInput[]
    NOT?: IntegrationSettingWhereInput | IntegrationSettingWhereInput[]
    id?: StringFilter<"IntegrationSetting"> | string
    tenantId?: StringFilter<"IntegrationSetting"> | string
    d4signConnected?: BoolFilter<"IntegrationSetting"> | boolean
    smtpConfigured?: BoolFilter<"IntegrationSetting"> | boolean
    googleCalendarLinked?: BoolFilter<"IntegrationSetting"> | boolean
    webhookUrl?: StringNullableFilter<"IntegrationSetting"> | string | null
    createdAt?: DateTimeFilter<"IntegrationSetting"> | Date | string
    updatedAt?: DateTimeFilter<"IntegrationSetting"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type IntegrationSettingOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    d4signConnected?: SortOrder
    smtpConfigured?: SortOrder
    googleCalendarLinked?: SortOrder
    webhookUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type IntegrationSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tenantId?: string
    AND?: IntegrationSettingWhereInput | IntegrationSettingWhereInput[]
    OR?: IntegrationSettingWhereInput[]
    NOT?: IntegrationSettingWhereInput | IntegrationSettingWhereInput[]
    d4signConnected?: BoolFilter<"IntegrationSetting"> | boolean
    smtpConfigured?: BoolFilter<"IntegrationSetting"> | boolean
    googleCalendarLinked?: BoolFilter<"IntegrationSetting"> | boolean
    webhookUrl?: StringNullableFilter<"IntegrationSetting"> | string | null
    createdAt?: DateTimeFilter<"IntegrationSetting"> | Date | string
    updatedAt?: DateTimeFilter<"IntegrationSetting"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id" | "tenantId">

  export type IntegrationSettingOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    d4signConnected?: SortOrder
    smtpConfigured?: SortOrder
    googleCalendarLinked?: SortOrder
    webhookUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: IntegrationSettingCountOrderByAggregateInput
    _max?: IntegrationSettingMaxOrderByAggregateInput
    _min?: IntegrationSettingMinOrderByAggregateInput
  }

  export type IntegrationSettingScalarWhereWithAggregatesInput = {
    AND?: IntegrationSettingScalarWhereWithAggregatesInput | IntegrationSettingScalarWhereWithAggregatesInput[]
    OR?: IntegrationSettingScalarWhereWithAggregatesInput[]
    NOT?: IntegrationSettingScalarWhereWithAggregatesInput | IntegrationSettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"IntegrationSetting"> | string
    tenantId?: StringWithAggregatesFilter<"IntegrationSetting"> | string
    d4signConnected?: BoolWithAggregatesFilter<"IntegrationSetting"> | boolean
    smtpConfigured?: BoolWithAggregatesFilter<"IntegrationSetting"> | boolean
    googleCalendarLinked?: BoolWithAggregatesFilter<"IntegrationSetting"> | boolean
    webhookUrl?: StringNullableWithAggregatesFilter<"IntegrationSetting"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"IntegrationSetting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"IntegrationSetting"> | Date | string
  }

  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: StringFilter<"Employee"> | string
    tenantId?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    name?: StringNullableFilter<"Employee"> | string | null
    role?: EnumUserRoleFilter<"Employee"> | $Enums.UserRole
    status?: EnumEmployeeStatusFilter<"Employee"> | $Enums.EmployeeStatus
    invitedAt?: DateTimeFilter<"Employee"> | Date | string
    acceptedAt?: DateTimeNullableFilter<"Employee"> | Date | string | null
    userId?: StringNullableFilter<"Employee"> | string | null
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrder
    status?: SortOrder
    invitedAt?: SortOrder
    acceptedAt?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    userId?: string
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    tenantId?: StringFilter<"Employee"> | string
    name?: StringNullableFilter<"Employee"> | string | null
    role?: EnumUserRoleFilter<"Employee"> | $Enums.UserRole
    status?: EnumEmployeeStatusFilter<"Employee"> | $Enums.EmployeeStatus
    invitedAt?: DateTimeFilter<"Employee"> | Date | string
    acceptedAt?: DateTimeNullableFilter<"Employee"> | Date | string | null
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "email" | "userId">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrder
    status?: SortOrder
    invitedAt?: SortOrder
    acceptedAt?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Employee"> | string
    tenantId?: StringWithAggregatesFilter<"Employee"> | string
    email?: StringWithAggregatesFilter<"Employee"> | string
    name?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"Employee"> | $Enums.UserRole
    status?: EnumEmployeeStatusWithAggregatesFilter<"Employee"> | $Enums.EmployeeStatus
    invitedAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    acceptedAt?: DateTimeNullableWithAggregatesFilter<"Employee"> | Date | string | null
    userId?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
  }

  export type PermissionCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userPermissions?: UserPermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userPermissions?: UserPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userPermissions?: UserPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userPermissions?: UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserPermissionsInput
    permission: PermissionCreateNestedOneWithoutUserPermissionsInput
  }

  export type UserPermissionUncheckedCreateInput = {
    userId: string
    permissionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPermissionUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutUserPermissionsNestedInput
  }

  export type UserPermissionUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionCreateManyInput = {
    userId: string
    permissionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPermissionUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    clients?: ClientCreateNestedManyWithoutTenantInput
    cases?: CaseCreateNestedManyWithoutTenantInput
    messages?: MessageCreateNestedManyWithoutTenantInput
    files?: FileCreateNestedManyWithoutTenantInput
    invites?: InviteCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingCreateNestedOneWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    clients?: ClientUncheckedCreateNestedManyWithoutTenantInput
    cases?: CaseUncheckedCreateNestedManyWithoutTenantInput
    messages?: MessageUncheckedCreateNestedManyWithoutTenantInput
    files?: FileUncheckedCreateNestedManyWithoutTenantInput
    invites?: InviteUncheckedCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingUncheckedCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingUncheckedCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingUncheckedCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingUncheckedCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingUncheckedCreateNestedOneWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    clients?: ClientUpdateManyWithoutTenantNestedInput
    cases?: CaseUpdateManyWithoutTenantNestedInput
    messages?: MessageUpdateManyWithoutTenantNestedInput
    files?: FileUpdateManyWithoutTenantNestedInput
    invites?: InviteUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    clients?: ClientUncheckedUpdateManyWithoutTenantNestedInput
    cases?: CaseUncheckedUpdateManyWithoutTenantNestedInput
    messages?: MessageUncheckedUpdateManyWithoutTenantNestedInput
    files?: FileUncheckedUpdateManyWithoutTenantNestedInput
    invites?: InviteUncheckedUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUncheckedUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUncheckedUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUncheckedUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUncheckedUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUncheckedUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenant: TenantCreateNestedOneWithoutUsersInput
    primaryCases?: CaseCreateNestedManyWithoutLawyerPrimaryInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    participatingCases?: CaseParticipantUserCreateNestedManyWithoutUserInput
    caseEvents?: CaseEventCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionCreateNestedManyWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    Client?: ClientCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenantId: string
    primaryCases?: CaseUncheckedCreateNestedManyWithoutLawyerPrimaryInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participatingCases?: CaseParticipantUserUncheckedCreateNestedManyWithoutUserInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    Client?: ClientUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    primaryCases?: CaseUpdateManyWithoutLawyerPrimaryNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    participatingCases?: CaseParticipantUserUpdateManyWithoutUserNestedInput
    caseEvents?: CaseEventUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUpdateManyWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    Client?: ClientUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenantId?: StringFieldUpdateOperationsInput | string
    primaryCases?: CaseUncheckedUpdateManyWithoutLawyerPrimaryNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participatingCases?: CaseParticipantUserUncheckedUpdateManyWithoutUserNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    Client?: ClientUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenantId: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ClientCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutClientsInput
    user?: UserCreateNestedOneWithoutClientInput
    primaryCases?: CaseCreateNestedManyWithoutClientPrimaryInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverClientInput
    sentMessages?: MessageCreateNestedManyWithoutSenderClientInput
    participatingCases?: CaseParticipantClientCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    userId?: string | null
    primaryCases?: CaseUncheckedCreateNestedManyWithoutClientPrimaryInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverClientInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderClientInput
    participatingCases?: CaseParticipantClientUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutClientsNestedInput
    user?: UserUpdateOneWithoutClientNestedInput
    primaryCases?: CaseUpdateManyWithoutClientPrimaryNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverClientNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderClientNestedInput
    participatingCases?: CaseParticipantClientUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCases?: CaseUncheckedUpdateManyWithoutClientPrimaryNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverClientNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderClientNestedInput
    participatingCases?: CaseParticipantClientUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    userId?: string | null
  }

  export type ClientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CaseCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCasesInput
    lawyerPrimary?: UserCreateNestedOneWithoutPrimaryCasesInput
    clientPrimary?: ClientCreateNestedOneWithoutPrimaryCasesInput
    messages?: MessageCreateNestedManyWithoutCaseInput
    files?: FileCreateNestedManyWithoutCaseInput
    invites?: InviteCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    lawyerPrimaryId?: string | null
    clientPrimaryId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutCaseInput
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    invites?: InviteUncheckedCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserUncheckedCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCasesNestedInput
    lawyerPrimary?: UserUpdateOneWithoutPrimaryCasesNestedInput
    clientPrimary?: ClientUpdateOneWithoutPrimaryCasesNestedInput
    messages?: MessageUpdateManyWithoutCaseNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    invites?: InviteUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    lawyerPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    clientPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutCaseNestedInput
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    invites?: InviteUncheckedUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUncheckedUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    lawyerPrimaryId?: string | null
    clientPrimaryId?: string | null
  }

  export type CaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    lawyerPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    clientPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CaseParticipantUserCreateInput = {
    role?: $Enums.CaseParticipantUserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutParticipantsUsersInput
    user: UserCreateNestedOneWithoutParticipatingCasesInput
  }

  export type CaseParticipantUserUncheckedCreateInput = {
    caseId: string
    userId: string
    role?: $Enums.CaseParticipantUserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseParticipantUserUpdateInput = {
    role?: EnumCaseParticipantUserRoleFieldUpdateOperationsInput | $Enums.CaseParticipantUserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutParticipantsUsersNestedInput
    user?: UserUpdateOneRequiredWithoutParticipatingCasesNestedInput
  }

  export type CaseParticipantUserUncheckedUpdateInput = {
    caseId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCaseParticipantUserRoleFieldUpdateOperationsInput | $Enums.CaseParticipantUserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseParticipantUserCreateManyInput = {
    caseId: string
    userId: string
    role?: $Enums.CaseParticipantUserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseParticipantUserUpdateManyMutationInput = {
    role?: EnumCaseParticipantUserRoleFieldUpdateOperationsInput | $Enums.CaseParticipantUserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseParticipantUserUncheckedUpdateManyInput = {
    caseId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCaseParticipantUserRoleFieldUpdateOperationsInput | $Enums.CaseParticipantUserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseParticipantClientCreateInput = {
    type?: $Enums.CaseParticipantClientType
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutParticipantsClientsInput
    client: ClientCreateNestedOneWithoutParticipatingCasesInput
  }

  export type CaseParticipantClientUncheckedCreateInput = {
    caseId: string
    clientId: string
    type?: $Enums.CaseParticipantClientType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseParticipantClientUpdateInput = {
    type?: EnumCaseParticipantClientTypeFieldUpdateOperationsInput | $Enums.CaseParticipantClientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutParticipantsClientsNestedInput
    client?: ClientUpdateOneRequiredWithoutParticipatingCasesNestedInput
  }

  export type CaseParticipantClientUncheckedUpdateInput = {
    caseId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseParticipantClientTypeFieldUpdateOperationsInput | $Enums.CaseParticipantClientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseParticipantClientCreateManyInput = {
    caseId: string
    clientId: string
    type?: $Enums.CaseParticipantClientType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseParticipantClientUpdateManyMutationInput = {
    type?: EnumCaseParticipantClientTypeFieldUpdateOperationsInput | $Enums.CaseParticipantClientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseParticipantClientUncheckedUpdateManyInput = {
    caseId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseParticipantClientTypeFieldUpdateOperationsInput | $Enums.CaseParticipantClientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseEventCreateInput = {
    id?: string
    type: string
    description?: string | null
    timestamp?: Date | string
    case: CaseCreateNestedOneWithoutCaseEventsInput
    user?: UserCreateNestedOneWithoutCaseEventsInput
    tenant: TenantCreateNestedOneWithoutCaseEventsInput
  }

  export type CaseEventUncheckedCreateInput = {
    id?: string
    type: string
    description?: string | null
    timestamp?: Date | string
    caseId: string
    userId?: string | null
    tenantId: string
  }

  export type CaseEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutCaseEventsNestedInput
    user?: UserUpdateOneWithoutCaseEventsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutCaseEventsNestedInput
  }

  export type CaseEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type CaseEventCreateManyInput = {
    id?: string
    type: string
    description?: string | null
    timestamp?: Date | string
    caseId: string
    userId?: string | null
    tenantId: string
  }

  export type CaseEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutMessagesInput
    tenant: TenantCreateNestedOneWithoutMessagesInput
    sender?: UserCreateNestedOneWithoutSentMessagesInput
    senderClient?: ClientCreateNestedOneWithoutSentMessagesInput
    receiverClient: ClientCreateNestedOneWithoutReceivedMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    tenantId: string
    senderId?: string | null
    senderClientId?: string | null
    receiverClientId: string
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutMessagesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneWithoutSentMessagesNestedInput
    senderClient?: ClientUpdateOneWithoutSentMessagesNestedInput
    receiverClient?: ClientUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    senderClientId?: NullableStringFieldUpdateOperationsInput | string | null
    receiverClientId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateManyInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    tenantId: string
    senderId?: string | null
    senderClientId?: string | null
    receiverClientId: string
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    senderClientId?: NullableStringFieldUpdateOperationsInput | string | null
    receiverClientId?: StringFieldUpdateOperationsInput | string
  }

  export type FileCreateInput = {
    id?: string
    name: string
    url: string
    uploadedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutFilesInput
    case: CaseCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    name: string
    url: string
    uploadedAt?: Date | string
    tenantId: string
    caseId: string
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutFilesNestedInput
    case?: CaseUpdateOneRequiredWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type FileCreateManyInput = {
    id?: string
    name: string
    url: string
    uploadedAt?: Date | string
    tenantId: string
    caseId: string
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type InviteCreateInput = {
    id?: string
    email: string
    token: string
    expiresAt: Date | string
    isUsed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutInvitesInput
    tenant: TenantCreateNestedOneWithoutInvitesInput
  }

  export type InviteUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    expiresAt: Date | string
    isUsed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    tenantId: string
  }

  export type InviteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutInvitesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutInvitesNestedInput
  }

  export type InviteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type InviteCreateManyInput = {
    id?: string
    email: string
    token: string
    expiresAt: Date | string
    isUsed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    tenantId: string
  }

  export type InviteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type GeneralSettingCreateInput = {
    id?: string
    theme?: string | null
    businessName?: string | null
    workingDays?: GeneralSettingCreateworkingDaysInput | string[]
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutGeneralSettingInput
  }

  export type GeneralSettingUncheckedCreateInput = {
    id?: string
    tenantId: string
    theme?: string | null
    businessName?: string | null
    workingDays?: GeneralSettingCreateworkingDaysInput | string[]
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    businessName?: NullableStringFieldUpdateOperationsInput | string | null
    workingDays?: GeneralSettingUpdateworkingDaysInput | string[]
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutGeneralSettingNestedInput
  }

  export type GeneralSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    businessName?: NullableStringFieldUpdateOperationsInput | string | null
    workingDays?: GeneralSettingUpdateworkingDaysInput | string[]
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralSettingCreateManyInput = {
    id?: string
    tenantId: string
    theme?: string | null
    businessName?: string | null
    workingDays?: GeneralSettingCreateworkingDaysInput | string[]
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    businessName?: NullableStringFieldUpdateOperationsInput | string | null
    workingDays?: GeneralSettingUpdateworkingDaysInput | string[]
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    businessName?: NullableStringFieldUpdateOperationsInput | string | null
    workingDays?: GeneralSettingUpdateworkingDaysInput | string[]
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSettingCreateInput = {
    id?: string
    email?: boolean
    whatsapp?: boolean
    app?: boolean
    newMessage?: boolean
    caseUpdate?: boolean
    newDocument?: boolean
    signatureRequest?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutNotificationSettingInput
  }

  export type NotificationSettingUncheckedCreateInput = {
    id?: string
    tenantId: string
    email?: boolean
    whatsapp?: boolean
    app?: boolean
    newMessage?: boolean
    caseUpdate?: boolean
    newDocument?: boolean
    signatureRequest?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: BoolFieldUpdateOperationsInput | boolean
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    app?: BoolFieldUpdateOperationsInput | boolean
    newMessage?: BoolFieldUpdateOperationsInput | boolean
    caseUpdate?: BoolFieldUpdateOperationsInput | boolean
    newDocument?: BoolFieldUpdateOperationsInput | boolean
    signatureRequest?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutNotificationSettingNestedInput
  }

  export type NotificationSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    email?: BoolFieldUpdateOperationsInput | boolean
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    app?: BoolFieldUpdateOperationsInput | boolean
    newMessage?: BoolFieldUpdateOperationsInput | boolean
    caseUpdate?: BoolFieldUpdateOperationsInput | boolean
    newDocument?: BoolFieldUpdateOperationsInput | boolean
    signatureRequest?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSettingCreateManyInput = {
    id?: string
    tenantId: string
    email?: boolean
    whatsapp?: boolean
    app?: boolean
    newMessage?: boolean
    caseUpdate?: boolean
    newDocument?: boolean
    signatureRequest?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: BoolFieldUpdateOperationsInput | boolean
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    app?: BoolFieldUpdateOperationsInput | boolean
    newMessage?: BoolFieldUpdateOperationsInput | boolean
    caseUpdate?: BoolFieldUpdateOperationsInput | boolean
    newDocument?: BoolFieldUpdateOperationsInput | boolean
    signatureRequest?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    email?: BoolFieldUpdateOperationsInput | boolean
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    app?: BoolFieldUpdateOperationsInput | boolean
    newMessage?: BoolFieldUpdateOperationsInput | boolean
    caseUpdate?: BoolFieldUpdateOperationsInput | boolean
    newDocument?: BoolFieldUpdateOperationsInput | boolean
    signatureRequest?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecuritySettingCreateInput = {
    id?: string
    twoFAEnabled?: boolean
    autoLogoutMinutes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutSecuritySettingInput
  }

  export type SecuritySettingUncheckedCreateInput = {
    id?: string
    tenantId: string
    twoFAEnabled?: boolean
    autoLogoutMinutes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SecuritySettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    twoFAEnabled?: BoolFieldUpdateOperationsInput | boolean
    autoLogoutMinutes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutSecuritySettingNestedInput
  }

  export type SecuritySettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    twoFAEnabled?: BoolFieldUpdateOperationsInput | boolean
    autoLogoutMinutes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecuritySettingCreateManyInput = {
    id?: string
    tenantId: string
    twoFAEnabled?: boolean
    autoLogoutMinutes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SecuritySettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    twoFAEnabled?: BoolFieldUpdateOperationsInput | boolean
    autoLogoutMinutes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecuritySettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    twoFAEnabled?: BoolFieldUpdateOperationsInput | boolean
    autoLogoutMinutes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingSettingCreateInput = {
    id?: string
    plan?: string
    nextCharge: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutBillingSettingInput
  }

  export type BillingSettingUncheckedCreateInput = {
    id?: string
    tenantId: string
    plan?: string
    nextCharge: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    nextCharge?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutBillingSettingNestedInput
  }

  export type BillingSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    nextCharge?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingSettingCreateManyInput = {
    id?: string
    tenantId: string
    plan?: string
    nextCharge: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    nextCharge?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    nextCharge?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationSettingCreateInput = {
    id?: string
    d4signConnected?: boolean
    smtpConfigured?: boolean
    googleCalendarLinked?: boolean
    webhookUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutIntegrationSettingInput
  }

  export type IntegrationSettingUncheckedCreateInput = {
    id?: string
    tenantId: string
    d4signConnected?: boolean
    smtpConfigured?: boolean
    googleCalendarLinked?: boolean
    webhookUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IntegrationSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    d4signConnected?: BoolFieldUpdateOperationsInput | boolean
    smtpConfigured?: BoolFieldUpdateOperationsInput | boolean
    googleCalendarLinked?: BoolFieldUpdateOperationsInput | boolean
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutIntegrationSettingNestedInput
  }

  export type IntegrationSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    d4signConnected?: BoolFieldUpdateOperationsInput | boolean
    smtpConfigured?: BoolFieldUpdateOperationsInput | boolean
    googleCalendarLinked?: BoolFieldUpdateOperationsInput | boolean
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationSettingCreateManyInput = {
    id?: string
    tenantId: string
    d4signConnected?: boolean
    smtpConfigured?: boolean
    googleCalendarLinked?: boolean
    webhookUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IntegrationSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    d4signConnected?: BoolFieldUpdateOperationsInput | boolean
    smtpConfigured?: BoolFieldUpdateOperationsInput | boolean
    googleCalendarLinked?: BoolFieldUpdateOperationsInput | boolean
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    d4signConnected?: BoolFieldUpdateOperationsInput | boolean
    smtpConfigured?: BoolFieldUpdateOperationsInput | boolean
    googleCalendarLinked?: BoolFieldUpdateOperationsInput | boolean
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    status?: $Enums.EmployeeStatus
    invitedAt?: Date | string
    acceptedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutEmployeesInput
    user?: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: string
    tenantId: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    status?: $Enums.EmployeeStatus
    invitedAt?: Date | string
    acceptedAt?: Date | string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    invitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutEmployeesNestedInput
    user?: UserUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    invitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateManyInput = {
    id?: string
    tenantId: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    status?: $Enums.EmployeeStatus
    invitedAt?: Date | string
    acceptedAt?: Date | string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    invitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    invitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserPermissionListRelationFilter = {
    every?: UserPermissionWhereInput
    some?: UserPermissionWhereInput
    none?: UserPermissionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PermissionRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type UserPermissionUserIdPermissionIdCompoundUniqueInput = {
    userId: string
    permissionId: string
  }

  export type UserPermissionCountOrderByAggregateInput = {
    userId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPermissionMaxOrderByAggregateInput = {
    userId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPermissionMinOrderByAggregateInput = {
    userId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ClientListRelationFilter = {
    every?: ClientWhereInput
    some?: ClientWhereInput
    none?: ClientWhereInput
  }

  export type CaseListRelationFilter = {
    every?: CaseWhereInput
    some?: CaseWhereInput
    none?: CaseWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type InviteListRelationFilter = {
    every?: InviteWhereInput
    some?: InviteWhereInput
    none?: InviteWhereInput
  }

  export type CaseEventListRelationFilter = {
    every?: CaseEventWhereInput
    some?: CaseEventWhereInput
    none?: CaseEventWhereInput
  }

  export type GeneralSettingNullableRelationFilter = {
    is?: GeneralSettingWhereInput | null
    isNot?: GeneralSettingWhereInput | null
  }

  export type NotificationSettingNullableRelationFilter = {
    is?: NotificationSettingWhereInput | null
    isNot?: NotificationSettingWhereInput | null
  }

  export type SecuritySettingNullableRelationFilter = {
    is?: SecuritySettingWhereInput | null
    isNot?: SecuritySettingWhereInput | null
  }

  export type BillingSettingNullableRelationFilter = {
    is?: BillingSettingWhereInput | null
    isNot?: BillingSettingWhereInput | null
  }

  export type IntegrationSettingNullableRelationFilter = {
    is?: IntegrationSettingWhereInput | null
    isNot?: IntegrationSettingWhereInput | null
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InviteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaseEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type TenantRelationFilter = {
    is?: TenantWhereInput
    isNot?: TenantWhereInput
  }

  export type CaseParticipantUserListRelationFilter = {
    every?: CaseParticipantUserWhereInput
    some?: CaseParticipantUserWhereInput
    none?: CaseParticipantUserWhereInput
  }

  export type EmployeeNullableRelationFilter = {
    is?: EmployeeWhereInput | null
    isNot?: EmployeeWhereInput | null
  }

  export type ClientNullableRelationFilter = {
    is?: ClientWhereInput | null
    isNot?: ClientWhereInput | null
  }

  export type CaseParticipantUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    tenantId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    tenantId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    tenantId?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CaseParticipantClientListRelationFilter = {
    every?: CaseParticipantClientWhereInput
    some?: CaseParticipantClientWhereInput
    none?: CaseParticipantClientWhereInput
  }

  export type CaseParticipantClientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    userId?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    userId?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    userId?: SortOrder
  }

  export type EnumCaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStatusFilter<$PrismaModel> | $Enums.CaseStatus
  }

  export type CaseCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    lawyerPrimaryId?: SortOrder
    clientPrimaryId?: SortOrder
  }

  export type CaseMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    lawyerPrimaryId?: SortOrder
    clientPrimaryId?: SortOrder
  }

  export type CaseMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    lawyerPrimaryId?: SortOrder
    clientPrimaryId?: SortOrder
  }

  export type EnumCaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.CaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseStatusFilter<$PrismaModel>
    _max?: NestedEnumCaseStatusFilter<$PrismaModel>
  }

  export type EnumCaseParticipantUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseParticipantUserRole | EnumCaseParticipantUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.CaseParticipantUserRole[] | ListEnumCaseParticipantUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseParticipantUserRole[] | ListEnumCaseParticipantUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseParticipantUserRoleFilter<$PrismaModel> | $Enums.CaseParticipantUserRole
  }

  export type CaseRelationFilter = {
    is?: CaseWhereInput
    isNot?: CaseWhereInput
  }

  export type CaseParticipantUserCaseIdUserIdCompoundUniqueInput = {
    caseId: string
    userId: string
  }

  export type CaseParticipantUserCountOrderByAggregateInput = {
    caseId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseParticipantUserMaxOrderByAggregateInput = {
    caseId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseParticipantUserMinOrderByAggregateInput = {
    caseId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumCaseParticipantUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseParticipantUserRole | EnumCaseParticipantUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.CaseParticipantUserRole[] | ListEnumCaseParticipantUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseParticipantUserRole[] | ListEnumCaseParticipantUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseParticipantUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.CaseParticipantUserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseParticipantUserRoleFilter<$PrismaModel>
    _max?: NestedEnumCaseParticipantUserRoleFilter<$PrismaModel>
  }

  export type EnumCaseParticipantClientTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseParticipantClientType | EnumCaseParticipantClientTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CaseParticipantClientType[] | ListEnumCaseParticipantClientTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseParticipantClientType[] | ListEnumCaseParticipantClientTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseParticipantClientTypeFilter<$PrismaModel> | $Enums.CaseParticipantClientType
  }

  export type ClientRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type CaseParticipantClientCaseIdClientIdCompoundUniqueInput = {
    caseId: string
    clientId: string
  }

  export type CaseParticipantClientCountOrderByAggregateInput = {
    caseId?: SortOrder
    clientId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseParticipantClientMaxOrderByAggregateInput = {
    caseId?: SortOrder
    clientId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseParticipantClientMinOrderByAggregateInput = {
    caseId?: SortOrder
    clientId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumCaseParticipantClientTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseParticipantClientType | EnumCaseParticipantClientTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CaseParticipantClientType[] | ListEnumCaseParticipantClientTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseParticipantClientType[] | ListEnumCaseParticipantClientTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseParticipantClientTypeWithAggregatesFilter<$PrismaModel> | $Enums.CaseParticipantClientType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseParticipantClientTypeFilter<$PrismaModel>
    _max?: NestedEnumCaseParticipantClientTypeFilter<$PrismaModel>
  }

  export type CaseEventCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
    caseId?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
  }

  export type CaseEventMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
    caseId?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
  }

  export type CaseEventMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
    caseId?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    viewed?: SortOrder
    viewedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    tenantId?: SortOrder
    senderId?: SortOrder
    senderClientId?: SortOrder
    receiverClientId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    viewed?: SortOrder
    viewedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    tenantId?: SortOrder
    senderId?: SortOrder
    senderClientId?: SortOrder
    receiverClientId?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    viewed?: SortOrder
    viewedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    tenantId?: SortOrder
    senderId?: SortOrder
    senderClientId?: SortOrder
    receiverClientId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    uploadedAt?: SortOrder
    tenantId?: SortOrder
    caseId?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    uploadedAt?: SortOrder
    tenantId?: SortOrder
    caseId?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    uploadedAt?: SortOrder
    tenantId?: SortOrder
    caseId?: SortOrder
  }

  export type InviteCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    tenantId?: SortOrder
  }

  export type InviteMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    tenantId?: SortOrder
  }

  export type InviteMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseId?: SortOrder
    tenantId?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type GeneralSettingCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    theme?: SortOrder
    businessName?: SortOrder
    workingDays?: SortOrder
    workingHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeneralSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    theme?: SortOrder
    businessName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeneralSettingMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    theme?: SortOrder
    businessName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type NotificationSettingCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    app?: SortOrder
    newMessage?: SortOrder
    caseUpdate?: SortOrder
    newDocument?: SortOrder
    signatureRequest?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    app?: SortOrder
    newMessage?: SortOrder
    caseUpdate?: SortOrder
    newDocument?: SortOrder
    signatureRequest?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSettingMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    app?: SortOrder
    newMessage?: SortOrder
    caseUpdate?: SortOrder
    newDocument?: SortOrder
    signatureRequest?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type SecuritySettingCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    twoFAEnabled?: SortOrder
    autoLogoutMinutes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SecuritySettingAvgOrderByAggregateInput = {
    autoLogoutMinutes?: SortOrder
  }

  export type SecuritySettingMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    twoFAEnabled?: SortOrder
    autoLogoutMinutes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SecuritySettingMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    twoFAEnabled?: SortOrder
    autoLogoutMinutes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SecuritySettingSumOrderByAggregateInput = {
    autoLogoutMinutes?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BillingSettingCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    plan?: SortOrder
    nextCharge?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    plan?: SortOrder
    nextCharge?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingSettingMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    plan?: SortOrder
    nextCharge?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntegrationSettingCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    d4signConnected?: SortOrder
    smtpConfigured?: SortOrder
    googleCalendarLinked?: SortOrder
    webhookUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntegrationSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    d4signConnected?: SortOrder
    smtpConfigured?: SortOrder
    googleCalendarLinked?: SortOrder
    webhookUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntegrationSettingMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    d4signConnected?: SortOrder
    smtpConfigured?: SortOrder
    googleCalendarLinked?: SortOrder
    webhookUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumEmployeeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStatus | EnumEmployeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmployeeStatusFilter<$PrismaModel> | $Enums.EmployeeStatus
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    status?: SortOrder
    invitedAt?: SortOrder
    acceptedAt?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    status?: SortOrder
    invitedAt?: SortOrder
    acceptedAt?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    status?: SortOrder
    invitedAt?: SortOrder
    acceptedAt?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumEmployeeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStatus | EnumEmployeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmployeeStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmployeeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmployeeStatusFilter<$PrismaModel>
    _max?: NestedEnumEmployeeStatusFilter<$PrismaModel>
  }

  export type UserPermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserPermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutPermissionInput | UserPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutPermissionInput | UserPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutPermissionInput | UserPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutPermissionInput | UserPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutPermissionInput | UserPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutPermissionInput | UserPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserPermissionsInput = {
    create?: XOR<UserCreateWithoutUserPermissionsInput, UserUncheckedCreateWithoutUserPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserPermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutUserPermissionsInput = {
    create?: XOR<PermissionCreateWithoutUserPermissionsInput, PermissionUncheckedCreateWithoutUserPermissionsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutUserPermissionsInput
    connect?: PermissionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutUserPermissionsInput, UserUncheckedCreateWithoutUserPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserPermissionsInput
    upsert?: UserUpsertWithoutUserPermissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserPermissionsInput, UserUpdateWithoutUserPermissionsInput>, UserUncheckedUpdateWithoutUserPermissionsInput>
  }

  export type PermissionUpdateOneRequiredWithoutUserPermissionsNestedInput = {
    create?: XOR<PermissionCreateWithoutUserPermissionsInput, PermissionUncheckedCreateWithoutUserPermissionsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutUserPermissionsInput
    upsert?: PermissionUpsertWithoutUserPermissionsInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutUserPermissionsInput, PermissionUpdateWithoutUserPermissionsInput>, PermissionUncheckedUpdateWithoutUserPermissionsInput>
  }

  export type UserCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ClientCreateNestedManyWithoutTenantInput = {
    create?: XOR<ClientCreateWithoutTenantInput, ClientUncheckedCreateWithoutTenantInput> | ClientCreateWithoutTenantInput[] | ClientUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutTenantInput | ClientCreateOrConnectWithoutTenantInput[]
    createMany?: ClientCreateManyTenantInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type CaseCreateNestedManyWithoutTenantInput = {
    create?: XOR<CaseCreateWithoutTenantInput, CaseUncheckedCreateWithoutTenantInput> | CaseCreateWithoutTenantInput[] | CaseUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutTenantInput | CaseCreateOrConnectWithoutTenantInput[]
    createMany?: CaseCreateManyTenantInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutTenantInput = {
    create?: XOR<MessageCreateWithoutTenantInput, MessageUncheckedCreateWithoutTenantInput> | MessageCreateWithoutTenantInput[] | MessageUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutTenantInput | MessageCreateOrConnectWithoutTenantInput[]
    createMany?: MessageCreateManyTenantInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutTenantInput = {
    create?: XOR<FileCreateWithoutTenantInput, FileUncheckedCreateWithoutTenantInput> | FileCreateWithoutTenantInput[] | FileUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FileCreateOrConnectWithoutTenantInput | FileCreateOrConnectWithoutTenantInput[]
    createMany?: FileCreateManyTenantInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type InviteCreateNestedManyWithoutTenantInput = {
    create?: XOR<InviteCreateWithoutTenantInput, InviteUncheckedCreateWithoutTenantInput> | InviteCreateWithoutTenantInput[] | InviteUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutTenantInput | InviteCreateOrConnectWithoutTenantInput[]
    createMany?: InviteCreateManyTenantInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type CaseEventCreateNestedManyWithoutTenantInput = {
    create?: XOR<CaseEventCreateWithoutTenantInput, CaseEventUncheckedCreateWithoutTenantInput> | CaseEventCreateWithoutTenantInput[] | CaseEventUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CaseEventCreateOrConnectWithoutTenantInput | CaseEventCreateOrConnectWithoutTenantInput[]
    createMany?: CaseEventCreateManyTenantInputEnvelope
    connect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
  }

  export type GeneralSettingCreateNestedOneWithoutTenantInput = {
    create?: XOR<GeneralSettingCreateWithoutTenantInput, GeneralSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: GeneralSettingCreateOrConnectWithoutTenantInput
    connect?: GeneralSettingWhereUniqueInput
  }

  export type NotificationSettingCreateNestedOneWithoutTenantInput = {
    create?: XOR<NotificationSettingCreateWithoutTenantInput, NotificationSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: NotificationSettingCreateOrConnectWithoutTenantInput
    connect?: NotificationSettingWhereUniqueInput
  }

  export type SecuritySettingCreateNestedOneWithoutTenantInput = {
    create?: XOR<SecuritySettingCreateWithoutTenantInput, SecuritySettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: SecuritySettingCreateOrConnectWithoutTenantInput
    connect?: SecuritySettingWhereUniqueInput
  }

  export type BillingSettingCreateNestedOneWithoutTenantInput = {
    create?: XOR<BillingSettingCreateWithoutTenantInput, BillingSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: BillingSettingCreateOrConnectWithoutTenantInput
    connect?: BillingSettingWhereUniqueInput
  }

  export type IntegrationSettingCreateNestedOneWithoutTenantInput = {
    create?: XOR<IntegrationSettingCreateWithoutTenantInput, IntegrationSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: IntegrationSettingCreateOrConnectWithoutTenantInput
    connect?: IntegrationSettingWhereUniqueInput
  }

  export type EmployeeCreateNestedManyWithoutTenantInput = {
    create?: XOR<EmployeeCreateWithoutTenantInput, EmployeeUncheckedCreateWithoutTenantInput> | EmployeeCreateWithoutTenantInput[] | EmployeeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTenantInput | EmployeeCreateOrConnectWithoutTenantInput[]
    createMany?: EmployeeCreateManyTenantInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ClientUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<ClientCreateWithoutTenantInput, ClientUncheckedCreateWithoutTenantInput> | ClientCreateWithoutTenantInput[] | ClientUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutTenantInput | ClientCreateOrConnectWithoutTenantInput[]
    createMany?: ClientCreateManyTenantInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type CaseUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<CaseCreateWithoutTenantInput, CaseUncheckedCreateWithoutTenantInput> | CaseCreateWithoutTenantInput[] | CaseUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutTenantInput | CaseCreateOrConnectWithoutTenantInput[]
    createMany?: CaseCreateManyTenantInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<MessageCreateWithoutTenantInput, MessageUncheckedCreateWithoutTenantInput> | MessageCreateWithoutTenantInput[] | MessageUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutTenantInput | MessageCreateOrConnectWithoutTenantInput[]
    createMany?: MessageCreateManyTenantInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<FileCreateWithoutTenantInput, FileUncheckedCreateWithoutTenantInput> | FileCreateWithoutTenantInput[] | FileUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FileCreateOrConnectWithoutTenantInput | FileCreateOrConnectWithoutTenantInput[]
    createMany?: FileCreateManyTenantInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type InviteUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<InviteCreateWithoutTenantInput, InviteUncheckedCreateWithoutTenantInput> | InviteCreateWithoutTenantInput[] | InviteUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutTenantInput | InviteCreateOrConnectWithoutTenantInput[]
    createMany?: InviteCreateManyTenantInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type CaseEventUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<CaseEventCreateWithoutTenantInput, CaseEventUncheckedCreateWithoutTenantInput> | CaseEventCreateWithoutTenantInput[] | CaseEventUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CaseEventCreateOrConnectWithoutTenantInput | CaseEventCreateOrConnectWithoutTenantInput[]
    createMany?: CaseEventCreateManyTenantInputEnvelope
    connect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
  }

  export type GeneralSettingUncheckedCreateNestedOneWithoutTenantInput = {
    create?: XOR<GeneralSettingCreateWithoutTenantInput, GeneralSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: GeneralSettingCreateOrConnectWithoutTenantInput
    connect?: GeneralSettingWhereUniqueInput
  }

  export type NotificationSettingUncheckedCreateNestedOneWithoutTenantInput = {
    create?: XOR<NotificationSettingCreateWithoutTenantInput, NotificationSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: NotificationSettingCreateOrConnectWithoutTenantInput
    connect?: NotificationSettingWhereUniqueInput
  }

  export type SecuritySettingUncheckedCreateNestedOneWithoutTenantInput = {
    create?: XOR<SecuritySettingCreateWithoutTenantInput, SecuritySettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: SecuritySettingCreateOrConnectWithoutTenantInput
    connect?: SecuritySettingWhereUniqueInput
  }

  export type BillingSettingUncheckedCreateNestedOneWithoutTenantInput = {
    create?: XOR<BillingSettingCreateWithoutTenantInput, BillingSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: BillingSettingCreateOrConnectWithoutTenantInput
    connect?: BillingSettingWhereUniqueInput
  }

  export type IntegrationSettingUncheckedCreateNestedOneWithoutTenantInput = {
    create?: XOR<IntegrationSettingCreateWithoutTenantInput, IntegrationSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: IntegrationSettingCreateOrConnectWithoutTenantInput
    connect?: IntegrationSettingWhereUniqueInput
  }

  export type EmployeeUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<EmployeeCreateWithoutTenantInput, EmployeeUncheckedCreateWithoutTenantInput> | EmployeeCreateWithoutTenantInput[] | EmployeeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTenantInput | EmployeeCreateOrConnectWithoutTenantInput[]
    createMany?: EmployeeCreateManyTenantInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ClientUpdateManyWithoutTenantNestedInput = {
    create?: XOR<ClientCreateWithoutTenantInput, ClientUncheckedCreateWithoutTenantInput> | ClientCreateWithoutTenantInput[] | ClientUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutTenantInput | ClientCreateOrConnectWithoutTenantInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutTenantInput | ClientUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: ClientCreateManyTenantInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutTenantInput | ClientUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutTenantInput | ClientUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type CaseUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CaseCreateWithoutTenantInput, CaseUncheckedCreateWithoutTenantInput> | CaseCreateWithoutTenantInput[] | CaseUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutTenantInput | CaseCreateOrConnectWithoutTenantInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutTenantInput | CaseUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CaseCreateManyTenantInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutTenantInput | CaseUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutTenantInput | CaseUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutTenantNestedInput = {
    create?: XOR<MessageCreateWithoutTenantInput, MessageUncheckedCreateWithoutTenantInput> | MessageCreateWithoutTenantInput[] | MessageUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutTenantInput | MessageCreateOrConnectWithoutTenantInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutTenantInput | MessageUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: MessageCreateManyTenantInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutTenantInput | MessageUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutTenantInput | MessageUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type FileUpdateManyWithoutTenantNestedInput = {
    create?: XOR<FileCreateWithoutTenantInput, FileUncheckedCreateWithoutTenantInput> | FileCreateWithoutTenantInput[] | FileUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FileCreateOrConnectWithoutTenantInput | FileCreateOrConnectWithoutTenantInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutTenantInput | FileUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: FileCreateManyTenantInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutTenantInput | FileUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: FileUpdateManyWithWhereWithoutTenantInput | FileUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type InviteUpdateManyWithoutTenantNestedInput = {
    create?: XOR<InviteCreateWithoutTenantInput, InviteUncheckedCreateWithoutTenantInput> | InviteCreateWithoutTenantInput[] | InviteUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutTenantInput | InviteCreateOrConnectWithoutTenantInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutTenantInput | InviteUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: InviteCreateManyTenantInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutTenantInput | InviteUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutTenantInput | InviteUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type CaseEventUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CaseEventCreateWithoutTenantInput, CaseEventUncheckedCreateWithoutTenantInput> | CaseEventCreateWithoutTenantInput[] | CaseEventUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CaseEventCreateOrConnectWithoutTenantInput | CaseEventCreateOrConnectWithoutTenantInput[]
    upsert?: CaseEventUpsertWithWhereUniqueWithoutTenantInput | CaseEventUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CaseEventCreateManyTenantInputEnvelope
    set?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    disconnect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    delete?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    connect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    update?: CaseEventUpdateWithWhereUniqueWithoutTenantInput | CaseEventUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CaseEventUpdateManyWithWhereWithoutTenantInput | CaseEventUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CaseEventScalarWhereInput | CaseEventScalarWhereInput[]
  }

  export type GeneralSettingUpdateOneWithoutTenantNestedInput = {
    create?: XOR<GeneralSettingCreateWithoutTenantInput, GeneralSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: GeneralSettingCreateOrConnectWithoutTenantInput
    upsert?: GeneralSettingUpsertWithoutTenantInput
    disconnect?: GeneralSettingWhereInput | boolean
    delete?: GeneralSettingWhereInput | boolean
    connect?: GeneralSettingWhereUniqueInput
    update?: XOR<XOR<GeneralSettingUpdateToOneWithWhereWithoutTenantInput, GeneralSettingUpdateWithoutTenantInput>, GeneralSettingUncheckedUpdateWithoutTenantInput>
  }

  export type NotificationSettingUpdateOneWithoutTenantNestedInput = {
    create?: XOR<NotificationSettingCreateWithoutTenantInput, NotificationSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: NotificationSettingCreateOrConnectWithoutTenantInput
    upsert?: NotificationSettingUpsertWithoutTenantInput
    disconnect?: NotificationSettingWhereInput | boolean
    delete?: NotificationSettingWhereInput | boolean
    connect?: NotificationSettingWhereUniqueInput
    update?: XOR<XOR<NotificationSettingUpdateToOneWithWhereWithoutTenantInput, NotificationSettingUpdateWithoutTenantInput>, NotificationSettingUncheckedUpdateWithoutTenantInput>
  }

  export type SecuritySettingUpdateOneWithoutTenantNestedInput = {
    create?: XOR<SecuritySettingCreateWithoutTenantInput, SecuritySettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: SecuritySettingCreateOrConnectWithoutTenantInput
    upsert?: SecuritySettingUpsertWithoutTenantInput
    disconnect?: SecuritySettingWhereInput | boolean
    delete?: SecuritySettingWhereInput | boolean
    connect?: SecuritySettingWhereUniqueInput
    update?: XOR<XOR<SecuritySettingUpdateToOneWithWhereWithoutTenantInput, SecuritySettingUpdateWithoutTenantInput>, SecuritySettingUncheckedUpdateWithoutTenantInput>
  }

  export type BillingSettingUpdateOneWithoutTenantNestedInput = {
    create?: XOR<BillingSettingCreateWithoutTenantInput, BillingSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: BillingSettingCreateOrConnectWithoutTenantInput
    upsert?: BillingSettingUpsertWithoutTenantInput
    disconnect?: BillingSettingWhereInput | boolean
    delete?: BillingSettingWhereInput | boolean
    connect?: BillingSettingWhereUniqueInput
    update?: XOR<XOR<BillingSettingUpdateToOneWithWhereWithoutTenantInput, BillingSettingUpdateWithoutTenantInput>, BillingSettingUncheckedUpdateWithoutTenantInput>
  }

  export type IntegrationSettingUpdateOneWithoutTenantNestedInput = {
    create?: XOR<IntegrationSettingCreateWithoutTenantInput, IntegrationSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: IntegrationSettingCreateOrConnectWithoutTenantInput
    upsert?: IntegrationSettingUpsertWithoutTenantInput
    disconnect?: IntegrationSettingWhereInput | boolean
    delete?: IntegrationSettingWhereInput | boolean
    connect?: IntegrationSettingWhereUniqueInput
    update?: XOR<XOR<IntegrationSettingUpdateToOneWithWhereWithoutTenantInput, IntegrationSettingUpdateWithoutTenantInput>, IntegrationSettingUncheckedUpdateWithoutTenantInput>
  }

  export type EmployeeUpdateManyWithoutTenantNestedInput = {
    create?: XOR<EmployeeCreateWithoutTenantInput, EmployeeUncheckedCreateWithoutTenantInput> | EmployeeCreateWithoutTenantInput[] | EmployeeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTenantInput | EmployeeCreateOrConnectWithoutTenantInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutTenantInput | EmployeeUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: EmployeeCreateManyTenantInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutTenantInput | EmployeeUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutTenantInput | EmployeeUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ClientUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<ClientCreateWithoutTenantInput, ClientUncheckedCreateWithoutTenantInput> | ClientCreateWithoutTenantInput[] | ClientUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutTenantInput | ClientCreateOrConnectWithoutTenantInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutTenantInput | ClientUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: ClientCreateManyTenantInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutTenantInput | ClientUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutTenantInput | ClientUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type CaseUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CaseCreateWithoutTenantInput, CaseUncheckedCreateWithoutTenantInput> | CaseCreateWithoutTenantInput[] | CaseUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutTenantInput | CaseCreateOrConnectWithoutTenantInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutTenantInput | CaseUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CaseCreateManyTenantInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutTenantInput | CaseUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutTenantInput | CaseUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<MessageCreateWithoutTenantInput, MessageUncheckedCreateWithoutTenantInput> | MessageCreateWithoutTenantInput[] | MessageUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutTenantInput | MessageCreateOrConnectWithoutTenantInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutTenantInput | MessageUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: MessageCreateManyTenantInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutTenantInput | MessageUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutTenantInput | MessageUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<FileCreateWithoutTenantInput, FileUncheckedCreateWithoutTenantInput> | FileCreateWithoutTenantInput[] | FileUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FileCreateOrConnectWithoutTenantInput | FileCreateOrConnectWithoutTenantInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutTenantInput | FileUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: FileCreateManyTenantInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutTenantInput | FileUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: FileUpdateManyWithWhereWithoutTenantInput | FileUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type InviteUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<InviteCreateWithoutTenantInput, InviteUncheckedCreateWithoutTenantInput> | InviteCreateWithoutTenantInput[] | InviteUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutTenantInput | InviteCreateOrConnectWithoutTenantInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutTenantInput | InviteUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: InviteCreateManyTenantInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutTenantInput | InviteUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutTenantInput | InviteUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type CaseEventUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CaseEventCreateWithoutTenantInput, CaseEventUncheckedCreateWithoutTenantInput> | CaseEventCreateWithoutTenantInput[] | CaseEventUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CaseEventCreateOrConnectWithoutTenantInput | CaseEventCreateOrConnectWithoutTenantInput[]
    upsert?: CaseEventUpsertWithWhereUniqueWithoutTenantInput | CaseEventUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CaseEventCreateManyTenantInputEnvelope
    set?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    disconnect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    delete?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    connect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    update?: CaseEventUpdateWithWhereUniqueWithoutTenantInput | CaseEventUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CaseEventUpdateManyWithWhereWithoutTenantInput | CaseEventUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CaseEventScalarWhereInput | CaseEventScalarWhereInput[]
  }

  export type GeneralSettingUncheckedUpdateOneWithoutTenantNestedInput = {
    create?: XOR<GeneralSettingCreateWithoutTenantInput, GeneralSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: GeneralSettingCreateOrConnectWithoutTenantInput
    upsert?: GeneralSettingUpsertWithoutTenantInput
    disconnect?: GeneralSettingWhereInput | boolean
    delete?: GeneralSettingWhereInput | boolean
    connect?: GeneralSettingWhereUniqueInput
    update?: XOR<XOR<GeneralSettingUpdateToOneWithWhereWithoutTenantInput, GeneralSettingUpdateWithoutTenantInput>, GeneralSettingUncheckedUpdateWithoutTenantInput>
  }

  export type NotificationSettingUncheckedUpdateOneWithoutTenantNestedInput = {
    create?: XOR<NotificationSettingCreateWithoutTenantInput, NotificationSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: NotificationSettingCreateOrConnectWithoutTenantInput
    upsert?: NotificationSettingUpsertWithoutTenantInput
    disconnect?: NotificationSettingWhereInput | boolean
    delete?: NotificationSettingWhereInput | boolean
    connect?: NotificationSettingWhereUniqueInput
    update?: XOR<XOR<NotificationSettingUpdateToOneWithWhereWithoutTenantInput, NotificationSettingUpdateWithoutTenantInput>, NotificationSettingUncheckedUpdateWithoutTenantInput>
  }

  export type SecuritySettingUncheckedUpdateOneWithoutTenantNestedInput = {
    create?: XOR<SecuritySettingCreateWithoutTenantInput, SecuritySettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: SecuritySettingCreateOrConnectWithoutTenantInput
    upsert?: SecuritySettingUpsertWithoutTenantInput
    disconnect?: SecuritySettingWhereInput | boolean
    delete?: SecuritySettingWhereInput | boolean
    connect?: SecuritySettingWhereUniqueInput
    update?: XOR<XOR<SecuritySettingUpdateToOneWithWhereWithoutTenantInput, SecuritySettingUpdateWithoutTenantInput>, SecuritySettingUncheckedUpdateWithoutTenantInput>
  }

  export type BillingSettingUncheckedUpdateOneWithoutTenantNestedInput = {
    create?: XOR<BillingSettingCreateWithoutTenantInput, BillingSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: BillingSettingCreateOrConnectWithoutTenantInput
    upsert?: BillingSettingUpsertWithoutTenantInput
    disconnect?: BillingSettingWhereInput | boolean
    delete?: BillingSettingWhereInput | boolean
    connect?: BillingSettingWhereUniqueInput
    update?: XOR<XOR<BillingSettingUpdateToOneWithWhereWithoutTenantInput, BillingSettingUpdateWithoutTenantInput>, BillingSettingUncheckedUpdateWithoutTenantInput>
  }

  export type IntegrationSettingUncheckedUpdateOneWithoutTenantNestedInput = {
    create?: XOR<IntegrationSettingCreateWithoutTenantInput, IntegrationSettingUncheckedCreateWithoutTenantInput>
    connectOrCreate?: IntegrationSettingCreateOrConnectWithoutTenantInput
    upsert?: IntegrationSettingUpsertWithoutTenantInput
    disconnect?: IntegrationSettingWhereInput | boolean
    delete?: IntegrationSettingWhereInput | boolean
    connect?: IntegrationSettingWhereUniqueInput
    update?: XOR<XOR<IntegrationSettingUpdateToOneWithWhereWithoutTenantInput, IntegrationSettingUpdateWithoutTenantInput>, IntegrationSettingUncheckedUpdateWithoutTenantInput>
  }

  export type EmployeeUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<EmployeeCreateWithoutTenantInput, EmployeeUncheckedCreateWithoutTenantInput> | EmployeeCreateWithoutTenantInput[] | EmployeeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTenantInput | EmployeeCreateOrConnectWithoutTenantInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutTenantInput | EmployeeUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: EmployeeCreateManyTenantInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutTenantInput | EmployeeUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutTenantInput | EmployeeUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutUsersInput = {
    create?: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUsersInput
    connect?: TenantWhereUniqueInput
  }

  export type CaseCreateNestedManyWithoutLawyerPrimaryInput = {
    create?: XOR<CaseCreateWithoutLawyerPrimaryInput, CaseUncheckedCreateWithoutLawyerPrimaryInput> | CaseCreateWithoutLawyerPrimaryInput[] | CaseUncheckedCreateWithoutLawyerPrimaryInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutLawyerPrimaryInput | CaseCreateOrConnectWithoutLawyerPrimaryInput[]
    createMany?: CaseCreateManyLawyerPrimaryInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type CaseParticipantUserCreateNestedManyWithoutUserInput = {
    create?: XOR<CaseParticipantUserCreateWithoutUserInput, CaseParticipantUserUncheckedCreateWithoutUserInput> | CaseParticipantUserCreateWithoutUserInput[] | CaseParticipantUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseParticipantUserCreateOrConnectWithoutUserInput | CaseParticipantUserCreateOrConnectWithoutUserInput[]
    createMany?: CaseParticipantUserCreateManyUserInputEnvelope
    connect?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
  }

  export type CaseEventCreateNestedManyWithoutUserInput = {
    create?: XOR<CaseEventCreateWithoutUserInput, CaseEventUncheckedCreateWithoutUserInput> | CaseEventCreateWithoutUserInput[] | CaseEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseEventCreateOrConnectWithoutUserInput | CaseEventCreateOrConnectWithoutUserInput[]
    createMany?: CaseEventCreateManyUserInputEnvelope
    connect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
  }

  export type UserPermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    connect?: EmployeeWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutUserInput = {
    create?: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput>
    connectOrCreate?: ClientCreateOrConnectWithoutUserInput
    connect?: ClientWhereUniqueInput
  }

  export type CaseUncheckedCreateNestedManyWithoutLawyerPrimaryInput = {
    create?: XOR<CaseCreateWithoutLawyerPrimaryInput, CaseUncheckedCreateWithoutLawyerPrimaryInput> | CaseCreateWithoutLawyerPrimaryInput[] | CaseUncheckedCreateWithoutLawyerPrimaryInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutLawyerPrimaryInput | CaseCreateOrConnectWithoutLawyerPrimaryInput[]
    createMany?: CaseCreateManyLawyerPrimaryInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type CaseParticipantUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CaseParticipantUserCreateWithoutUserInput, CaseParticipantUserUncheckedCreateWithoutUserInput> | CaseParticipantUserCreateWithoutUserInput[] | CaseParticipantUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseParticipantUserCreateOrConnectWithoutUserInput | CaseParticipantUserCreateOrConnectWithoutUserInput[]
    createMany?: CaseParticipantUserCreateManyUserInputEnvelope
    connect?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
  }

  export type CaseEventUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CaseEventCreateWithoutUserInput, CaseEventUncheckedCreateWithoutUserInput> | CaseEventCreateWithoutUserInput[] | CaseEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseEventCreateOrConnectWithoutUserInput | CaseEventCreateOrConnectWithoutUserInput[]
    createMany?: CaseEventCreateManyUserInputEnvelope
    connect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    connect?: EmployeeWhereUniqueInput
  }

  export type ClientUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput>
    connectOrCreate?: ClientCreateOrConnectWithoutUserInput
    connect?: ClientWhereUniqueInput
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type TenantUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUsersInput
    upsert?: TenantUpsertWithoutUsersInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutUsersInput, TenantUpdateWithoutUsersInput>, TenantUncheckedUpdateWithoutUsersInput>
  }

  export type CaseUpdateManyWithoutLawyerPrimaryNestedInput = {
    create?: XOR<CaseCreateWithoutLawyerPrimaryInput, CaseUncheckedCreateWithoutLawyerPrimaryInput> | CaseCreateWithoutLawyerPrimaryInput[] | CaseUncheckedCreateWithoutLawyerPrimaryInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutLawyerPrimaryInput | CaseCreateOrConnectWithoutLawyerPrimaryInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutLawyerPrimaryInput | CaseUpsertWithWhereUniqueWithoutLawyerPrimaryInput[]
    createMany?: CaseCreateManyLawyerPrimaryInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutLawyerPrimaryInput | CaseUpdateWithWhereUniqueWithoutLawyerPrimaryInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutLawyerPrimaryInput | CaseUpdateManyWithWhereWithoutLawyerPrimaryInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type CaseParticipantUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<CaseParticipantUserCreateWithoutUserInput, CaseParticipantUserUncheckedCreateWithoutUserInput> | CaseParticipantUserCreateWithoutUserInput[] | CaseParticipantUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseParticipantUserCreateOrConnectWithoutUserInput | CaseParticipantUserCreateOrConnectWithoutUserInput[]
    upsert?: CaseParticipantUserUpsertWithWhereUniqueWithoutUserInput | CaseParticipantUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CaseParticipantUserCreateManyUserInputEnvelope
    set?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    disconnect?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    delete?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    connect?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    update?: CaseParticipantUserUpdateWithWhereUniqueWithoutUserInput | CaseParticipantUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CaseParticipantUserUpdateManyWithWhereWithoutUserInput | CaseParticipantUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CaseParticipantUserScalarWhereInput | CaseParticipantUserScalarWhereInput[]
  }

  export type CaseEventUpdateManyWithoutUserNestedInput = {
    create?: XOR<CaseEventCreateWithoutUserInput, CaseEventUncheckedCreateWithoutUserInput> | CaseEventCreateWithoutUserInput[] | CaseEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseEventCreateOrConnectWithoutUserInput | CaseEventCreateOrConnectWithoutUserInput[]
    upsert?: CaseEventUpsertWithWhereUniqueWithoutUserInput | CaseEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CaseEventCreateManyUserInputEnvelope
    set?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    disconnect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    delete?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    connect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    update?: CaseEventUpdateWithWhereUniqueWithoutUserInput | CaseEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CaseEventUpdateManyWithWhereWithoutUserInput | CaseEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CaseEventScalarWhereInput | CaseEventScalarWhereInput[]
  }

  export type UserPermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type EmployeeUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    upsert?: EmployeeUpsertWithoutUserInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUserInput, EmployeeUpdateWithoutUserInput>, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type ClientUpdateOneWithoutUserNestedInput = {
    create?: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput>
    connectOrCreate?: ClientCreateOrConnectWithoutUserInput
    upsert?: ClientUpsertWithoutUserInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutUserInput, ClientUpdateWithoutUserInput>, ClientUncheckedUpdateWithoutUserInput>
  }

  export type CaseUncheckedUpdateManyWithoutLawyerPrimaryNestedInput = {
    create?: XOR<CaseCreateWithoutLawyerPrimaryInput, CaseUncheckedCreateWithoutLawyerPrimaryInput> | CaseCreateWithoutLawyerPrimaryInput[] | CaseUncheckedCreateWithoutLawyerPrimaryInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutLawyerPrimaryInput | CaseCreateOrConnectWithoutLawyerPrimaryInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutLawyerPrimaryInput | CaseUpsertWithWhereUniqueWithoutLawyerPrimaryInput[]
    createMany?: CaseCreateManyLawyerPrimaryInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutLawyerPrimaryInput | CaseUpdateWithWhereUniqueWithoutLawyerPrimaryInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutLawyerPrimaryInput | CaseUpdateManyWithWhereWithoutLawyerPrimaryInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type CaseParticipantUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CaseParticipantUserCreateWithoutUserInput, CaseParticipantUserUncheckedCreateWithoutUserInput> | CaseParticipantUserCreateWithoutUserInput[] | CaseParticipantUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseParticipantUserCreateOrConnectWithoutUserInput | CaseParticipantUserCreateOrConnectWithoutUserInput[]
    upsert?: CaseParticipantUserUpsertWithWhereUniqueWithoutUserInput | CaseParticipantUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CaseParticipantUserCreateManyUserInputEnvelope
    set?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    disconnect?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    delete?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    connect?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    update?: CaseParticipantUserUpdateWithWhereUniqueWithoutUserInput | CaseParticipantUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CaseParticipantUserUpdateManyWithWhereWithoutUserInput | CaseParticipantUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CaseParticipantUserScalarWhereInput | CaseParticipantUserScalarWhereInput[]
  }

  export type CaseEventUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CaseEventCreateWithoutUserInput, CaseEventUncheckedCreateWithoutUserInput> | CaseEventCreateWithoutUserInput[] | CaseEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CaseEventCreateOrConnectWithoutUserInput | CaseEventCreateOrConnectWithoutUserInput[]
    upsert?: CaseEventUpsertWithWhereUniqueWithoutUserInput | CaseEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CaseEventCreateManyUserInputEnvelope
    set?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    disconnect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    delete?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    connect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    update?: CaseEventUpdateWithWhereUniqueWithoutUserInput | CaseEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CaseEventUpdateManyWithWhereWithoutUserInput | CaseEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CaseEventScalarWhereInput | CaseEventScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    upsert?: EmployeeUpsertWithoutUserInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUserInput, EmployeeUpdateWithoutUserInput>, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type ClientUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput>
    connectOrCreate?: ClientCreateOrConnectWithoutUserInput
    upsert?: ClientUpsertWithoutUserInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutUserInput, ClientUpdateWithoutUserInput>, ClientUncheckedUpdateWithoutUserInput>
  }

  export type TenantCreateNestedOneWithoutClientsInput = {
    create?: XOR<TenantCreateWithoutClientsInput, TenantUncheckedCreateWithoutClientsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutClientsInput
    connect?: TenantWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutClientInput = {
    create?: XOR<UserCreateWithoutClientInput, UserUncheckedCreateWithoutClientInput>
    connectOrCreate?: UserCreateOrConnectWithoutClientInput
    connect?: UserWhereUniqueInput
  }

  export type CaseCreateNestedManyWithoutClientPrimaryInput = {
    create?: XOR<CaseCreateWithoutClientPrimaryInput, CaseUncheckedCreateWithoutClientPrimaryInput> | CaseCreateWithoutClientPrimaryInput[] | CaseUncheckedCreateWithoutClientPrimaryInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutClientPrimaryInput | CaseCreateOrConnectWithoutClientPrimaryInput[]
    createMany?: CaseCreateManyClientPrimaryInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutReceiverClientInput = {
    create?: XOR<MessageCreateWithoutReceiverClientInput, MessageUncheckedCreateWithoutReceiverClientInput> | MessageCreateWithoutReceiverClientInput[] | MessageUncheckedCreateWithoutReceiverClientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverClientInput | MessageCreateOrConnectWithoutReceiverClientInput[]
    createMany?: MessageCreateManyReceiverClientInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderClientInput = {
    create?: XOR<MessageCreateWithoutSenderClientInput, MessageUncheckedCreateWithoutSenderClientInput> | MessageCreateWithoutSenderClientInput[] | MessageUncheckedCreateWithoutSenderClientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderClientInput | MessageCreateOrConnectWithoutSenderClientInput[]
    createMany?: MessageCreateManySenderClientInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type CaseParticipantClientCreateNestedManyWithoutClientInput = {
    create?: XOR<CaseParticipantClientCreateWithoutClientInput, CaseParticipantClientUncheckedCreateWithoutClientInput> | CaseParticipantClientCreateWithoutClientInput[] | CaseParticipantClientUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CaseParticipantClientCreateOrConnectWithoutClientInput | CaseParticipantClientCreateOrConnectWithoutClientInput[]
    createMany?: CaseParticipantClientCreateManyClientInputEnvelope
    connect?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
  }

  export type CaseUncheckedCreateNestedManyWithoutClientPrimaryInput = {
    create?: XOR<CaseCreateWithoutClientPrimaryInput, CaseUncheckedCreateWithoutClientPrimaryInput> | CaseCreateWithoutClientPrimaryInput[] | CaseUncheckedCreateWithoutClientPrimaryInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutClientPrimaryInput | CaseCreateOrConnectWithoutClientPrimaryInput[]
    createMany?: CaseCreateManyClientPrimaryInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReceiverClientInput = {
    create?: XOR<MessageCreateWithoutReceiverClientInput, MessageUncheckedCreateWithoutReceiverClientInput> | MessageCreateWithoutReceiverClientInput[] | MessageUncheckedCreateWithoutReceiverClientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverClientInput | MessageCreateOrConnectWithoutReceiverClientInput[]
    createMany?: MessageCreateManyReceiverClientInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderClientInput = {
    create?: XOR<MessageCreateWithoutSenderClientInput, MessageUncheckedCreateWithoutSenderClientInput> | MessageCreateWithoutSenderClientInput[] | MessageUncheckedCreateWithoutSenderClientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderClientInput | MessageCreateOrConnectWithoutSenderClientInput[]
    createMany?: MessageCreateManySenderClientInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type CaseParticipantClientUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<CaseParticipantClientCreateWithoutClientInput, CaseParticipantClientUncheckedCreateWithoutClientInput> | CaseParticipantClientCreateWithoutClientInput[] | CaseParticipantClientUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CaseParticipantClientCreateOrConnectWithoutClientInput | CaseParticipantClientCreateOrConnectWithoutClientInput[]
    createMany?: CaseParticipantClientCreateManyClientInputEnvelope
    connect?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
  }

  export type TenantUpdateOneRequiredWithoutClientsNestedInput = {
    create?: XOR<TenantCreateWithoutClientsInput, TenantUncheckedCreateWithoutClientsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutClientsInput
    upsert?: TenantUpsertWithoutClientsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutClientsInput, TenantUpdateWithoutClientsInput>, TenantUncheckedUpdateWithoutClientsInput>
  }

  export type UserUpdateOneWithoutClientNestedInput = {
    create?: XOR<UserCreateWithoutClientInput, UserUncheckedCreateWithoutClientInput>
    connectOrCreate?: UserCreateOrConnectWithoutClientInput
    upsert?: UserUpsertWithoutClientInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutClientInput, UserUpdateWithoutClientInput>, UserUncheckedUpdateWithoutClientInput>
  }

  export type CaseUpdateManyWithoutClientPrimaryNestedInput = {
    create?: XOR<CaseCreateWithoutClientPrimaryInput, CaseUncheckedCreateWithoutClientPrimaryInput> | CaseCreateWithoutClientPrimaryInput[] | CaseUncheckedCreateWithoutClientPrimaryInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutClientPrimaryInput | CaseCreateOrConnectWithoutClientPrimaryInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutClientPrimaryInput | CaseUpsertWithWhereUniqueWithoutClientPrimaryInput[]
    createMany?: CaseCreateManyClientPrimaryInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutClientPrimaryInput | CaseUpdateWithWhereUniqueWithoutClientPrimaryInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutClientPrimaryInput | CaseUpdateManyWithWhereWithoutClientPrimaryInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutReceiverClientNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverClientInput, MessageUncheckedCreateWithoutReceiverClientInput> | MessageCreateWithoutReceiverClientInput[] | MessageUncheckedCreateWithoutReceiverClientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverClientInput | MessageCreateOrConnectWithoutReceiverClientInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverClientInput | MessageUpsertWithWhereUniqueWithoutReceiverClientInput[]
    createMany?: MessageCreateManyReceiverClientInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverClientInput | MessageUpdateWithWhereUniqueWithoutReceiverClientInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverClientInput | MessageUpdateManyWithWhereWithoutReceiverClientInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderClientNestedInput = {
    create?: XOR<MessageCreateWithoutSenderClientInput, MessageUncheckedCreateWithoutSenderClientInput> | MessageCreateWithoutSenderClientInput[] | MessageUncheckedCreateWithoutSenderClientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderClientInput | MessageCreateOrConnectWithoutSenderClientInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderClientInput | MessageUpsertWithWhereUniqueWithoutSenderClientInput[]
    createMany?: MessageCreateManySenderClientInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderClientInput | MessageUpdateWithWhereUniqueWithoutSenderClientInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderClientInput | MessageUpdateManyWithWhereWithoutSenderClientInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type CaseParticipantClientUpdateManyWithoutClientNestedInput = {
    create?: XOR<CaseParticipantClientCreateWithoutClientInput, CaseParticipantClientUncheckedCreateWithoutClientInput> | CaseParticipantClientCreateWithoutClientInput[] | CaseParticipantClientUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CaseParticipantClientCreateOrConnectWithoutClientInput | CaseParticipantClientCreateOrConnectWithoutClientInput[]
    upsert?: CaseParticipantClientUpsertWithWhereUniqueWithoutClientInput | CaseParticipantClientUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: CaseParticipantClientCreateManyClientInputEnvelope
    set?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    disconnect?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    delete?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    connect?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    update?: CaseParticipantClientUpdateWithWhereUniqueWithoutClientInput | CaseParticipantClientUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: CaseParticipantClientUpdateManyWithWhereWithoutClientInput | CaseParticipantClientUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: CaseParticipantClientScalarWhereInput | CaseParticipantClientScalarWhereInput[]
  }

  export type CaseUncheckedUpdateManyWithoutClientPrimaryNestedInput = {
    create?: XOR<CaseCreateWithoutClientPrimaryInput, CaseUncheckedCreateWithoutClientPrimaryInput> | CaseCreateWithoutClientPrimaryInput[] | CaseUncheckedCreateWithoutClientPrimaryInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutClientPrimaryInput | CaseCreateOrConnectWithoutClientPrimaryInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutClientPrimaryInput | CaseUpsertWithWhereUniqueWithoutClientPrimaryInput[]
    createMany?: CaseCreateManyClientPrimaryInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutClientPrimaryInput | CaseUpdateWithWhereUniqueWithoutClientPrimaryInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutClientPrimaryInput | CaseUpdateManyWithWhereWithoutClientPrimaryInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReceiverClientNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverClientInput, MessageUncheckedCreateWithoutReceiverClientInput> | MessageCreateWithoutReceiverClientInput[] | MessageUncheckedCreateWithoutReceiverClientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverClientInput | MessageCreateOrConnectWithoutReceiverClientInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverClientInput | MessageUpsertWithWhereUniqueWithoutReceiverClientInput[]
    createMany?: MessageCreateManyReceiverClientInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverClientInput | MessageUpdateWithWhereUniqueWithoutReceiverClientInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverClientInput | MessageUpdateManyWithWhereWithoutReceiverClientInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderClientNestedInput = {
    create?: XOR<MessageCreateWithoutSenderClientInput, MessageUncheckedCreateWithoutSenderClientInput> | MessageCreateWithoutSenderClientInput[] | MessageUncheckedCreateWithoutSenderClientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderClientInput | MessageCreateOrConnectWithoutSenderClientInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderClientInput | MessageUpsertWithWhereUniqueWithoutSenderClientInput[]
    createMany?: MessageCreateManySenderClientInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderClientInput | MessageUpdateWithWhereUniqueWithoutSenderClientInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderClientInput | MessageUpdateManyWithWhereWithoutSenderClientInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type CaseParticipantClientUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<CaseParticipantClientCreateWithoutClientInput, CaseParticipantClientUncheckedCreateWithoutClientInput> | CaseParticipantClientCreateWithoutClientInput[] | CaseParticipantClientUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CaseParticipantClientCreateOrConnectWithoutClientInput | CaseParticipantClientCreateOrConnectWithoutClientInput[]
    upsert?: CaseParticipantClientUpsertWithWhereUniqueWithoutClientInput | CaseParticipantClientUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: CaseParticipantClientCreateManyClientInputEnvelope
    set?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    disconnect?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    delete?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    connect?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    update?: CaseParticipantClientUpdateWithWhereUniqueWithoutClientInput | CaseParticipantClientUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: CaseParticipantClientUpdateManyWithWhereWithoutClientInput | CaseParticipantClientUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: CaseParticipantClientScalarWhereInput | CaseParticipantClientScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutCasesInput = {
    create?: XOR<TenantCreateWithoutCasesInput, TenantUncheckedCreateWithoutCasesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCasesInput
    connect?: TenantWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPrimaryCasesInput = {
    create?: XOR<UserCreateWithoutPrimaryCasesInput, UserUncheckedCreateWithoutPrimaryCasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrimaryCasesInput
    connect?: UserWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutPrimaryCasesInput = {
    create?: XOR<ClientCreateWithoutPrimaryCasesInput, ClientUncheckedCreateWithoutPrimaryCasesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutPrimaryCasesInput
    connect?: ClientWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutCaseInput = {
    create?: XOR<MessageCreateWithoutCaseInput, MessageUncheckedCreateWithoutCaseInput> | MessageCreateWithoutCaseInput[] | MessageUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutCaseInput | MessageCreateOrConnectWithoutCaseInput[]
    createMany?: MessageCreateManyCaseInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutCaseInput = {
    create?: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput> | FileCreateWithoutCaseInput[] | FileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCaseInput | FileCreateOrConnectWithoutCaseInput[]
    createMany?: FileCreateManyCaseInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type InviteCreateNestedManyWithoutCaseInput = {
    create?: XOR<InviteCreateWithoutCaseInput, InviteUncheckedCreateWithoutCaseInput> | InviteCreateWithoutCaseInput[] | InviteUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutCaseInput | InviteCreateOrConnectWithoutCaseInput[]
    createMany?: InviteCreateManyCaseInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type CaseEventCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseEventCreateWithoutCaseInput, CaseEventUncheckedCreateWithoutCaseInput> | CaseEventCreateWithoutCaseInput[] | CaseEventUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseEventCreateOrConnectWithoutCaseInput | CaseEventCreateOrConnectWithoutCaseInput[]
    createMany?: CaseEventCreateManyCaseInputEnvelope
    connect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
  }

  export type CaseParticipantUserCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseParticipantUserCreateWithoutCaseInput, CaseParticipantUserUncheckedCreateWithoutCaseInput> | CaseParticipantUserCreateWithoutCaseInput[] | CaseParticipantUserUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseParticipantUserCreateOrConnectWithoutCaseInput | CaseParticipantUserCreateOrConnectWithoutCaseInput[]
    createMany?: CaseParticipantUserCreateManyCaseInputEnvelope
    connect?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
  }

  export type CaseParticipantClientCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseParticipantClientCreateWithoutCaseInput, CaseParticipantClientUncheckedCreateWithoutCaseInput> | CaseParticipantClientCreateWithoutCaseInput[] | CaseParticipantClientUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseParticipantClientCreateOrConnectWithoutCaseInput | CaseParticipantClientCreateOrConnectWithoutCaseInput[]
    createMany?: CaseParticipantClientCreateManyCaseInputEnvelope
    connect?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<MessageCreateWithoutCaseInput, MessageUncheckedCreateWithoutCaseInput> | MessageCreateWithoutCaseInput[] | MessageUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutCaseInput | MessageCreateOrConnectWithoutCaseInput[]
    createMany?: MessageCreateManyCaseInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput> | FileCreateWithoutCaseInput[] | FileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCaseInput | FileCreateOrConnectWithoutCaseInput[]
    createMany?: FileCreateManyCaseInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type InviteUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<InviteCreateWithoutCaseInput, InviteUncheckedCreateWithoutCaseInput> | InviteCreateWithoutCaseInput[] | InviteUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutCaseInput | InviteCreateOrConnectWithoutCaseInput[]
    createMany?: InviteCreateManyCaseInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type CaseEventUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseEventCreateWithoutCaseInput, CaseEventUncheckedCreateWithoutCaseInput> | CaseEventCreateWithoutCaseInput[] | CaseEventUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseEventCreateOrConnectWithoutCaseInput | CaseEventCreateOrConnectWithoutCaseInput[]
    createMany?: CaseEventCreateManyCaseInputEnvelope
    connect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
  }

  export type CaseParticipantUserUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseParticipantUserCreateWithoutCaseInput, CaseParticipantUserUncheckedCreateWithoutCaseInput> | CaseParticipantUserCreateWithoutCaseInput[] | CaseParticipantUserUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseParticipantUserCreateOrConnectWithoutCaseInput | CaseParticipantUserCreateOrConnectWithoutCaseInput[]
    createMany?: CaseParticipantUserCreateManyCaseInputEnvelope
    connect?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
  }

  export type CaseParticipantClientUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseParticipantClientCreateWithoutCaseInput, CaseParticipantClientUncheckedCreateWithoutCaseInput> | CaseParticipantClientCreateWithoutCaseInput[] | CaseParticipantClientUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseParticipantClientCreateOrConnectWithoutCaseInput | CaseParticipantClientCreateOrConnectWithoutCaseInput[]
    createMany?: CaseParticipantClientCreateManyCaseInputEnvelope
    connect?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
  }

  export type EnumCaseStatusFieldUpdateOperationsInput = {
    set?: $Enums.CaseStatus
  }

  export type TenantUpdateOneRequiredWithoutCasesNestedInput = {
    create?: XOR<TenantCreateWithoutCasesInput, TenantUncheckedCreateWithoutCasesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCasesInput
    upsert?: TenantUpsertWithoutCasesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutCasesInput, TenantUpdateWithoutCasesInput>, TenantUncheckedUpdateWithoutCasesInput>
  }

  export type UserUpdateOneWithoutPrimaryCasesNestedInput = {
    create?: XOR<UserCreateWithoutPrimaryCasesInput, UserUncheckedCreateWithoutPrimaryCasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrimaryCasesInput
    upsert?: UserUpsertWithoutPrimaryCasesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPrimaryCasesInput, UserUpdateWithoutPrimaryCasesInput>, UserUncheckedUpdateWithoutPrimaryCasesInput>
  }

  export type ClientUpdateOneWithoutPrimaryCasesNestedInput = {
    create?: XOR<ClientCreateWithoutPrimaryCasesInput, ClientUncheckedCreateWithoutPrimaryCasesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutPrimaryCasesInput
    upsert?: ClientUpsertWithoutPrimaryCasesInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutPrimaryCasesInput, ClientUpdateWithoutPrimaryCasesInput>, ClientUncheckedUpdateWithoutPrimaryCasesInput>
  }

  export type MessageUpdateManyWithoutCaseNestedInput = {
    create?: XOR<MessageCreateWithoutCaseInput, MessageUncheckedCreateWithoutCaseInput> | MessageCreateWithoutCaseInput[] | MessageUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutCaseInput | MessageCreateOrConnectWithoutCaseInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutCaseInput | MessageUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: MessageCreateManyCaseInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutCaseInput | MessageUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutCaseInput | MessageUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type FileUpdateManyWithoutCaseNestedInput = {
    create?: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput> | FileCreateWithoutCaseInput[] | FileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCaseInput | FileCreateOrConnectWithoutCaseInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutCaseInput | FileUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: FileCreateManyCaseInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutCaseInput | FileUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: FileUpdateManyWithWhereWithoutCaseInput | FileUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type InviteUpdateManyWithoutCaseNestedInput = {
    create?: XOR<InviteCreateWithoutCaseInput, InviteUncheckedCreateWithoutCaseInput> | InviteCreateWithoutCaseInput[] | InviteUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutCaseInput | InviteCreateOrConnectWithoutCaseInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutCaseInput | InviteUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: InviteCreateManyCaseInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutCaseInput | InviteUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutCaseInput | InviteUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type CaseEventUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseEventCreateWithoutCaseInput, CaseEventUncheckedCreateWithoutCaseInput> | CaseEventCreateWithoutCaseInput[] | CaseEventUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseEventCreateOrConnectWithoutCaseInput | CaseEventCreateOrConnectWithoutCaseInput[]
    upsert?: CaseEventUpsertWithWhereUniqueWithoutCaseInput | CaseEventUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseEventCreateManyCaseInputEnvelope
    set?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    disconnect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    delete?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    connect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    update?: CaseEventUpdateWithWhereUniqueWithoutCaseInput | CaseEventUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseEventUpdateManyWithWhereWithoutCaseInput | CaseEventUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseEventScalarWhereInput | CaseEventScalarWhereInput[]
  }

  export type CaseParticipantUserUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseParticipantUserCreateWithoutCaseInput, CaseParticipantUserUncheckedCreateWithoutCaseInput> | CaseParticipantUserCreateWithoutCaseInput[] | CaseParticipantUserUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseParticipantUserCreateOrConnectWithoutCaseInput | CaseParticipantUserCreateOrConnectWithoutCaseInput[]
    upsert?: CaseParticipantUserUpsertWithWhereUniqueWithoutCaseInput | CaseParticipantUserUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseParticipantUserCreateManyCaseInputEnvelope
    set?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    disconnect?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    delete?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    connect?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    update?: CaseParticipantUserUpdateWithWhereUniqueWithoutCaseInput | CaseParticipantUserUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseParticipantUserUpdateManyWithWhereWithoutCaseInput | CaseParticipantUserUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseParticipantUserScalarWhereInput | CaseParticipantUserScalarWhereInput[]
  }

  export type CaseParticipantClientUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseParticipantClientCreateWithoutCaseInput, CaseParticipantClientUncheckedCreateWithoutCaseInput> | CaseParticipantClientCreateWithoutCaseInput[] | CaseParticipantClientUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseParticipantClientCreateOrConnectWithoutCaseInput | CaseParticipantClientCreateOrConnectWithoutCaseInput[]
    upsert?: CaseParticipantClientUpsertWithWhereUniqueWithoutCaseInput | CaseParticipantClientUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseParticipantClientCreateManyCaseInputEnvelope
    set?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    disconnect?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    delete?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    connect?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    update?: CaseParticipantClientUpdateWithWhereUniqueWithoutCaseInput | CaseParticipantClientUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseParticipantClientUpdateManyWithWhereWithoutCaseInput | CaseParticipantClientUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseParticipantClientScalarWhereInput | CaseParticipantClientScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<MessageCreateWithoutCaseInput, MessageUncheckedCreateWithoutCaseInput> | MessageCreateWithoutCaseInput[] | MessageUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutCaseInput | MessageCreateOrConnectWithoutCaseInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutCaseInput | MessageUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: MessageCreateManyCaseInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutCaseInput | MessageUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutCaseInput | MessageUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput> | FileCreateWithoutCaseInput[] | FileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCaseInput | FileCreateOrConnectWithoutCaseInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutCaseInput | FileUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: FileCreateManyCaseInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutCaseInput | FileUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: FileUpdateManyWithWhereWithoutCaseInput | FileUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type InviteUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<InviteCreateWithoutCaseInput, InviteUncheckedCreateWithoutCaseInput> | InviteCreateWithoutCaseInput[] | InviteUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutCaseInput | InviteCreateOrConnectWithoutCaseInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutCaseInput | InviteUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: InviteCreateManyCaseInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutCaseInput | InviteUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutCaseInput | InviteUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type CaseEventUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseEventCreateWithoutCaseInput, CaseEventUncheckedCreateWithoutCaseInput> | CaseEventCreateWithoutCaseInput[] | CaseEventUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseEventCreateOrConnectWithoutCaseInput | CaseEventCreateOrConnectWithoutCaseInput[]
    upsert?: CaseEventUpsertWithWhereUniqueWithoutCaseInput | CaseEventUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseEventCreateManyCaseInputEnvelope
    set?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    disconnect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    delete?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    connect?: CaseEventWhereUniqueInput | CaseEventWhereUniqueInput[]
    update?: CaseEventUpdateWithWhereUniqueWithoutCaseInput | CaseEventUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseEventUpdateManyWithWhereWithoutCaseInput | CaseEventUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseEventScalarWhereInput | CaseEventScalarWhereInput[]
  }

  export type CaseParticipantUserUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseParticipantUserCreateWithoutCaseInput, CaseParticipantUserUncheckedCreateWithoutCaseInput> | CaseParticipantUserCreateWithoutCaseInput[] | CaseParticipantUserUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseParticipantUserCreateOrConnectWithoutCaseInput | CaseParticipantUserCreateOrConnectWithoutCaseInput[]
    upsert?: CaseParticipantUserUpsertWithWhereUniqueWithoutCaseInput | CaseParticipantUserUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseParticipantUserCreateManyCaseInputEnvelope
    set?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    disconnect?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    delete?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    connect?: CaseParticipantUserWhereUniqueInput | CaseParticipantUserWhereUniqueInput[]
    update?: CaseParticipantUserUpdateWithWhereUniqueWithoutCaseInput | CaseParticipantUserUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseParticipantUserUpdateManyWithWhereWithoutCaseInput | CaseParticipantUserUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseParticipantUserScalarWhereInput | CaseParticipantUserScalarWhereInput[]
  }

  export type CaseParticipantClientUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseParticipantClientCreateWithoutCaseInput, CaseParticipantClientUncheckedCreateWithoutCaseInput> | CaseParticipantClientCreateWithoutCaseInput[] | CaseParticipantClientUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseParticipantClientCreateOrConnectWithoutCaseInput | CaseParticipantClientCreateOrConnectWithoutCaseInput[]
    upsert?: CaseParticipantClientUpsertWithWhereUniqueWithoutCaseInput | CaseParticipantClientUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseParticipantClientCreateManyCaseInputEnvelope
    set?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    disconnect?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    delete?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    connect?: CaseParticipantClientWhereUniqueInput | CaseParticipantClientWhereUniqueInput[]
    update?: CaseParticipantClientUpdateWithWhereUniqueWithoutCaseInput | CaseParticipantClientUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseParticipantClientUpdateManyWithWhereWithoutCaseInput | CaseParticipantClientUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseParticipantClientScalarWhereInput | CaseParticipantClientScalarWhereInput[]
  }

  export type CaseCreateNestedOneWithoutParticipantsUsersInput = {
    create?: XOR<CaseCreateWithoutParticipantsUsersInput, CaseUncheckedCreateWithoutParticipantsUsersInput>
    connectOrCreate?: CaseCreateOrConnectWithoutParticipantsUsersInput
    connect?: CaseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutParticipatingCasesInput = {
    create?: XOR<UserCreateWithoutParticipatingCasesInput, UserUncheckedCreateWithoutParticipatingCasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipatingCasesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumCaseParticipantUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.CaseParticipantUserRole
  }

  export type CaseUpdateOneRequiredWithoutParticipantsUsersNestedInput = {
    create?: XOR<CaseCreateWithoutParticipantsUsersInput, CaseUncheckedCreateWithoutParticipantsUsersInput>
    connectOrCreate?: CaseCreateOrConnectWithoutParticipantsUsersInput
    upsert?: CaseUpsertWithoutParticipantsUsersInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutParticipantsUsersInput, CaseUpdateWithoutParticipantsUsersInput>, CaseUncheckedUpdateWithoutParticipantsUsersInput>
  }

  export type UserUpdateOneRequiredWithoutParticipatingCasesNestedInput = {
    create?: XOR<UserCreateWithoutParticipatingCasesInput, UserUncheckedCreateWithoutParticipatingCasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipatingCasesInput
    upsert?: UserUpsertWithoutParticipatingCasesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutParticipatingCasesInput, UserUpdateWithoutParticipatingCasesInput>, UserUncheckedUpdateWithoutParticipatingCasesInput>
  }

  export type CaseCreateNestedOneWithoutParticipantsClientsInput = {
    create?: XOR<CaseCreateWithoutParticipantsClientsInput, CaseUncheckedCreateWithoutParticipantsClientsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutParticipantsClientsInput
    connect?: CaseWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutParticipatingCasesInput = {
    create?: XOR<ClientCreateWithoutParticipatingCasesInput, ClientUncheckedCreateWithoutParticipatingCasesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutParticipatingCasesInput
    connect?: ClientWhereUniqueInput
  }

  export type EnumCaseParticipantClientTypeFieldUpdateOperationsInput = {
    set?: $Enums.CaseParticipantClientType
  }

  export type CaseUpdateOneRequiredWithoutParticipantsClientsNestedInput = {
    create?: XOR<CaseCreateWithoutParticipantsClientsInput, CaseUncheckedCreateWithoutParticipantsClientsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutParticipantsClientsInput
    upsert?: CaseUpsertWithoutParticipantsClientsInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutParticipantsClientsInput, CaseUpdateWithoutParticipantsClientsInput>, CaseUncheckedUpdateWithoutParticipantsClientsInput>
  }

  export type ClientUpdateOneRequiredWithoutParticipatingCasesNestedInput = {
    create?: XOR<ClientCreateWithoutParticipatingCasesInput, ClientUncheckedCreateWithoutParticipatingCasesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutParticipatingCasesInput
    upsert?: ClientUpsertWithoutParticipatingCasesInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutParticipatingCasesInput, ClientUpdateWithoutParticipatingCasesInput>, ClientUncheckedUpdateWithoutParticipatingCasesInput>
  }

  export type CaseCreateNestedOneWithoutCaseEventsInput = {
    create?: XOR<CaseCreateWithoutCaseEventsInput, CaseUncheckedCreateWithoutCaseEventsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCaseEventsInput
    connect?: CaseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCaseEventsInput = {
    create?: XOR<UserCreateWithoutCaseEventsInput, UserUncheckedCreateWithoutCaseEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCaseEventsInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutCaseEventsInput = {
    create?: XOR<TenantCreateWithoutCaseEventsInput, TenantUncheckedCreateWithoutCaseEventsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCaseEventsInput
    connect?: TenantWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutCaseEventsNestedInput = {
    create?: XOR<CaseCreateWithoutCaseEventsInput, CaseUncheckedCreateWithoutCaseEventsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCaseEventsInput
    upsert?: CaseUpsertWithoutCaseEventsInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutCaseEventsInput, CaseUpdateWithoutCaseEventsInput>, CaseUncheckedUpdateWithoutCaseEventsInput>
  }

  export type UserUpdateOneWithoutCaseEventsNestedInput = {
    create?: XOR<UserCreateWithoutCaseEventsInput, UserUncheckedCreateWithoutCaseEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCaseEventsInput
    upsert?: UserUpsertWithoutCaseEventsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCaseEventsInput, UserUpdateWithoutCaseEventsInput>, UserUncheckedUpdateWithoutCaseEventsInput>
  }

  export type TenantUpdateOneRequiredWithoutCaseEventsNestedInput = {
    create?: XOR<TenantCreateWithoutCaseEventsInput, TenantUncheckedCreateWithoutCaseEventsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCaseEventsInput
    upsert?: TenantUpsertWithoutCaseEventsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutCaseEventsInput, TenantUpdateWithoutCaseEventsInput>, TenantUncheckedUpdateWithoutCaseEventsInput>
  }

  export type CaseCreateNestedOneWithoutMessagesInput = {
    create?: XOR<CaseCreateWithoutMessagesInput, CaseUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutMessagesInput
    connect?: CaseWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutMessagesInput = {
    create?: XOR<TenantCreateWithoutMessagesInput, TenantUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutMessagesInput
    connect?: TenantWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<ClientCreateWithoutSentMessagesInput, ClientUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutSentMessagesInput
    connect?: ClientWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutReceivedMessagesInput = {
    create?: XOR<ClientCreateWithoutReceivedMessagesInput, ClientUncheckedCreateWithoutReceivedMessagesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutReceivedMessagesInput
    connect?: ClientWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CaseUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<CaseCreateWithoutMessagesInput, CaseUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutMessagesInput
    upsert?: CaseUpsertWithoutMessagesInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutMessagesInput, CaseUpdateWithoutMessagesInput>, CaseUncheckedUpdateWithoutMessagesInput>
  }

  export type TenantUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<TenantCreateWithoutMessagesInput, TenantUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutMessagesInput
    upsert?: TenantUpsertWithoutMessagesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutMessagesInput, TenantUpdateWithoutMessagesInput>, TenantUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneWithoutSentMessagesNestedInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    upsert?: UserUpsertWithoutSentMessagesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentMessagesInput, UserUpdateWithoutSentMessagesInput>, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type ClientUpdateOneWithoutSentMessagesNestedInput = {
    create?: XOR<ClientCreateWithoutSentMessagesInput, ClientUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutSentMessagesInput
    upsert?: ClientUpsertWithoutSentMessagesInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutSentMessagesInput, ClientUpdateWithoutSentMessagesInput>, ClientUncheckedUpdateWithoutSentMessagesInput>
  }

  export type ClientUpdateOneRequiredWithoutReceivedMessagesNestedInput = {
    create?: XOR<ClientCreateWithoutReceivedMessagesInput, ClientUncheckedCreateWithoutReceivedMessagesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutReceivedMessagesInput
    upsert?: ClientUpsertWithoutReceivedMessagesInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutReceivedMessagesInput, ClientUpdateWithoutReceivedMessagesInput>, ClientUncheckedUpdateWithoutReceivedMessagesInput>
  }

  export type TenantCreateNestedOneWithoutFilesInput = {
    create?: XOR<TenantCreateWithoutFilesInput, TenantUncheckedCreateWithoutFilesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutFilesInput
    connect?: TenantWhereUniqueInput
  }

  export type CaseCreateNestedOneWithoutFilesInput = {
    create?: XOR<CaseCreateWithoutFilesInput, CaseUncheckedCreateWithoutFilesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutFilesInput
    connect?: CaseWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<TenantCreateWithoutFilesInput, TenantUncheckedCreateWithoutFilesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutFilesInput
    upsert?: TenantUpsertWithoutFilesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutFilesInput, TenantUpdateWithoutFilesInput>, TenantUncheckedUpdateWithoutFilesInput>
  }

  export type CaseUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<CaseCreateWithoutFilesInput, CaseUncheckedCreateWithoutFilesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutFilesInput
    upsert?: CaseUpsertWithoutFilesInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutFilesInput, CaseUpdateWithoutFilesInput>, CaseUncheckedUpdateWithoutFilesInput>
  }

  export type CaseCreateNestedOneWithoutInvitesInput = {
    create?: XOR<CaseCreateWithoutInvitesInput, CaseUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutInvitesInput
    connect?: CaseWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutInvitesInput = {
    create?: XOR<TenantCreateWithoutInvitesInput, TenantUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutInvitesInput
    connect?: TenantWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutInvitesNestedInput = {
    create?: XOR<CaseCreateWithoutInvitesInput, CaseUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutInvitesInput
    upsert?: CaseUpsertWithoutInvitesInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutInvitesInput, CaseUpdateWithoutInvitesInput>, CaseUncheckedUpdateWithoutInvitesInput>
  }

  export type TenantUpdateOneRequiredWithoutInvitesNestedInput = {
    create?: XOR<TenantCreateWithoutInvitesInput, TenantUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutInvitesInput
    upsert?: TenantUpsertWithoutInvitesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutInvitesInput, TenantUpdateWithoutInvitesInput>, TenantUncheckedUpdateWithoutInvitesInput>
  }

  export type GeneralSettingCreateworkingDaysInput = {
    set: string[]
  }

  export type TenantCreateNestedOneWithoutGeneralSettingInput = {
    create?: XOR<TenantCreateWithoutGeneralSettingInput, TenantUncheckedCreateWithoutGeneralSettingInput>
    connectOrCreate?: TenantCreateOrConnectWithoutGeneralSettingInput
    connect?: TenantWhereUniqueInput
  }

  export type GeneralSettingUpdateworkingDaysInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TenantUpdateOneRequiredWithoutGeneralSettingNestedInput = {
    create?: XOR<TenantCreateWithoutGeneralSettingInput, TenantUncheckedCreateWithoutGeneralSettingInput>
    connectOrCreate?: TenantCreateOrConnectWithoutGeneralSettingInput
    upsert?: TenantUpsertWithoutGeneralSettingInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutGeneralSettingInput, TenantUpdateWithoutGeneralSettingInput>, TenantUncheckedUpdateWithoutGeneralSettingInput>
  }

  export type TenantCreateNestedOneWithoutNotificationSettingInput = {
    create?: XOR<TenantCreateWithoutNotificationSettingInput, TenantUncheckedCreateWithoutNotificationSettingInput>
    connectOrCreate?: TenantCreateOrConnectWithoutNotificationSettingInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutNotificationSettingNestedInput = {
    create?: XOR<TenantCreateWithoutNotificationSettingInput, TenantUncheckedCreateWithoutNotificationSettingInput>
    connectOrCreate?: TenantCreateOrConnectWithoutNotificationSettingInput
    upsert?: TenantUpsertWithoutNotificationSettingInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutNotificationSettingInput, TenantUpdateWithoutNotificationSettingInput>, TenantUncheckedUpdateWithoutNotificationSettingInput>
  }

  export type TenantCreateNestedOneWithoutSecuritySettingInput = {
    create?: XOR<TenantCreateWithoutSecuritySettingInput, TenantUncheckedCreateWithoutSecuritySettingInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSecuritySettingInput
    connect?: TenantWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TenantUpdateOneRequiredWithoutSecuritySettingNestedInput = {
    create?: XOR<TenantCreateWithoutSecuritySettingInput, TenantUncheckedCreateWithoutSecuritySettingInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSecuritySettingInput
    upsert?: TenantUpsertWithoutSecuritySettingInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutSecuritySettingInput, TenantUpdateWithoutSecuritySettingInput>, TenantUncheckedUpdateWithoutSecuritySettingInput>
  }

  export type TenantCreateNestedOneWithoutBillingSettingInput = {
    create?: XOR<TenantCreateWithoutBillingSettingInput, TenantUncheckedCreateWithoutBillingSettingInput>
    connectOrCreate?: TenantCreateOrConnectWithoutBillingSettingInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutBillingSettingNestedInput = {
    create?: XOR<TenantCreateWithoutBillingSettingInput, TenantUncheckedCreateWithoutBillingSettingInput>
    connectOrCreate?: TenantCreateOrConnectWithoutBillingSettingInput
    upsert?: TenantUpsertWithoutBillingSettingInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutBillingSettingInput, TenantUpdateWithoutBillingSettingInput>, TenantUncheckedUpdateWithoutBillingSettingInput>
  }

  export type TenantCreateNestedOneWithoutIntegrationSettingInput = {
    create?: XOR<TenantCreateWithoutIntegrationSettingInput, TenantUncheckedCreateWithoutIntegrationSettingInput>
    connectOrCreate?: TenantCreateOrConnectWithoutIntegrationSettingInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutIntegrationSettingNestedInput = {
    create?: XOR<TenantCreateWithoutIntegrationSettingInput, TenantUncheckedCreateWithoutIntegrationSettingInput>
    connectOrCreate?: TenantCreateOrConnectWithoutIntegrationSettingInput
    upsert?: TenantUpsertWithoutIntegrationSettingInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutIntegrationSettingInput, TenantUpdateWithoutIntegrationSettingInput>, TenantUncheckedUpdateWithoutIntegrationSettingInput>
  }

  export type TenantCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<TenantCreateWithoutEmployeesInput, TenantUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutEmployeesInput
    connect?: TenantWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    connect?: UserWhereUniqueInput
  }

  export type EnumEmployeeStatusFieldUpdateOperationsInput = {
    set?: $Enums.EmployeeStatus
  }

  export type TenantUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<TenantCreateWithoutEmployeesInput, TenantUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutEmployeesInput
    upsert?: TenantUpsertWithoutEmployeesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutEmployeesInput, TenantUpdateWithoutEmployeesInput>, TenantUncheckedUpdateWithoutEmployeesInput>
  }

  export type UserUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    upsert?: UserUpsertWithoutEmployeeInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmployeeInput, UserUpdateWithoutEmployeeInput>, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumCaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStatusFilter<$PrismaModel> | $Enums.CaseStatus
  }

  export type NestedEnumCaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.CaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseStatusFilter<$PrismaModel>
    _max?: NestedEnumCaseStatusFilter<$PrismaModel>
  }

  export type NestedEnumCaseParticipantUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseParticipantUserRole | EnumCaseParticipantUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.CaseParticipantUserRole[] | ListEnumCaseParticipantUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseParticipantUserRole[] | ListEnumCaseParticipantUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseParticipantUserRoleFilter<$PrismaModel> | $Enums.CaseParticipantUserRole
  }

  export type NestedEnumCaseParticipantUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseParticipantUserRole | EnumCaseParticipantUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.CaseParticipantUserRole[] | ListEnumCaseParticipantUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseParticipantUserRole[] | ListEnumCaseParticipantUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseParticipantUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.CaseParticipantUserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseParticipantUserRoleFilter<$PrismaModel>
    _max?: NestedEnumCaseParticipantUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumCaseParticipantClientTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseParticipantClientType | EnumCaseParticipantClientTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CaseParticipantClientType[] | ListEnumCaseParticipantClientTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseParticipantClientType[] | ListEnumCaseParticipantClientTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseParticipantClientTypeFilter<$PrismaModel> | $Enums.CaseParticipantClientType
  }

  export type NestedEnumCaseParticipantClientTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseParticipantClientType | EnumCaseParticipantClientTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CaseParticipantClientType[] | ListEnumCaseParticipantClientTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseParticipantClientType[] | ListEnumCaseParticipantClientTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseParticipantClientTypeWithAggregatesFilter<$PrismaModel> | $Enums.CaseParticipantClientType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseParticipantClientTypeFilter<$PrismaModel>
    _max?: NestedEnumCaseParticipantClientTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumEmployeeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStatus | EnumEmployeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmployeeStatusFilter<$PrismaModel> | $Enums.EmployeeStatus
  }

  export type NestedEnumEmployeeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStatus | EnumEmployeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmployeeStatus[] | ListEnumEmployeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmployeeStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmployeeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmployeeStatusFilter<$PrismaModel>
    _max?: NestedEnumEmployeeStatusFilter<$PrismaModel>
  }

  export type UserPermissionCreateWithoutPermissionInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserPermissionsInput
  }

  export type UserPermissionUncheckedCreateWithoutPermissionInput = {
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPermissionCreateOrConnectWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type UserPermissionCreateManyPermissionInputEnvelope = {
    data: UserPermissionCreateManyPermissionInput | UserPermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutPermissionInput, UserPermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutPermissionInput, UserPermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type UserPermissionScalarWhereInput = {
    AND?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    OR?: UserPermissionScalarWhereInput[]
    NOT?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: StringFilter<"UserPermission"> | string
    createdAt?: DateTimeFilter<"UserPermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserPermission"> | Date | string
  }

  export type UserCreateWithoutUserPermissionsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenant: TenantCreateNestedOneWithoutUsersInput
    primaryCases?: CaseCreateNestedManyWithoutLawyerPrimaryInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    participatingCases?: CaseParticipantUserCreateNestedManyWithoutUserInput
    caseEvents?: CaseEventCreateNestedManyWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    Client?: ClientCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserPermissionsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenantId: string
    primaryCases?: CaseUncheckedCreateNestedManyWithoutLawyerPrimaryInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participatingCases?: CaseParticipantUserUncheckedCreateNestedManyWithoutUserInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    Client?: ClientUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserPermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserPermissionsInput, UserUncheckedCreateWithoutUserPermissionsInput>
  }

  export type PermissionCreateWithoutUserPermissionsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionUncheckedCreateWithoutUserPermissionsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionCreateOrConnectWithoutUserPermissionsInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutUserPermissionsInput, PermissionUncheckedCreateWithoutUserPermissionsInput>
  }

  export type UserUpsertWithoutUserPermissionsInput = {
    update: XOR<UserUpdateWithoutUserPermissionsInput, UserUncheckedUpdateWithoutUserPermissionsInput>
    create: XOR<UserCreateWithoutUserPermissionsInput, UserUncheckedCreateWithoutUserPermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserPermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserPermissionsInput, UserUncheckedUpdateWithoutUserPermissionsInput>
  }

  export type UserUpdateWithoutUserPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    primaryCases?: CaseUpdateManyWithoutLawyerPrimaryNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    participatingCases?: CaseParticipantUserUpdateManyWithoutUserNestedInput
    caseEvents?: CaseEventUpdateManyWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    Client?: ClientUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenantId?: StringFieldUpdateOperationsInput | string
    primaryCases?: CaseUncheckedUpdateManyWithoutLawyerPrimaryNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participatingCases?: CaseParticipantUserUncheckedUpdateManyWithoutUserNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    Client?: ClientUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PermissionUpsertWithoutUserPermissionsInput = {
    update: XOR<PermissionUpdateWithoutUserPermissionsInput, PermissionUncheckedUpdateWithoutUserPermissionsInput>
    create: XOR<PermissionCreateWithoutUserPermissionsInput, PermissionUncheckedCreateWithoutUserPermissionsInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutUserPermissionsInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutUserPermissionsInput, PermissionUncheckedUpdateWithoutUserPermissionsInput>
  }

  export type PermissionUpdateWithoutUserPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUncheckedUpdateWithoutUserPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutTenantInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    primaryCases?: CaseCreateNestedManyWithoutLawyerPrimaryInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    participatingCases?: CaseParticipantUserCreateNestedManyWithoutUserInput
    caseEvents?: CaseEventCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionCreateNestedManyWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    Client?: ClientCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTenantInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    primaryCases?: CaseUncheckedCreateNestedManyWithoutLawyerPrimaryInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participatingCases?: CaseParticipantUserUncheckedCreateNestedManyWithoutUserInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    Client?: ClientUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTenantInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserCreateManyTenantInputEnvelope = {
    data: UserCreateManyTenantInput | UserCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type ClientCreateWithoutTenantInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutClientInput
    primaryCases?: CaseCreateNestedManyWithoutClientPrimaryInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverClientInput
    sentMessages?: MessageCreateNestedManyWithoutSenderClientInput
    participatingCases?: CaseParticipantClientCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutTenantInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    primaryCases?: CaseUncheckedCreateNestedManyWithoutClientPrimaryInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverClientInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderClientInput
    participatingCases?: CaseParticipantClientUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutTenantInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutTenantInput, ClientUncheckedCreateWithoutTenantInput>
  }

  export type ClientCreateManyTenantInputEnvelope = {
    data: ClientCreateManyTenantInput | ClientCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type CaseCreateWithoutTenantInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    lawyerPrimary?: UserCreateNestedOneWithoutPrimaryCasesInput
    clientPrimary?: ClientCreateNestedOneWithoutPrimaryCasesInput
    messages?: MessageCreateNestedManyWithoutCaseInput
    files?: FileCreateNestedManyWithoutCaseInput
    invites?: InviteCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutTenantInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    lawyerPrimaryId?: string | null
    clientPrimaryId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutCaseInput
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    invites?: InviteUncheckedCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserUncheckedCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutTenantInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutTenantInput, CaseUncheckedCreateWithoutTenantInput>
  }

  export type CaseCreateManyTenantInputEnvelope = {
    data: CaseCreateManyTenantInput | CaseCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutTenantInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutMessagesInput
    sender?: UserCreateNestedOneWithoutSentMessagesInput
    senderClient?: ClientCreateNestedOneWithoutSentMessagesInput
    receiverClient: ClientCreateNestedOneWithoutReceivedMessagesInput
  }

  export type MessageUncheckedCreateWithoutTenantInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    senderId?: string | null
    senderClientId?: string | null
    receiverClientId: string
  }

  export type MessageCreateOrConnectWithoutTenantInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutTenantInput, MessageUncheckedCreateWithoutTenantInput>
  }

  export type MessageCreateManyTenantInputEnvelope = {
    data: MessageCreateManyTenantInput | MessageCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutTenantInput = {
    id?: string
    name: string
    url: string
    uploadedAt?: Date | string
    case: CaseCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    url: string
    uploadedAt?: Date | string
    caseId: string
  }

  export type FileCreateOrConnectWithoutTenantInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutTenantInput, FileUncheckedCreateWithoutTenantInput>
  }

  export type FileCreateManyTenantInputEnvelope = {
    data: FileCreateManyTenantInput | FileCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type InviteCreateWithoutTenantInput = {
    id?: string
    email: string
    token: string
    expiresAt: Date | string
    isUsed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutInvitesInput
  }

  export type InviteUncheckedCreateWithoutTenantInput = {
    id?: string
    email: string
    token: string
    expiresAt: Date | string
    isUsed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
  }

  export type InviteCreateOrConnectWithoutTenantInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutTenantInput, InviteUncheckedCreateWithoutTenantInput>
  }

  export type InviteCreateManyTenantInputEnvelope = {
    data: InviteCreateManyTenantInput | InviteCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type CaseEventCreateWithoutTenantInput = {
    id?: string
    type: string
    description?: string | null
    timestamp?: Date | string
    case: CaseCreateNestedOneWithoutCaseEventsInput
    user?: UserCreateNestedOneWithoutCaseEventsInput
  }

  export type CaseEventUncheckedCreateWithoutTenantInput = {
    id?: string
    type: string
    description?: string | null
    timestamp?: Date | string
    caseId: string
    userId?: string | null
  }

  export type CaseEventCreateOrConnectWithoutTenantInput = {
    where: CaseEventWhereUniqueInput
    create: XOR<CaseEventCreateWithoutTenantInput, CaseEventUncheckedCreateWithoutTenantInput>
  }

  export type CaseEventCreateManyTenantInputEnvelope = {
    data: CaseEventCreateManyTenantInput | CaseEventCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type GeneralSettingCreateWithoutTenantInput = {
    id?: string
    theme?: string | null
    businessName?: string | null
    workingDays?: GeneralSettingCreateworkingDaysInput | string[]
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralSettingUncheckedCreateWithoutTenantInput = {
    id?: string
    theme?: string | null
    businessName?: string | null
    workingDays?: GeneralSettingCreateworkingDaysInput | string[]
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralSettingCreateOrConnectWithoutTenantInput = {
    where: GeneralSettingWhereUniqueInput
    create: XOR<GeneralSettingCreateWithoutTenantInput, GeneralSettingUncheckedCreateWithoutTenantInput>
  }

  export type NotificationSettingCreateWithoutTenantInput = {
    id?: string
    email?: boolean
    whatsapp?: boolean
    app?: boolean
    newMessage?: boolean
    caseUpdate?: boolean
    newDocument?: boolean
    signatureRequest?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSettingUncheckedCreateWithoutTenantInput = {
    id?: string
    email?: boolean
    whatsapp?: boolean
    app?: boolean
    newMessage?: boolean
    caseUpdate?: boolean
    newDocument?: boolean
    signatureRequest?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSettingCreateOrConnectWithoutTenantInput = {
    where: NotificationSettingWhereUniqueInput
    create: XOR<NotificationSettingCreateWithoutTenantInput, NotificationSettingUncheckedCreateWithoutTenantInput>
  }

  export type SecuritySettingCreateWithoutTenantInput = {
    id?: string
    twoFAEnabled?: boolean
    autoLogoutMinutes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SecuritySettingUncheckedCreateWithoutTenantInput = {
    id?: string
    twoFAEnabled?: boolean
    autoLogoutMinutes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SecuritySettingCreateOrConnectWithoutTenantInput = {
    where: SecuritySettingWhereUniqueInput
    create: XOR<SecuritySettingCreateWithoutTenantInput, SecuritySettingUncheckedCreateWithoutTenantInput>
  }

  export type BillingSettingCreateWithoutTenantInput = {
    id?: string
    plan?: string
    nextCharge: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingSettingUncheckedCreateWithoutTenantInput = {
    id?: string
    plan?: string
    nextCharge: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingSettingCreateOrConnectWithoutTenantInput = {
    where: BillingSettingWhereUniqueInput
    create: XOR<BillingSettingCreateWithoutTenantInput, BillingSettingUncheckedCreateWithoutTenantInput>
  }

  export type IntegrationSettingCreateWithoutTenantInput = {
    id?: string
    d4signConnected?: boolean
    smtpConfigured?: boolean
    googleCalendarLinked?: boolean
    webhookUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IntegrationSettingUncheckedCreateWithoutTenantInput = {
    id?: string
    d4signConnected?: boolean
    smtpConfigured?: boolean
    googleCalendarLinked?: boolean
    webhookUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IntegrationSettingCreateOrConnectWithoutTenantInput = {
    where: IntegrationSettingWhereUniqueInput
    create: XOR<IntegrationSettingCreateWithoutTenantInput, IntegrationSettingUncheckedCreateWithoutTenantInput>
  }

  export type EmployeeCreateWithoutTenantInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    status?: $Enums.EmployeeStatus
    invitedAt?: Date | string
    acceptedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutTenantInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    status?: $Enums.EmployeeStatus
    invitedAt?: Date | string
    acceptedAt?: Date | string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeCreateOrConnectWithoutTenantInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutTenantInput, EmployeeUncheckedCreateWithoutTenantInput>
  }

  export type EmployeeCreateManyTenantInputEnvelope = {
    data: EmployeeCreateManyTenantInput | EmployeeCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
  }

  export type UserUpdateManyWithWhereWithoutTenantInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTenantInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isActive?: BoolFilter<"User"> | boolean
    tenantId?: StringFilter<"User"> | string
  }

  export type ClientUpsertWithWhereUniqueWithoutTenantInput = {
    where: ClientWhereUniqueInput
    update: XOR<ClientUpdateWithoutTenantInput, ClientUncheckedUpdateWithoutTenantInput>
    create: XOR<ClientCreateWithoutTenantInput, ClientUncheckedCreateWithoutTenantInput>
  }

  export type ClientUpdateWithWhereUniqueWithoutTenantInput = {
    where: ClientWhereUniqueInput
    data: XOR<ClientUpdateWithoutTenantInput, ClientUncheckedUpdateWithoutTenantInput>
  }

  export type ClientUpdateManyWithWhereWithoutTenantInput = {
    where: ClientScalarWhereInput
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyWithoutTenantInput>
  }

  export type ClientScalarWhereInput = {
    AND?: ClientScalarWhereInput | ClientScalarWhereInput[]
    OR?: ClientScalarWhereInput[]
    NOT?: ClientScalarWhereInput | ClientScalarWhereInput[]
    id?: StringFilter<"Client"> | string
    firstName?: StringFilter<"Client"> | string
    lastName?: StringFilter<"Client"> | string
    email?: StringFilter<"Client"> | string
    phoneNumber?: StringNullableFilter<"Client"> | string | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    tenantId?: StringFilter<"Client"> | string
    userId?: StringNullableFilter<"Client"> | string | null
  }

  export type CaseUpsertWithWhereUniqueWithoutTenantInput = {
    where: CaseWhereUniqueInput
    update: XOR<CaseUpdateWithoutTenantInput, CaseUncheckedUpdateWithoutTenantInput>
    create: XOR<CaseCreateWithoutTenantInput, CaseUncheckedCreateWithoutTenantInput>
  }

  export type CaseUpdateWithWhereUniqueWithoutTenantInput = {
    where: CaseWhereUniqueInput
    data: XOR<CaseUpdateWithoutTenantInput, CaseUncheckedUpdateWithoutTenantInput>
  }

  export type CaseUpdateManyWithWhereWithoutTenantInput = {
    where: CaseScalarWhereInput
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyWithoutTenantInput>
  }

  export type CaseScalarWhereInput = {
    AND?: CaseScalarWhereInput | CaseScalarWhereInput[]
    OR?: CaseScalarWhereInput[]
    NOT?: CaseScalarWhereInput | CaseScalarWhereInput[]
    id?: StringFilter<"Case"> | string
    title?: StringFilter<"Case"> | string
    description?: StringNullableFilter<"Case"> | string | null
    status?: EnumCaseStatusFilter<"Case"> | $Enums.CaseStatus
    createdAt?: DateTimeFilter<"Case"> | Date | string
    updatedAt?: DateTimeFilter<"Case"> | Date | string
    tenantId?: StringFilter<"Case"> | string
    lawyerPrimaryId?: StringNullableFilter<"Case"> | string | null
    clientPrimaryId?: StringNullableFilter<"Case"> | string | null
  }

  export type MessageUpsertWithWhereUniqueWithoutTenantInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutTenantInput, MessageUncheckedUpdateWithoutTenantInput>
    create: XOR<MessageCreateWithoutTenantInput, MessageUncheckedCreateWithoutTenantInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutTenantInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutTenantInput, MessageUncheckedUpdateWithoutTenantInput>
  }

  export type MessageUpdateManyWithWhereWithoutTenantInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutTenantInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    viewed?: BoolFilter<"Message"> | boolean
    viewedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    caseId?: StringFilter<"Message"> | string
    tenantId?: StringFilter<"Message"> | string
    senderId?: StringNullableFilter<"Message"> | string | null
    senderClientId?: StringNullableFilter<"Message"> | string | null
    receiverClientId?: StringFilter<"Message"> | string
  }

  export type FileUpsertWithWhereUniqueWithoutTenantInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutTenantInput, FileUncheckedUpdateWithoutTenantInput>
    create: XOR<FileCreateWithoutTenantInput, FileUncheckedCreateWithoutTenantInput>
  }

  export type FileUpdateWithWhereUniqueWithoutTenantInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutTenantInput, FileUncheckedUpdateWithoutTenantInput>
  }

  export type FileUpdateManyWithWhereWithoutTenantInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutTenantInput>
  }

  export type FileScalarWhereInput = {
    AND?: FileScalarWhereInput | FileScalarWhereInput[]
    OR?: FileScalarWhereInput[]
    NOT?: FileScalarWhereInput | FileScalarWhereInput[]
    id?: StringFilter<"File"> | string
    name?: StringFilter<"File"> | string
    url?: StringFilter<"File"> | string
    uploadedAt?: DateTimeFilter<"File"> | Date | string
    tenantId?: StringFilter<"File"> | string
    caseId?: StringFilter<"File"> | string
  }

  export type InviteUpsertWithWhereUniqueWithoutTenantInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutTenantInput, InviteUncheckedUpdateWithoutTenantInput>
    create: XOR<InviteCreateWithoutTenantInput, InviteUncheckedCreateWithoutTenantInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutTenantInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutTenantInput, InviteUncheckedUpdateWithoutTenantInput>
  }

  export type InviteUpdateManyWithWhereWithoutTenantInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutTenantInput>
  }

  export type InviteScalarWhereInput = {
    AND?: InviteScalarWhereInput | InviteScalarWhereInput[]
    OR?: InviteScalarWhereInput[]
    NOT?: InviteScalarWhereInput | InviteScalarWhereInput[]
    id?: StringFilter<"Invite"> | string
    email?: StringFilter<"Invite"> | string
    token?: StringFilter<"Invite"> | string
    expiresAt?: DateTimeFilter<"Invite"> | Date | string
    isUsed?: BoolFilter<"Invite"> | boolean
    createdAt?: DateTimeFilter<"Invite"> | Date | string
    updatedAt?: DateTimeFilter<"Invite"> | Date | string
    caseId?: StringFilter<"Invite"> | string
    tenantId?: StringFilter<"Invite"> | string
  }

  export type CaseEventUpsertWithWhereUniqueWithoutTenantInput = {
    where: CaseEventWhereUniqueInput
    update: XOR<CaseEventUpdateWithoutTenantInput, CaseEventUncheckedUpdateWithoutTenantInput>
    create: XOR<CaseEventCreateWithoutTenantInput, CaseEventUncheckedCreateWithoutTenantInput>
  }

  export type CaseEventUpdateWithWhereUniqueWithoutTenantInput = {
    where: CaseEventWhereUniqueInput
    data: XOR<CaseEventUpdateWithoutTenantInput, CaseEventUncheckedUpdateWithoutTenantInput>
  }

  export type CaseEventUpdateManyWithWhereWithoutTenantInput = {
    where: CaseEventScalarWhereInput
    data: XOR<CaseEventUpdateManyMutationInput, CaseEventUncheckedUpdateManyWithoutTenantInput>
  }

  export type CaseEventScalarWhereInput = {
    AND?: CaseEventScalarWhereInput | CaseEventScalarWhereInput[]
    OR?: CaseEventScalarWhereInput[]
    NOT?: CaseEventScalarWhereInput | CaseEventScalarWhereInput[]
    id?: StringFilter<"CaseEvent"> | string
    type?: StringFilter<"CaseEvent"> | string
    description?: StringNullableFilter<"CaseEvent"> | string | null
    timestamp?: DateTimeFilter<"CaseEvent"> | Date | string
    caseId?: StringFilter<"CaseEvent"> | string
    userId?: StringNullableFilter<"CaseEvent"> | string | null
    tenantId?: StringFilter<"CaseEvent"> | string
  }

  export type GeneralSettingUpsertWithoutTenantInput = {
    update: XOR<GeneralSettingUpdateWithoutTenantInput, GeneralSettingUncheckedUpdateWithoutTenantInput>
    create: XOR<GeneralSettingCreateWithoutTenantInput, GeneralSettingUncheckedCreateWithoutTenantInput>
    where?: GeneralSettingWhereInput
  }

  export type GeneralSettingUpdateToOneWithWhereWithoutTenantInput = {
    where?: GeneralSettingWhereInput
    data: XOR<GeneralSettingUpdateWithoutTenantInput, GeneralSettingUncheckedUpdateWithoutTenantInput>
  }

  export type GeneralSettingUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    businessName?: NullableStringFieldUpdateOperationsInput | string | null
    workingDays?: GeneralSettingUpdateworkingDaysInput | string[]
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralSettingUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    businessName?: NullableStringFieldUpdateOperationsInput | string | null
    workingDays?: GeneralSettingUpdateworkingDaysInput | string[]
    workingHours?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSettingUpsertWithoutTenantInput = {
    update: XOR<NotificationSettingUpdateWithoutTenantInput, NotificationSettingUncheckedUpdateWithoutTenantInput>
    create: XOR<NotificationSettingCreateWithoutTenantInput, NotificationSettingUncheckedCreateWithoutTenantInput>
    where?: NotificationSettingWhereInput
  }

  export type NotificationSettingUpdateToOneWithWhereWithoutTenantInput = {
    where?: NotificationSettingWhereInput
    data: XOR<NotificationSettingUpdateWithoutTenantInput, NotificationSettingUncheckedUpdateWithoutTenantInput>
  }

  export type NotificationSettingUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: BoolFieldUpdateOperationsInput | boolean
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    app?: BoolFieldUpdateOperationsInput | boolean
    newMessage?: BoolFieldUpdateOperationsInput | boolean
    caseUpdate?: BoolFieldUpdateOperationsInput | boolean
    newDocument?: BoolFieldUpdateOperationsInput | boolean
    signatureRequest?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSettingUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: BoolFieldUpdateOperationsInput | boolean
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    app?: BoolFieldUpdateOperationsInput | boolean
    newMessage?: BoolFieldUpdateOperationsInput | boolean
    caseUpdate?: BoolFieldUpdateOperationsInput | boolean
    newDocument?: BoolFieldUpdateOperationsInput | boolean
    signatureRequest?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecuritySettingUpsertWithoutTenantInput = {
    update: XOR<SecuritySettingUpdateWithoutTenantInput, SecuritySettingUncheckedUpdateWithoutTenantInput>
    create: XOR<SecuritySettingCreateWithoutTenantInput, SecuritySettingUncheckedCreateWithoutTenantInput>
    where?: SecuritySettingWhereInput
  }

  export type SecuritySettingUpdateToOneWithWhereWithoutTenantInput = {
    where?: SecuritySettingWhereInput
    data: XOR<SecuritySettingUpdateWithoutTenantInput, SecuritySettingUncheckedUpdateWithoutTenantInput>
  }

  export type SecuritySettingUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    twoFAEnabled?: BoolFieldUpdateOperationsInput | boolean
    autoLogoutMinutes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecuritySettingUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    twoFAEnabled?: BoolFieldUpdateOperationsInput | boolean
    autoLogoutMinutes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingSettingUpsertWithoutTenantInput = {
    update: XOR<BillingSettingUpdateWithoutTenantInput, BillingSettingUncheckedUpdateWithoutTenantInput>
    create: XOR<BillingSettingCreateWithoutTenantInput, BillingSettingUncheckedCreateWithoutTenantInput>
    where?: BillingSettingWhereInput
  }

  export type BillingSettingUpdateToOneWithWhereWithoutTenantInput = {
    where?: BillingSettingWhereInput
    data: XOR<BillingSettingUpdateWithoutTenantInput, BillingSettingUncheckedUpdateWithoutTenantInput>
  }

  export type BillingSettingUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    nextCharge?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingSettingUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    nextCharge?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationSettingUpsertWithoutTenantInput = {
    update: XOR<IntegrationSettingUpdateWithoutTenantInput, IntegrationSettingUncheckedUpdateWithoutTenantInput>
    create: XOR<IntegrationSettingCreateWithoutTenantInput, IntegrationSettingUncheckedCreateWithoutTenantInput>
    where?: IntegrationSettingWhereInput
  }

  export type IntegrationSettingUpdateToOneWithWhereWithoutTenantInput = {
    where?: IntegrationSettingWhereInput
    data: XOR<IntegrationSettingUpdateWithoutTenantInput, IntegrationSettingUncheckedUpdateWithoutTenantInput>
  }

  export type IntegrationSettingUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    d4signConnected?: BoolFieldUpdateOperationsInput | boolean
    smtpConfigured?: BoolFieldUpdateOperationsInput | boolean
    googleCalendarLinked?: BoolFieldUpdateOperationsInput | boolean
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationSettingUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    d4signConnected?: BoolFieldUpdateOperationsInput | boolean
    smtpConfigured?: BoolFieldUpdateOperationsInput | boolean
    googleCalendarLinked?: BoolFieldUpdateOperationsInput | boolean
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUpsertWithWhereUniqueWithoutTenantInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutTenantInput, EmployeeUncheckedUpdateWithoutTenantInput>
    create: XOR<EmployeeCreateWithoutTenantInput, EmployeeUncheckedCreateWithoutTenantInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutTenantInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutTenantInput, EmployeeUncheckedUpdateWithoutTenantInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutTenantInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutTenantInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    OR?: EmployeeScalarWhereInput[]
    NOT?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    id?: StringFilter<"Employee"> | string
    tenantId?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    name?: StringNullableFilter<"Employee"> | string | null
    role?: EnumUserRoleFilter<"Employee"> | $Enums.UserRole
    status?: EnumEmployeeStatusFilter<"Employee"> | $Enums.EmployeeStatus
    invitedAt?: DateTimeFilter<"Employee"> | Date | string
    acceptedAt?: DateTimeNullableFilter<"Employee"> | Date | string | null
    userId?: StringNullableFilter<"Employee"> | string | null
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
  }

  export type TenantCreateWithoutUsersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientCreateNestedManyWithoutTenantInput
    cases?: CaseCreateNestedManyWithoutTenantInput
    messages?: MessageCreateNestedManyWithoutTenantInput
    files?: FileCreateNestedManyWithoutTenantInput
    invites?: InviteCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingCreateNestedOneWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientUncheckedCreateNestedManyWithoutTenantInput
    cases?: CaseUncheckedCreateNestedManyWithoutTenantInput
    messages?: MessageUncheckedCreateNestedManyWithoutTenantInput
    files?: FileUncheckedCreateNestedManyWithoutTenantInput
    invites?: InviteUncheckedCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingUncheckedCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingUncheckedCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingUncheckedCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingUncheckedCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingUncheckedCreateNestedOneWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutUsersInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
  }

  export type CaseCreateWithoutLawyerPrimaryInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCasesInput
    clientPrimary?: ClientCreateNestedOneWithoutPrimaryCasesInput
    messages?: MessageCreateNestedManyWithoutCaseInput
    files?: FileCreateNestedManyWithoutCaseInput
    invites?: InviteCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutLawyerPrimaryInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    clientPrimaryId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutCaseInput
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    invites?: InviteUncheckedCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserUncheckedCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutLawyerPrimaryInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutLawyerPrimaryInput, CaseUncheckedCreateWithoutLawyerPrimaryInput>
  }

  export type CaseCreateManyLawyerPrimaryInputEnvelope = {
    data: CaseCreateManyLawyerPrimaryInput | CaseCreateManyLawyerPrimaryInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutMessagesInput
    tenant: TenantCreateNestedOneWithoutMessagesInput
    senderClient?: ClientCreateNestedOneWithoutSentMessagesInput
    receiverClient: ClientCreateNestedOneWithoutReceivedMessagesInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    tenantId: string
    senderClientId?: string | null
    receiverClientId: string
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type CaseParticipantUserCreateWithoutUserInput = {
    role?: $Enums.CaseParticipantUserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutParticipantsUsersInput
  }

  export type CaseParticipantUserUncheckedCreateWithoutUserInput = {
    caseId: string
    role?: $Enums.CaseParticipantUserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseParticipantUserCreateOrConnectWithoutUserInput = {
    where: CaseParticipantUserWhereUniqueInput
    create: XOR<CaseParticipantUserCreateWithoutUserInput, CaseParticipantUserUncheckedCreateWithoutUserInput>
  }

  export type CaseParticipantUserCreateManyUserInputEnvelope = {
    data: CaseParticipantUserCreateManyUserInput | CaseParticipantUserCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CaseEventCreateWithoutUserInput = {
    id?: string
    type: string
    description?: string | null
    timestamp?: Date | string
    case: CaseCreateNestedOneWithoutCaseEventsInput
    tenant: TenantCreateNestedOneWithoutCaseEventsInput
  }

  export type CaseEventUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    description?: string | null
    timestamp?: Date | string
    caseId: string
    tenantId: string
  }

  export type CaseEventCreateOrConnectWithoutUserInput = {
    where: CaseEventWhereUniqueInput
    create: XOR<CaseEventCreateWithoutUserInput, CaseEventUncheckedCreateWithoutUserInput>
  }

  export type CaseEventCreateManyUserInputEnvelope = {
    data: CaseEventCreateManyUserInput | CaseEventCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    permission: PermissionCreateNestedOneWithoutUserPermissionsInput
  }

  export type UserPermissionUncheckedCreateWithoutUserInput = {
    permissionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPermissionCreateOrConnectWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionCreateManyUserInputEnvelope = {
    data: UserPermissionCreateManyUserInput | UserPermissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutUserInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    status?: $Enums.EmployeeStatus
    invitedAt?: Date | string
    acceptedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutEmployeesInput
  }

  export type EmployeeUncheckedCreateWithoutUserInput = {
    id?: string
    tenantId: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    status?: $Enums.EmployeeStatus
    invitedAt?: Date | string
    acceptedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeCreateOrConnectWithoutUserInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
  }

  export type ClientCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutClientsInput
    primaryCases?: CaseCreateNestedManyWithoutClientPrimaryInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverClientInput
    sentMessages?: MessageCreateNestedManyWithoutSenderClientInput
    participatingCases?: CaseParticipantClientCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    primaryCases?: CaseUncheckedCreateNestedManyWithoutClientPrimaryInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverClientInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderClientInput
    participatingCases?: CaseParticipantClientUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutUserInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput>
  }

  export type TenantUpsertWithoutUsersInput = {
    update: XOR<TenantUpdateWithoutUsersInput, TenantUncheckedUpdateWithoutUsersInput>
    create: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutUsersInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutUsersInput, TenantUncheckedUpdateWithoutUsersInput>
  }

  export type TenantUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientUpdateManyWithoutTenantNestedInput
    cases?: CaseUpdateManyWithoutTenantNestedInput
    messages?: MessageUpdateManyWithoutTenantNestedInput
    files?: FileUpdateManyWithoutTenantNestedInput
    invites?: InviteUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientUncheckedUpdateManyWithoutTenantNestedInput
    cases?: CaseUncheckedUpdateManyWithoutTenantNestedInput
    messages?: MessageUncheckedUpdateManyWithoutTenantNestedInput
    files?: FileUncheckedUpdateManyWithoutTenantNestedInput
    invites?: InviteUncheckedUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUncheckedUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUncheckedUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUncheckedUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUncheckedUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUncheckedUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type CaseUpsertWithWhereUniqueWithoutLawyerPrimaryInput = {
    where: CaseWhereUniqueInput
    update: XOR<CaseUpdateWithoutLawyerPrimaryInput, CaseUncheckedUpdateWithoutLawyerPrimaryInput>
    create: XOR<CaseCreateWithoutLawyerPrimaryInput, CaseUncheckedCreateWithoutLawyerPrimaryInput>
  }

  export type CaseUpdateWithWhereUniqueWithoutLawyerPrimaryInput = {
    where: CaseWhereUniqueInput
    data: XOR<CaseUpdateWithoutLawyerPrimaryInput, CaseUncheckedUpdateWithoutLawyerPrimaryInput>
  }

  export type CaseUpdateManyWithWhereWithoutLawyerPrimaryInput = {
    where: CaseScalarWhereInput
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyWithoutLawyerPrimaryInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type CaseParticipantUserUpsertWithWhereUniqueWithoutUserInput = {
    where: CaseParticipantUserWhereUniqueInput
    update: XOR<CaseParticipantUserUpdateWithoutUserInput, CaseParticipantUserUncheckedUpdateWithoutUserInput>
    create: XOR<CaseParticipantUserCreateWithoutUserInput, CaseParticipantUserUncheckedCreateWithoutUserInput>
  }

  export type CaseParticipantUserUpdateWithWhereUniqueWithoutUserInput = {
    where: CaseParticipantUserWhereUniqueInput
    data: XOR<CaseParticipantUserUpdateWithoutUserInput, CaseParticipantUserUncheckedUpdateWithoutUserInput>
  }

  export type CaseParticipantUserUpdateManyWithWhereWithoutUserInput = {
    where: CaseParticipantUserScalarWhereInput
    data: XOR<CaseParticipantUserUpdateManyMutationInput, CaseParticipantUserUncheckedUpdateManyWithoutUserInput>
  }

  export type CaseParticipantUserScalarWhereInput = {
    AND?: CaseParticipantUserScalarWhereInput | CaseParticipantUserScalarWhereInput[]
    OR?: CaseParticipantUserScalarWhereInput[]
    NOT?: CaseParticipantUserScalarWhereInput | CaseParticipantUserScalarWhereInput[]
    caseId?: StringFilter<"CaseParticipantUser"> | string
    userId?: StringFilter<"CaseParticipantUser"> | string
    role?: EnumCaseParticipantUserRoleFilter<"CaseParticipantUser"> | $Enums.CaseParticipantUserRole
    createdAt?: DateTimeFilter<"CaseParticipantUser"> | Date | string
    updatedAt?: DateTimeFilter<"CaseParticipantUser"> | Date | string
  }

  export type CaseEventUpsertWithWhereUniqueWithoutUserInput = {
    where: CaseEventWhereUniqueInput
    update: XOR<CaseEventUpdateWithoutUserInput, CaseEventUncheckedUpdateWithoutUserInput>
    create: XOR<CaseEventCreateWithoutUserInput, CaseEventUncheckedCreateWithoutUserInput>
  }

  export type CaseEventUpdateWithWhereUniqueWithoutUserInput = {
    where: CaseEventWhereUniqueInput
    data: XOR<CaseEventUpdateWithoutUserInput, CaseEventUncheckedUpdateWithoutUserInput>
  }

  export type CaseEventUpdateManyWithWhereWithoutUserInput = {
    where: CaseEventScalarWhereInput
    data: XOR<CaseEventUpdateManyMutationInput, CaseEventUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutUserInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutUserInput>
  }

  export type EmployeeUpsertWithoutUserInput = {
    update: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUserInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    invitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutEmployeesNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    invitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUpsertWithoutUserInput = {
    update: XOR<ClientUpdateWithoutUserInput, ClientUncheckedUpdateWithoutUserInput>
    create: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutUserInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutUserInput, ClientUncheckedUpdateWithoutUserInput>
  }

  export type ClientUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutClientsNestedInput
    primaryCases?: CaseUpdateManyWithoutClientPrimaryNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverClientNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderClientNestedInput
    participatingCases?: CaseParticipantClientUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    primaryCases?: CaseUncheckedUpdateManyWithoutClientPrimaryNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverClientNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderClientNestedInput
    participatingCases?: CaseParticipantClientUncheckedUpdateManyWithoutClientNestedInput
  }

  export type TenantCreateWithoutClientsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    cases?: CaseCreateNestedManyWithoutTenantInput
    messages?: MessageCreateNestedManyWithoutTenantInput
    files?: FileCreateNestedManyWithoutTenantInput
    invites?: InviteCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingCreateNestedOneWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutClientsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    cases?: CaseUncheckedCreateNestedManyWithoutTenantInput
    messages?: MessageUncheckedCreateNestedManyWithoutTenantInput
    files?: FileUncheckedCreateNestedManyWithoutTenantInput
    invites?: InviteUncheckedCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingUncheckedCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingUncheckedCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingUncheckedCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingUncheckedCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingUncheckedCreateNestedOneWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutClientsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutClientsInput, TenantUncheckedCreateWithoutClientsInput>
  }

  export type UserCreateWithoutClientInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenant: TenantCreateNestedOneWithoutUsersInput
    primaryCases?: CaseCreateNestedManyWithoutLawyerPrimaryInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    participatingCases?: CaseParticipantUserCreateNestedManyWithoutUserInput
    caseEvents?: CaseEventCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionCreateNestedManyWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutClientInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenantId: string
    primaryCases?: CaseUncheckedCreateNestedManyWithoutLawyerPrimaryInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participatingCases?: CaseParticipantUserUncheckedCreateNestedManyWithoutUserInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutClientInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClientInput, UserUncheckedCreateWithoutClientInput>
  }

  export type CaseCreateWithoutClientPrimaryInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCasesInput
    lawyerPrimary?: UserCreateNestedOneWithoutPrimaryCasesInput
    messages?: MessageCreateNestedManyWithoutCaseInput
    files?: FileCreateNestedManyWithoutCaseInput
    invites?: InviteCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutClientPrimaryInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    lawyerPrimaryId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutCaseInput
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    invites?: InviteUncheckedCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserUncheckedCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutClientPrimaryInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutClientPrimaryInput, CaseUncheckedCreateWithoutClientPrimaryInput>
  }

  export type CaseCreateManyClientPrimaryInputEnvelope = {
    data: CaseCreateManyClientPrimaryInput | CaseCreateManyClientPrimaryInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutReceiverClientInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutMessagesInput
    tenant: TenantCreateNestedOneWithoutMessagesInput
    sender?: UserCreateNestedOneWithoutSentMessagesInput
    senderClient?: ClientCreateNestedOneWithoutSentMessagesInput
  }

  export type MessageUncheckedCreateWithoutReceiverClientInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    tenantId: string
    senderId?: string | null
    senderClientId?: string | null
  }

  export type MessageCreateOrConnectWithoutReceiverClientInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReceiverClientInput, MessageUncheckedCreateWithoutReceiverClientInput>
  }

  export type MessageCreateManyReceiverClientInputEnvelope = {
    data: MessageCreateManyReceiverClientInput | MessageCreateManyReceiverClientInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderClientInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutMessagesInput
    tenant: TenantCreateNestedOneWithoutMessagesInput
    sender?: UserCreateNestedOneWithoutSentMessagesInput
    receiverClient: ClientCreateNestedOneWithoutReceivedMessagesInput
  }

  export type MessageUncheckedCreateWithoutSenderClientInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    tenantId: string
    senderId?: string | null
    receiverClientId: string
  }

  export type MessageCreateOrConnectWithoutSenderClientInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderClientInput, MessageUncheckedCreateWithoutSenderClientInput>
  }

  export type MessageCreateManySenderClientInputEnvelope = {
    data: MessageCreateManySenderClientInput | MessageCreateManySenderClientInput[]
    skipDuplicates?: boolean
  }

  export type CaseParticipantClientCreateWithoutClientInput = {
    type?: $Enums.CaseParticipantClientType
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutParticipantsClientsInput
  }

  export type CaseParticipantClientUncheckedCreateWithoutClientInput = {
    caseId: string
    type?: $Enums.CaseParticipantClientType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseParticipantClientCreateOrConnectWithoutClientInput = {
    where: CaseParticipantClientWhereUniqueInput
    create: XOR<CaseParticipantClientCreateWithoutClientInput, CaseParticipantClientUncheckedCreateWithoutClientInput>
  }

  export type CaseParticipantClientCreateManyClientInputEnvelope = {
    data: CaseParticipantClientCreateManyClientInput | CaseParticipantClientCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutClientsInput = {
    update: XOR<TenantUpdateWithoutClientsInput, TenantUncheckedUpdateWithoutClientsInput>
    create: XOR<TenantCreateWithoutClientsInput, TenantUncheckedCreateWithoutClientsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutClientsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutClientsInput, TenantUncheckedUpdateWithoutClientsInput>
  }

  export type TenantUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    cases?: CaseUpdateManyWithoutTenantNestedInput
    messages?: MessageUpdateManyWithoutTenantNestedInput
    files?: FileUpdateManyWithoutTenantNestedInput
    invites?: InviteUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    cases?: CaseUncheckedUpdateManyWithoutTenantNestedInput
    messages?: MessageUncheckedUpdateManyWithoutTenantNestedInput
    files?: FileUncheckedUpdateManyWithoutTenantNestedInput
    invites?: InviteUncheckedUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUncheckedUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUncheckedUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUncheckedUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUncheckedUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUncheckedUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserUpsertWithoutClientInput = {
    update: XOR<UserUpdateWithoutClientInput, UserUncheckedUpdateWithoutClientInput>
    create: XOR<UserCreateWithoutClientInput, UserUncheckedCreateWithoutClientInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutClientInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutClientInput, UserUncheckedUpdateWithoutClientInput>
  }

  export type UserUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    primaryCases?: CaseUpdateManyWithoutLawyerPrimaryNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    participatingCases?: CaseParticipantUserUpdateManyWithoutUserNestedInput
    caseEvents?: CaseEventUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUpdateManyWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenantId?: StringFieldUpdateOperationsInput | string
    primaryCases?: CaseUncheckedUpdateManyWithoutLawyerPrimaryNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participatingCases?: CaseParticipantUserUncheckedUpdateManyWithoutUserNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
  }

  export type CaseUpsertWithWhereUniqueWithoutClientPrimaryInput = {
    where: CaseWhereUniqueInput
    update: XOR<CaseUpdateWithoutClientPrimaryInput, CaseUncheckedUpdateWithoutClientPrimaryInput>
    create: XOR<CaseCreateWithoutClientPrimaryInput, CaseUncheckedCreateWithoutClientPrimaryInput>
  }

  export type CaseUpdateWithWhereUniqueWithoutClientPrimaryInput = {
    where: CaseWhereUniqueInput
    data: XOR<CaseUpdateWithoutClientPrimaryInput, CaseUncheckedUpdateWithoutClientPrimaryInput>
  }

  export type CaseUpdateManyWithWhereWithoutClientPrimaryInput = {
    where: CaseScalarWhereInput
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyWithoutClientPrimaryInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutReceiverClientInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReceiverClientInput, MessageUncheckedUpdateWithoutReceiverClientInput>
    create: XOR<MessageCreateWithoutReceiverClientInput, MessageUncheckedCreateWithoutReceiverClientInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReceiverClientInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReceiverClientInput, MessageUncheckedUpdateWithoutReceiverClientInput>
  }

  export type MessageUpdateManyWithWhereWithoutReceiverClientInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReceiverClientInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderClientInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderClientInput, MessageUncheckedUpdateWithoutSenderClientInput>
    create: XOR<MessageCreateWithoutSenderClientInput, MessageUncheckedCreateWithoutSenderClientInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderClientInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderClientInput, MessageUncheckedUpdateWithoutSenderClientInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderClientInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderClientInput>
  }

  export type CaseParticipantClientUpsertWithWhereUniqueWithoutClientInput = {
    where: CaseParticipantClientWhereUniqueInput
    update: XOR<CaseParticipantClientUpdateWithoutClientInput, CaseParticipantClientUncheckedUpdateWithoutClientInput>
    create: XOR<CaseParticipantClientCreateWithoutClientInput, CaseParticipantClientUncheckedCreateWithoutClientInput>
  }

  export type CaseParticipantClientUpdateWithWhereUniqueWithoutClientInput = {
    where: CaseParticipantClientWhereUniqueInput
    data: XOR<CaseParticipantClientUpdateWithoutClientInput, CaseParticipantClientUncheckedUpdateWithoutClientInput>
  }

  export type CaseParticipantClientUpdateManyWithWhereWithoutClientInput = {
    where: CaseParticipantClientScalarWhereInput
    data: XOR<CaseParticipantClientUpdateManyMutationInput, CaseParticipantClientUncheckedUpdateManyWithoutClientInput>
  }

  export type CaseParticipantClientScalarWhereInput = {
    AND?: CaseParticipantClientScalarWhereInput | CaseParticipantClientScalarWhereInput[]
    OR?: CaseParticipantClientScalarWhereInput[]
    NOT?: CaseParticipantClientScalarWhereInput | CaseParticipantClientScalarWhereInput[]
    caseId?: StringFilter<"CaseParticipantClient"> | string
    clientId?: StringFilter<"CaseParticipantClient"> | string
    type?: EnumCaseParticipantClientTypeFilter<"CaseParticipantClient"> | $Enums.CaseParticipantClientType
    createdAt?: DateTimeFilter<"CaseParticipantClient"> | Date | string
    updatedAt?: DateTimeFilter<"CaseParticipantClient"> | Date | string
  }

  export type TenantCreateWithoutCasesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    clients?: ClientCreateNestedManyWithoutTenantInput
    messages?: MessageCreateNestedManyWithoutTenantInput
    files?: FileCreateNestedManyWithoutTenantInput
    invites?: InviteCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingCreateNestedOneWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutCasesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    clients?: ClientUncheckedCreateNestedManyWithoutTenantInput
    messages?: MessageUncheckedCreateNestedManyWithoutTenantInput
    files?: FileUncheckedCreateNestedManyWithoutTenantInput
    invites?: InviteUncheckedCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingUncheckedCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingUncheckedCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingUncheckedCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingUncheckedCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingUncheckedCreateNestedOneWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutCasesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutCasesInput, TenantUncheckedCreateWithoutCasesInput>
  }

  export type UserCreateWithoutPrimaryCasesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenant: TenantCreateNestedOneWithoutUsersInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    participatingCases?: CaseParticipantUserCreateNestedManyWithoutUserInput
    caseEvents?: CaseEventCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionCreateNestedManyWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    Client?: ClientCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPrimaryCasesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenantId: string
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participatingCases?: CaseParticipantUserUncheckedCreateNestedManyWithoutUserInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    Client?: ClientUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPrimaryCasesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPrimaryCasesInput, UserUncheckedCreateWithoutPrimaryCasesInput>
  }

  export type ClientCreateWithoutPrimaryCasesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutClientsInput
    user?: UserCreateNestedOneWithoutClientInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverClientInput
    sentMessages?: MessageCreateNestedManyWithoutSenderClientInput
    participatingCases?: CaseParticipantClientCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutPrimaryCasesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    userId?: string | null
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverClientInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderClientInput
    participatingCases?: CaseParticipantClientUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutPrimaryCasesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutPrimaryCasesInput, ClientUncheckedCreateWithoutPrimaryCasesInput>
  }

  export type MessageCreateWithoutCaseInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutMessagesInput
    sender?: UserCreateNestedOneWithoutSentMessagesInput
    senderClient?: ClientCreateNestedOneWithoutSentMessagesInput
    receiverClient: ClientCreateNestedOneWithoutReceivedMessagesInput
  }

  export type MessageUncheckedCreateWithoutCaseInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    senderId?: string | null
    senderClientId?: string | null
    receiverClientId: string
  }

  export type MessageCreateOrConnectWithoutCaseInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutCaseInput, MessageUncheckedCreateWithoutCaseInput>
  }

  export type MessageCreateManyCaseInputEnvelope = {
    data: MessageCreateManyCaseInput | MessageCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutCaseInput = {
    id?: string
    name: string
    url: string
    uploadedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutCaseInput = {
    id?: string
    name: string
    url: string
    uploadedAt?: Date | string
    tenantId: string
  }

  export type FileCreateOrConnectWithoutCaseInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput>
  }

  export type FileCreateManyCaseInputEnvelope = {
    data: FileCreateManyCaseInput | FileCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type InviteCreateWithoutCaseInput = {
    id?: string
    email: string
    token: string
    expiresAt: Date | string
    isUsed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutInvitesInput
  }

  export type InviteUncheckedCreateWithoutCaseInput = {
    id?: string
    email: string
    token: string
    expiresAt: Date | string
    isUsed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type InviteCreateOrConnectWithoutCaseInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutCaseInput, InviteUncheckedCreateWithoutCaseInput>
  }

  export type InviteCreateManyCaseInputEnvelope = {
    data: InviteCreateManyCaseInput | InviteCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type CaseEventCreateWithoutCaseInput = {
    id?: string
    type: string
    description?: string | null
    timestamp?: Date | string
    user?: UserCreateNestedOneWithoutCaseEventsInput
    tenant: TenantCreateNestedOneWithoutCaseEventsInput
  }

  export type CaseEventUncheckedCreateWithoutCaseInput = {
    id?: string
    type: string
    description?: string | null
    timestamp?: Date | string
    userId?: string | null
    tenantId: string
  }

  export type CaseEventCreateOrConnectWithoutCaseInput = {
    where: CaseEventWhereUniqueInput
    create: XOR<CaseEventCreateWithoutCaseInput, CaseEventUncheckedCreateWithoutCaseInput>
  }

  export type CaseEventCreateManyCaseInputEnvelope = {
    data: CaseEventCreateManyCaseInput | CaseEventCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type CaseParticipantUserCreateWithoutCaseInput = {
    role?: $Enums.CaseParticipantUserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutParticipatingCasesInput
  }

  export type CaseParticipantUserUncheckedCreateWithoutCaseInput = {
    userId: string
    role?: $Enums.CaseParticipantUserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseParticipantUserCreateOrConnectWithoutCaseInput = {
    where: CaseParticipantUserWhereUniqueInput
    create: XOR<CaseParticipantUserCreateWithoutCaseInput, CaseParticipantUserUncheckedCreateWithoutCaseInput>
  }

  export type CaseParticipantUserCreateManyCaseInputEnvelope = {
    data: CaseParticipantUserCreateManyCaseInput | CaseParticipantUserCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type CaseParticipantClientCreateWithoutCaseInput = {
    type?: $Enums.CaseParticipantClientType
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutParticipatingCasesInput
  }

  export type CaseParticipantClientUncheckedCreateWithoutCaseInput = {
    clientId: string
    type?: $Enums.CaseParticipantClientType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseParticipantClientCreateOrConnectWithoutCaseInput = {
    where: CaseParticipantClientWhereUniqueInput
    create: XOR<CaseParticipantClientCreateWithoutCaseInput, CaseParticipantClientUncheckedCreateWithoutCaseInput>
  }

  export type CaseParticipantClientCreateManyCaseInputEnvelope = {
    data: CaseParticipantClientCreateManyCaseInput | CaseParticipantClientCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutCasesInput = {
    update: XOR<TenantUpdateWithoutCasesInput, TenantUncheckedUpdateWithoutCasesInput>
    create: XOR<TenantCreateWithoutCasesInput, TenantUncheckedCreateWithoutCasesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutCasesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutCasesInput, TenantUncheckedUpdateWithoutCasesInput>
  }

  export type TenantUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    clients?: ClientUpdateManyWithoutTenantNestedInput
    messages?: MessageUpdateManyWithoutTenantNestedInput
    files?: FileUpdateManyWithoutTenantNestedInput
    invites?: InviteUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    clients?: ClientUncheckedUpdateManyWithoutTenantNestedInput
    messages?: MessageUncheckedUpdateManyWithoutTenantNestedInput
    files?: FileUncheckedUpdateManyWithoutTenantNestedInput
    invites?: InviteUncheckedUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUncheckedUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUncheckedUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUncheckedUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUncheckedUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUncheckedUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserUpsertWithoutPrimaryCasesInput = {
    update: XOR<UserUpdateWithoutPrimaryCasesInput, UserUncheckedUpdateWithoutPrimaryCasesInput>
    create: XOR<UserCreateWithoutPrimaryCasesInput, UserUncheckedCreateWithoutPrimaryCasesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPrimaryCasesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPrimaryCasesInput, UserUncheckedUpdateWithoutPrimaryCasesInput>
  }

  export type UserUpdateWithoutPrimaryCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    participatingCases?: CaseParticipantUserUpdateManyWithoutUserNestedInput
    caseEvents?: CaseEventUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUpdateManyWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    Client?: ClientUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPrimaryCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenantId?: StringFieldUpdateOperationsInput | string
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participatingCases?: CaseParticipantUserUncheckedUpdateManyWithoutUserNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    Client?: ClientUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ClientUpsertWithoutPrimaryCasesInput = {
    update: XOR<ClientUpdateWithoutPrimaryCasesInput, ClientUncheckedUpdateWithoutPrimaryCasesInput>
    create: XOR<ClientCreateWithoutPrimaryCasesInput, ClientUncheckedCreateWithoutPrimaryCasesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutPrimaryCasesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutPrimaryCasesInput, ClientUncheckedUpdateWithoutPrimaryCasesInput>
  }

  export type ClientUpdateWithoutPrimaryCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutClientsNestedInput
    user?: UserUpdateOneWithoutClientNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverClientNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderClientNestedInput
    participatingCases?: CaseParticipantClientUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutPrimaryCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverClientNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderClientNestedInput
    participatingCases?: CaseParticipantClientUncheckedUpdateManyWithoutClientNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutCaseInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutCaseInput, MessageUncheckedUpdateWithoutCaseInput>
    create: XOR<MessageCreateWithoutCaseInput, MessageUncheckedCreateWithoutCaseInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutCaseInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutCaseInput, MessageUncheckedUpdateWithoutCaseInput>
  }

  export type MessageUpdateManyWithWhereWithoutCaseInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutCaseInput>
  }

  export type FileUpsertWithWhereUniqueWithoutCaseInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutCaseInput, FileUncheckedUpdateWithoutCaseInput>
    create: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput>
  }

  export type FileUpdateWithWhereUniqueWithoutCaseInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutCaseInput, FileUncheckedUpdateWithoutCaseInput>
  }

  export type FileUpdateManyWithWhereWithoutCaseInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutCaseInput>
  }

  export type InviteUpsertWithWhereUniqueWithoutCaseInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutCaseInput, InviteUncheckedUpdateWithoutCaseInput>
    create: XOR<InviteCreateWithoutCaseInput, InviteUncheckedCreateWithoutCaseInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutCaseInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutCaseInput, InviteUncheckedUpdateWithoutCaseInput>
  }

  export type InviteUpdateManyWithWhereWithoutCaseInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutCaseInput>
  }

  export type CaseEventUpsertWithWhereUniqueWithoutCaseInput = {
    where: CaseEventWhereUniqueInput
    update: XOR<CaseEventUpdateWithoutCaseInput, CaseEventUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseEventCreateWithoutCaseInput, CaseEventUncheckedCreateWithoutCaseInput>
  }

  export type CaseEventUpdateWithWhereUniqueWithoutCaseInput = {
    where: CaseEventWhereUniqueInput
    data: XOR<CaseEventUpdateWithoutCaseInput, CaseEventUncheckedUpdateWithoutCaseInput>
  }

  export type CaseEventUpdateManyWithWhereWithoutCaseInput = {
    where: CaseEventScalarWhereInput
    data: XOR<CaseEventUpdateManyMutationInput, CaseEventUncheckedUpdateManyWithoutCaseInput>
  }

  export type CaseParticipantUserUpsertWithWhereUniqueWithoutCaseInput = {
    where: CaseParticipantUserWhereUniqueInput
    update: XOR<CaseParticipantUserUpdateWithoutCaseInput, CaseParticipantUserUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseParticipantUserCreateWithoutCaseInput, CaseParticipantUserUncheckedCreateWithoutCaseInput>
  }

  export type CaseParticipantUserUpdateWithWhereUniqueWithoutCaseInput = {
    where: CaseParticipantUserWhereUniqueInput
    data: XOR<CaseParticipantUserUpdateWithoutCaseInput, CaseParticipantUserUncheckedUpdateWithoutCaseInput>
  }

  export type CaseParticipantUserUpdateManyWithWhereWithoutCaseInput = {
    where: CaseParticipantUserScalarWhereInput
    data: XOR<CaseParticipantUserUpdateManyMutationInput, CaseParticipantUserUncheckedUpdateManyWithoutCaseInput>
  }

  export type CaseParticipantClientUpsertWithWhereUniqueWithoutCaseInput = {
    where: CaseParticipantClientWhereUniqueInput
    update: XOR<CaseParticipantClientUpdateWithoutCaseInput, CaseParticipantClientUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseParticipantClientCreateWithoutCaseInput, CaseParticipantClientUncheckedCreateWithoutCaseInput>
  }

  export type CaseParticipantClientUpdateWithWhereUniqueWithoutCaseInput = {
    where: CaseParticipantClientWhereUniqueInput
    data: XOR<CaseParticipantClientUpdateWithoutCaseInput, CaseParticipantClientUncheckedUpdateWithoutCaseInput>
  }

  export type CaseParticipantClientUpdateManyWithWhereWithoutCaseInput = {
    where: CaseParticipantClientScalarWhereInput
    data: XOR<CaseParticipantClientUpdateManyMutationInput, CaseParticipantClientUncheckedUpdateManyWithoutCaseInput>
  }

  export type CaseCreateWithoutParticipantsUsersInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCasesInput
    lawyerPrimary?: UserCreateNestedOneWithoutPrimaryCasesInput
    clientPrimary?: ClientCreateNestedOneWithoutPrimaryCasesInput
    messages?: MessageCreateNestedManyWithoutCaseInput
    files?: FileCreateNestedManyWithoutCaseInput
    invites?: InviteCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutParticipantsUsersInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    lawyerPrimaryId?: string | null
    clientPrimaryId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutCaseInput
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    invites?: InviteUncheckedCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutParticipantsUsersInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutParticipantsUsersInput, CaseUncheckedCreateWithoutParticipantsUsersInput>
  }

  export type UserCreateWithoutParticipatingCasesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenant: TenantCreateNestedOneWithoutUsersInput
    primaryCases?: CaseCreateNestedManyWithoutLawyerPrimaryInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    caseEvents?: CaseEventCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionCreateNestedManyWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    Client?: ClientCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutParticipatingCasesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenantId: string
    primaryCases?: CaseUncheckedCreateNestedManyWithoutLawyerPrimaryInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    Client?: ClientUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutParticipatingCasesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutParticipatingCasesInput, UserUncheckedCreateWithoutParticipatingCasesInput>
  }

  export type CaseUpsertWithoutParticipantsUsersInput = {
    update: XOR<CaseUpdateWithoutParticipantsUsersInput, CaseUncheckedUpdateWithoutParticipantsUsersInput>
    create: XOR<CaseCreateWithoutParticipantsUsersInput, CaseUncheckedCreateWithoutParticipantsUsersInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutParticipantsUsersInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutParticipantsUsersInput, CaseUncheckedUpdateWithoutParticipantsUsersInput>
  }

  export type CaseUpdateWithoutParticipantsUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCasesNestedInput
    lawyerPrimary?: UserUpdateOneWithoutPrimaryCasesNestedInput
    clientPrimary?: ClientUpdateOneWithoutPrimaryCasesNestedInput
    messages?: MessageUpdateManyWithoutCaseNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    invites?: InviteUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutParticipantsUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    lawyerPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    clientPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutCaseNestedInput
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    invites?: InviteUncheckedUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type UserUpsertWithoutParticipatingCasesInput = {
    update: XOR<UserUpdateWithoutParticipatingCasesInput, UserUncheckedUpdateWithoutParticipatingCasesInput>
    create: XOR<UserCreateWithoutParticipatingCasesInput, UserUncheckedCreateWithoutParticipatingCasesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutParticipatingCasesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutParticipatingCasesInput, UserUncheckedUpdateWithoutParticipatingCasesInput>
  }

  export type UserUpdateWithoutParticipatingCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    primaryCases?: CaseUpdateManyWithoutLawyerPrimaryNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    caseEvents?: CaseEventUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUpdateManyWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    Client?: ClientUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutParticipatingCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenantId?: StringFieldUpdateOperationsInput | string
    primaryCases?: CaseUncheckedUpdateManyWithoutLawyerPrimaryNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    Client?: ClientUncheckedUpdateOneWithoutUserNestedInput
  }

  export type CaseCreateWithoutParticipantsClientsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCasesInput
    lawyerPrimary?: UserCreateNestedOneWithoutPrimaryCasesInput
    clientPrimary?: ClientCreateNestedOneWithoutPrimaryCasesInput
    messages?: MessageCreateNestedManyWithoutCaseInput
    files?: FileCreateNestedManyWithoutCaseInput
    invites?: InviteCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutParticipantsClientsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    lawyerPrimaryId?: string | null
    clientPrimaryId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutCaseInput
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    invites?: InviteUncheckedCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutParticipantsClientsInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutParticipantsClientsInput, CaseUncheckedCreateWithoutParticipantsClientsInput>
  }

  export type ClientCreateWithoutParticipatingCasesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutClientsInput
    user?: UserCreateNestedOneWithoutClientInput
    primaryCases?: CaseCreateNestedManyWithoutClientPrimaryInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverClientInput
    sentMessages?: MessageCreateNestedManyWithoutSenderClientInput
  }

  export type ClientUncheckedCreateWithoutParticipatingCasesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    userId?: string | null
    primaryCases?: CaseUncheckedCreateNestedManyWithoutClientPrimaryInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverClientInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderClientInput
  }

  export type ClientCreateOrConnectWithoutParticipatingCasesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutParticipatingCasesInput, ClientUncheckedCreateWithoutParticipatingCasesInput>
  }

  export type CaseUpsertWithoutParticipantsClientsInput = {
    update: XOR<CaseUpdateWithoutParticipantsClientsInput, CaseUncheckedUpdateWithoutParticipantsClientsInput>
    create: XOR<CaseCreateWithoutParticipantsClientsInput, CaseUncheckedCreateWithoutParticipantsClientsInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutParticipantsClientsInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutParticipantsClientsInput, CaseUncheckedUpdateWithoutParticipantsClientsInput>
  }

  export type CaseUpdateWithoutParticipantsClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCasesNestedInput
    lawyerPrimary?: UserUpdateOneWithoutPrimaryCasesNestedInput
    clientPrimary?: ClientUpdateOneWithoutPrimaryCasesNestedInput
    messages?: MessageUpdateManyWithoutCaseNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    invites?: InviteUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutParticipantsClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    lawyerPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    clientPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutCaseNestedInput
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    invites?: InviteUncheckedUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type ClientUpsertWithoutParticipatingCasesInput = {
    update: XOR<ClientUpdateWithoutParticipatingCasesInput, ClientUncheckedUpdateWithoutParticipatingCasesInput>
    create: XOR<ClientCreateWithoutParticipatingCasesInput, ClientUncheckedCreateWithoutParticipatingCasesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutParticipatingCasesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutParticipatingCasesInput, ClientUncheckedUpdateWithoutParticipatingCasesInput>
  }

  export type ClientUpdateWithoutParticipatingCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutClientsNestedInput
    user?: UserUpdateOneWithoutClientNestedInput
    primaryCases?: CaseUpdateManyWithoutClientPrimaryNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverClientNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutParticipatingCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCases?: CaseUncheckedUpdateManyWithoutClientPrimaryNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverClientNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderClientNestedInput
  }

  export type CaseCreateWithoutCaseEventsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCasesInput
    lawyerPrimary?: UserCreateNestedOneWithoutPrimaryCasesInput
    clientPrimary?: ClientCreateNestedOneWithoutPrimaryCasesInput
    messages?: MessageCreateNestedManyWithoutCaseInput
    files?: FileCreateNestedManyWithoutCaseInput
    invites?: InviteCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutCaseEventsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    lawyerPrimaryId?: string | null
    clientPrimaryId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutCaseInput
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    invites?: InviteUncheckedCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserUncheckedCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutCaseEventsInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutCaseEventsInput, CaseUncheckedCreateWithoutCaseEventsInput>
  }

  export type UserCreateWithoutCaseEventsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenant: TenantCreateNestedOneWithoutUsersInput
    primaryCases?: CaseCreateNestedManyWithoutLawyerPrimaryInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    participatingCases?: CaseParticipantUserCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionCreateNestedManyWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    Client?: ClientCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCaseEventsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenantId: string
    primaryCases?: CaseUncheckedCreateNestedManyWithoutLawyerPrimaryInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participatingCases?: CaseParticipantUserUncheckedCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    Client?: ClientUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCaseEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCaseEventsInput, UserUncheckedCreateWithoutCaseEventsInput>
  }

  export type TenantCreateWithoutCaseEventsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    clients?: ClientCreateNestedManyWithoutTenantInput
    cases?: CaseCreateNestedManyWithoutTenantInput
    messages?: MessageCreateNestedManyWithoutTenantInput
    files?: FileCreateNestedManyWithoutTenantInput
    invites?: InviteCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingCreateNestedOneWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutCaseEventsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    clients?: ClientUncheckedCreateNestedManyWithoutTenantInput
    cases?: CaseUncheckedCreateNestedManyWithoutTenantInput
    messages?: MessageUncheckedCreateNestedManyWithoutTenantInput
    files?: FileUncheckedCreateNestedManyWithoutTenantInput
    invites?: InviteUncheckedCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingUncheckedCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingUncheckedCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingUncheckedCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingUncheckedCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingUncheckedCreateNestedOneWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutCaseEventsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutCaseEventsInput, TenantUncheckedCreateWithoutCaseEventsInput>
  }

  export type CaseUpsertWithoutCaseEventsInput = {
    update: XOR<CaseUpdateWithoutCaseEventsInput, CaseUncheckedUpdateWithoutCaseEventsInput>
    create: XOR<CaseCreateWithoutCaseEventsInput, CaseUncheckedCreateWithoutCaseEventsInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutCaseEventsInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutCaseEventsInput, CaseUncheckedUpdateWithoutCaseEventsInput>
  }

  export type CaseUpdateWithoutCaseEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCasesNestedInput
    lawyerPrimary?: UserUpdateOneWithoutPrimaryCasesNestedInput
    clientPrimary?: ClientUpdateOneWithoutPrimaryCasesNestedInput
    messages?: MessageUpdateManyWithoutCaseNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    invites?: InviteUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutCaseEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    lawyerPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    clientPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutCaseNestedInput
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    invites?: InviteUncheckedUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUncheckedUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type UserUpsertWithoutCaseEventsInput = {
    update: XOR<UserUpdateWithoutCaseEventsInput, UserUncheckedUpdateWithoutCaseEventsInput>
    create: XOR<UserCreateWithoutCaseEventsInput, UserUncheckedCreateWithoutCaseEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCaseEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCaseEventsInput, UserUncheckedUpdateWithoutCaseEventsInput>
  }

  export type UserUpdateWithoutCaseEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    primaryCases?: CaseUpdateManyWithoutLawyerPrimaryNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    participatingCases?: CaseParticipantUserUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUpdateManyWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    Client?: ClientUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCaseEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenantId?: StringFieldUpdateOperationsInput | string
    primaryCases?: CaseUncheckedUpdateManyWithoutLawyerPrimaryNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participatingCases?: CaseParticipantUserUncheckedUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    Client?: ClientUncheckedUpdateOneWithoutUserNestedInput
  }

  export type TenantUpsertWithoutCaseEventsInput = {
    update: XOR<TenantUpdateWithoutCaseEventsInput, TenantUncheckedUpdateWithoutCaseEventsInput>
    create: XOR<TenantCreateWithoutCaseEventsInput, TenantUncheckedCreateWithoutCaseEventsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutCaseEventsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutCaseEventsInput, TenantUncheckedUpdateWithoutCaseEventsInput>
  }

  export type TenantUpdateWithoutCaseEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    clients?: ClientUpdateManyWithoutTenantNestedInput
    cases?: CaseUpdateManyWithoutTenantNestedInput
    messages?: MessageUpdateManyWithoutTenantNestedInput
    files?: FileUpdateManyWithoutTenantNestedInput
    invites?: InviteUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutCaseEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    clients?: ClientUncheckedUpdateManyWithoutTenantNestedInput
    cases?: CaseUncheckedUpdateManyWithoutTenantNestedInput
    messages?: MessageUncheckedUpdateManyWithoutTenantNestedInput
    files?: FileUncheckedUpdateManyWithoutTenantNestedInput
    invites?: InviteUncheckedUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUncheckedUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUncheckedUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUncheckedUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUncheckedUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUncheckedUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type CaseCreateWithoutMessagesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCasesInput
    lawyerPrimary?: UserCreateNestedOneWithoutPrimaryCasesInput
    clientPrimary?: ClientCreateNestedOneWithoutPrimaryCasesInput
    files?: FileCreateNestedManyWithoutCaseInput
    invites?: InviteCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutMessagesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    lawyerPrimaryId?: string | null
    clientPrimaryId?: string | null
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    invites?: InviteUncheckedCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserUncheckedCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutMessagesInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutMessagesInput, CaseUncheckedCreateWithoutMessagesInput>
  }

  export type TenantCreateWithoutMessagesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    clients?: ClientCreateNestedManyWithoutTenantInput
    cases?: CaseCreateNestedManyWithoutTenantInput
    files?: FileCreateNestedManyWithoutTenantInput
    invites?: InviteCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingCreateNestedOneWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutMessagesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    clients?: ClientUncheckedCreateNestedManyWithoutTenantInput
    cases?: CaseUncheckedCreateNestedManyWithoutTenantInput
    files?: FileUncheckedCreateNestedManyWithoutTenantInput
    invites?: InviteUncheckedCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingUncheckedCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingUncheckedCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingUncheckedCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingUncheckedCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingUncheckedCreateNestedOneWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutMessagesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutMessagesInput, TenantUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutSentMessagesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenant: TenantCreateNestedOneWithoutUsersInput
    primaryCases?: CaseCreateNestedManyWithoutLawyerPrimaryInput
    participatingCases?: CaseParticipantUserCreateNestedManyWithoutUserInput
    caseEvents?: CaseEventCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionCreateNestedManyWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    Client?: ClientCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentMessagesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenantId: string
    primaryCases?: CaseUncheckedCreateNestedManyWithoutLawyerPrimaryInput
    participatingCases?: CaseParticipantUserUncheckedCreateNestedManyWithoutUserInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    Client?: ClientUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
  }

  export type ClientCreateWithoutSentMessagesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutClientsInput
    user?: UserCreateNestedOneWithoutClientInput
    primaryCases?: CaseCreateNestedManyWithoutClientPrimaryInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverClientInput
    participatingCases?: CaseParticipantClientCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutSentMessagesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    userId?: string | null
    primaryCases?: CaseUncheckedCreateNestedManyWithoutClientPrimaryInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverClientInput
    participatingCases?: CaseParticipantClientUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutSentMessagesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutSentMessagesInput, ClientUncheckedCreateWithoutSentMessagesInput>
  }

  export type ClientCreateWithoutReceivedMessagesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutClientsInput
    user?: UserCreateNestedOneWithoutClientInput
    primaryCases?: CaseCreateNestedManyWithoutClientPrimaryInput
    sentMessages?: MessageCreateNestedManyWithoutSenderClientInput
    participatingCases?: CaseParticipantClientCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutReceivedMessagesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    userId?: string | null
    primaryCases?: CaseUncheckedCreateNestedManyWithoutClientPrimaryInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderClientInput
    participatingCases?: CaseParticipantClientUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutReceivedMessagesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutReceivedMessagesInput, ClientUncheckedCreateWithoutReceivedMessagesInput>
  }

  export type CaseUpsertWithoutMessagesInput = {
    update: XOR<CaseUpdateWithoutMessagesInput, CaseUncheckedUpdateWithoutMessagesInput>
    create: XOR<CaseCreateWithoutMessagesInput, CaseUncheckedCreateWithoutMessagesInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutMessagesInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutMessagesInput, CaseUncheckedUpdateWithoutMessagesInput>
  }

  export type CaseUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCasesNestedInput
    lawyerPrimary?: UserUpdateOneWithoutPrimaryCasesNestedInput
    clientPrimary?: ClientUpdateOneWithoutPrimaryCasesNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    invites?: InviteUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    lawyerPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    clientPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    invites?: InviteUncheckedUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUncheckedUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type TenantUpsertWithoutMessagesInput = {
    update: XOR<TenantUpdateWithoutMessagesInput, TenantUncheckedUpdateWithoutMessagesInput>
    create: XOR<TenantCreateWithoutMessagesInput, TenantUncheckedCreateWithoutMessagesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutMessagesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutMessagesInput, TenantUncheckedUpdateWithoutMessagesInput>
  }

  export type TenantUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    clients?: ClientUpdateManyWithoutTenantNestedInput
    cases?: CaseUpdateManyWithoutTenantNestedInput
    files?: FileUpdateManyWithoutTenantNestedInput
    invites?: InviteUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    clients?: ClientUncheckedUpdateManyWithoutTenantNestedInput
    cases?: CaseUncheckedUpdateManyWithoutTenantNestedInput
    files?: FileUncheckedUpdateManyWithoutTenantNestedInput
    invites?: InviteUncheckedUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUncheckedUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUncheckedUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUncheckedUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUncheckedUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUncheckedUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserUpsertWithoutSentMessagesInput = {
    update: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    primaryCases?: CaseUpdateManyWithoutLawyerPrimaryNestedInput
    participatingCases?: CaseParticipantUserUpdateManyWithoutUserNestedInput
    caseEvents?: CaseEventUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUpdateManyWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    Client?: ClientUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenantId?: StringFieldUpdateOperationsInput | string
    primaryCases?: CaseUncheckedUpdateManyWithoutLawyerPrimaryNestedInput
    participatingCases?: CaseParticipantUserUncheckedUpdateManyWithoutUserNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    Client?: ClientUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ClientUpsertWithoutSentMessagesInput = {
    update: XOR<ClientUpdateWithoutSentMessagesInput, ClientUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<ClientCreateWithoutSentMessagesInput, ClientUncheckedCreateWithoutSentMessagesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutSentMessagesInput, ClientUncheckedUpdateWithoutSentMessagesInput>
  }

  export type ClientUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutClientsNestedInput
    user?: UserUpdateOneWithoutClientNestedInput
    primaryCases?: CaseUpdateManyWithoutClientPrimaryNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverClientNestedInput
    participatingCases?: CaseParticipantClientUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCases?: CaseUncheckedUpdateManyWithoutClientPrimaryNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverClientNestedInput
    participatingCases?: CaseParticipantClientUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientUpsertWithoutReceivedMessagesInput = {
    update: XOR<ClientUpdateWithoutReceivedMessagesInput, ClientUncheckedUpdateWithoutReceivedMessagesInput>
    create: XOR<ClientCreateWithoutReceivedMessagesInput, ClientUncheckedCreateWithoutReceivedMessagesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutReceivedMessagesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutReceivedMessagesInput, ClientUncheckedUpdateWithoutReceivedMessagesInput>
  }

  export type ClientUpdateWithoutReceivedMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutClientsNestedInput
    user?: UserUpdateOneWithoutClientNestedInput
    primaryCases?: CaseUpdateManyWithoutClientPrimaryNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderClientNestedInput
    participatingCases?: CaseParticipantClientUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutReceivedMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCases?: CaseUncheckedUpdateManyWithoutClientPrimaryNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderClientNestedInput
    participatingCases?: CaseParticipantClientUncheckedUpdateManyWithoutClientNestedInput
  }

  export type TenantCreateWithoutFilesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    clients?: ClientCreateNestedManyWithoutTenantInput
    cases?: CaseCreateNestedManyWithoutTenantInput
    messages?: MessageCreateNestedManyWithoutTenantInput
    invites?: InviteCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingCreateNestedOneWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    clients?: ClientUncheckedCreateNestedManyWithoutTenantInput
    cases?: CaseUncheckedCreateNestedManyWithoutTenantInput
    messages?: MessageUncheckedCreateNestedManyWithoutTenantInput
    invites?: InviteUncheckedCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingUncheckedCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingUncheckedCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingUncheckedCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingUncheckedCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingUncheckedCreateNestedOneWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutFilesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutFilesInput, TenantUncheckedCreateWithoutFilesInput>
  }

  export type CaseCreateWithoutFilesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCasesInput
    lawyerPrimary?: UserCreateNestedOneWithoutPrimaryCasesInput
    clientPrimary?: ClientCreateNestedOneWithoutPrimaryCasesInput
    messages?: MessageCreateNestedManyWithoutCaseInput
    invites?: InviteCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutFilesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    lawyerPrimaryId?: string | null
    clientPrimaryId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutCaseInput
    invites?: InviteUncheckedCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserUncheckedCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutFilesInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutFilesInput, CaseUncheckedCreateWithoutFilesInput>
  }

  export type TenantUpsertWithoutFilesInput = {
    update: XOR<TenantUpdateWithoutFilesInput, TenantUncheckedUpdateWithoutFilesInput>
    create: XOR<TenantCreateWithoutFilesInput, TenantUncheckedCreateWithoutFilesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutFilesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutFilesInput, TenantUncheckedUpdateWithoutFilesInput>
  }

  export type TenantUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    clients?: ClientUpdateManyWithoutTenantNestedInput
    cases?: CaseUpdateManyWithoutTenantNestedInput
    messages?: MessageUpdateManyWithoutTenantNestedInput
    invites?: InviteUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    clients?: ClientUncheckedUpdateManyWithoutTenantNestedInput
    cases?: CaseUncheckedUpdateManyWithoutTenantNestedInput
    messages?: MessageUncheckedUpdateManyWithoutTenantNestedInput
    invites?: InviteUncheckedUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUncheckedUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUncheckedUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUncheckedUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUncheckedUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUncheckedUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type CaseUpsertWithoutFilesInput = {
    update: XOR<CaseUpdateWithoutFilesInput, CaseUncheckedUpdateWithoutFilesInput>
    create: XOR<CaseCreateWithoutFilesInput, CaseUncheckedCreateWithoutFilesInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutFilesInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutFilesInput, CaseUncheckedUpdateWithoutFilesInput>
  }

  export type CaseUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCasesNestedInput
    lawyerPrimary?: UserUpdateOneWithoutPrimaryCasesNestedInput
    clientPrimary?: ClientUpdateOneWithoutPrimaryCasesNestedInput
    messages?: MessageUpdateManyWithoutCaseNestedInput
    invites?: InviteUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    lawyerPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    clientPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutCaseNestedInput
    invites?: InviteUncheckedUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUncheckedUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseCreateWithoutInvitesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCasesInput
    lawyerPrimary?: UserCreateNestedOneWithoutPrimaryCasesInput
    clientPrimary?: ClientCreateNestedOneWithoutPrimaryCasesInput
    messages?: MessageCreateNestedManyWithoutCaseInput
    files?: FileCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutInvitesInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    lawyerPrimaryId?: string | null
    clientPrimaryId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutCaseInput
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutCaseInput
    participantsUsers?: CaseParticipantUserUncheckedCreateNestedManyWithoutCaseInput
    participantsClients?: CaseParticipantClientUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutInvitesInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutInvitesInput, CaseUncheckedCreateWithoutInvitesInput>
  }

  export type TenantCreateWithoutInvitesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    clients?: ClientCreateNestedManyWithoutTenantInput
    cases?: CaseCreateNestedManyWithoutTenantInput
    messages?: MessageCreateNestedManyWithoutTenantInput
    files?: FileCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingCreateNestedOneWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutInvitesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    clients?: ClientUncheckedCreateNestedManyWithoutTenantInput
    cases?: CaseUncheckedCreateNestedManyWithoutTenantInput
    messages?: MessageUncheckedCreateNestedManyWithoutTenantInput
    files?: FileUncheckedCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingUncheckedCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingUncheckedCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingUncheckedCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingUncheckedCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingUncheckedCreateNestedOneWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutInvitesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutInvitesInput, TenantUncheckedCreateWithoutInvitesInput>
  }

  export type CaseUpsertWithoutInvitesInput = {
    update: XOR<CaseUpdateWithoutInvitesInput, CaseUncheckedUpdateWithoutInvitesInput>
    create: XOR<CaseCreateWithoutInvitesInput, CaseUncheckedCreateWithoutInvitesInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutInvitesInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutInvitesInput, CaseUncheckedUpdateWithoutInvitesInput>
  }

  export type CaseUpdateWithoutInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCasesNestedInput
    lawyerPrimary?: UserUpdateOneWithoutPrimaryCasesNestedInput
    clientPrimary?: ClientUpdateOneWithoutPrimaryCasesNestedInput
    messages?: MessageUpdateManyWithoutCaseNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    lawyerPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    clientPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutCaseNestedInput
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUncheckedUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type TenantUpsertWithoutInvitesInput = {
    update: XOR<TenantUpdateWithoutInvitesInput, TenantUncheckedUpdateWithoutInvitesInput>
    create: XOR<TenantCreateWithoutInvitesInput, TenantUncheckedCreateWithoutInvitesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutInvitesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutInvitesInput, TenantUncheckedUpdateWithoutInvitesInput>
  }

  export type TenantUpdateWithoutInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    clients?: ClientUpdateManyWithoutTenantNestedInput
    cases?: CaseUpdateManyWithoutTenantNestedInput
    messages?: MessageUpdateManyWithoutTenantNestedInput
    files?: FileUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    clients?: ClientUncheckedUpdateManyWithoutTenantNestedInput
    cases?: CaseUncheckedUpdateManyWithoutTenantNestedInput
    messages?: MessageUncheckedUpdateManyWithoutTenantNestedInput
    files?: FileUncheckedUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUncheckedUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUncheckedUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUncheckedUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUncheckedUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUncheckedUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutGeneralSettingInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    clients?: ClientCreateNestedManyWithoutTenantInput
    cases?: CaseCreateNestedManyWithoutTenantInput
    messages?: MessageCreateNestedManyWithoutTenantInput
    files?: FileCreateNestedManyWithoutTenantInput
    invites?: InviteCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventCreateNestedManyWithoutTenantInput
    notificationSetting?: NotificationSettingCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingCreateNestedOneWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutGeneralSettingInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    clients?: ClientUncheckedCreateNestedManyWithoutTenantInput
    cases?: CaseUncheckedCreateNestedManyWithoutTenantInput
    messages?: MessageUncheckedCreateNestedManyWithoutTenantInput
    files?: FileUncheckedCreateNestedManyWithoutTenantInput
    invites?: InviteUncheckedCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutTenantInput
    notificationSetting?: NotificationSettingUncheckedCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingUncheckedCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingUncheckedCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingUncheckedCreateNestedOneWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutGeneralSettingInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutGeneralSettingInput, TenantUncheckedCreateWithoutGeneralSettingInput>
  }

  export type TenantUpsertWithoutGeneralSettingInput = {
    update: XOR<TenantUpdateWithoutGeneralSettingInput, TenantUncheckedUpdateWithoutGeneralSettingInput>
    create: XOR<TenantCreateWithoutGeneralSettingInput, TenantUncheckedCreateWithoutGeneralSettingInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutGeneralSettingInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutGeneralSettingInput, TenantUncheckedUpdateWithoutGeneralSettingInput>
  }

  export type TenantUpdateWithoutGeneralSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    clients?: ClientUpdateManyWithoutTenantNestedInput
    cases?: CaseUpdateManyWithoutTenantNestedInput
    messages?: MessageUpdateManyWithoutTenantNestedInput
    files?: FileUpdateManyWithoutTenantNestedInput
    invites?: InviteUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUpdateManyWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutGeneralSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    clients?: ClientUncheckedUpdateManyWithoutTenantNestedInput
    cases?: CaseUncheckedUpdateManyWithoutTenantNestedInput
    messages?: MessageUncheckedUpdateManyWithoutTenantNestedInput
    files?: FileUncheckedUpdateManyWithoutTenantNestedInput
    invites?: InviteUncheckedUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUncheckedUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUncheckedUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUncheckedUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUncheckedUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutNotificationSettingInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    clients?: ClientCreateNestedManyWithoutTenantInput
    cases?: CaseCreateNestedManyWithoutTenantInput
    messages?: MessageCreateNestedManyWithoutTenantInput
    files?: FileCreateNestedManyWithoutTenantInput
    invites?: InviteCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingCreateNestedOneWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutNotificationSettingInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    clients?: ClientUncheckedCreateNestedManyWithoutTenantInput
    cases?: CaseUncheckedCreateNestedManyWithoutTenantInput
    messages?: MessageUncheckedCreateNestedManyWithoutTenantInput
    files?: FileUncheckedCreateNestedManyWithoutTenantInput
    invites?: InviteUncheckedCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingUncheckedCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingUncheckedCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingUncheckedCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingUncheckedCreateNestedOneWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutNotificationSettingInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutNotificationSettingInput, TenantUncheckedCreateWithoutNotificationSettingInput>
  }

  export type TenantUpsertWithoutNotificationSettingInput = {
    update: XOR<TenantUpdateWithoutNotificationSettingInput, TenantUncheckedUpdateWithoutNotificationSettingInput>
    create: XOR<TenantCreateWithoutNotificationSettingInput, TenantUncheckedCreateWithoutNotificationSettingInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutNotificationSettingInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutNotificationSettingInput, TenantUncheckedUpdateWithoutNotificationSettingInput>
  }

  export type TenantUpdateWithoutNotificationSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    clients?: ClientUpdateManyWithoutTenantNestedInput
    cases?: CaseUpdateManyWithoutTenantNestedInput
    messages?: MessageUpdateManyWithoutTenantNestedInput
    files?: FileUpdateManyWithoutTenantNestedInput
    invites?: InviteUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutNotificationSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    clients?: ClientUncheckedUpdateManyWithoutTenantNestedInput
    cases?: CaseUncheckedUpdateManyWithoutTenantNestedInput
    messages?: MessageUncheckedUpdateManyWithoutTenantNestedInput
    files?: FileUncheckedUpdateManyWithoutTenantNestedInput
    invites?: InviteUncheckedUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUncheckedUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUncheckedUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUncheckedUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUncheckedUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutSecuritySettingInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    clients?: ClientCreateNestedManyWithoutTenantInput
    cases?: CaseCreateNestedManyWithoutTenantInput
    messages?: MessageCreateNestedManyWithoutTenantInput
    files?: FileCreateNestedManyWithoutTenantInput
    invites?: InviteCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingCreateNestedOneWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutSecuritySettingInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    clients?: ClientUncheckedCreateNestedManyWithoutTenantInput
    cases?: CaseUncheckedCreateNestedManyWithoutTenantInput
    messages?: MessageUncheckedCreateNestedManyWithoutTenantInput
    files?: FileUncheckedCreateNestedManyWithoutTenantInput
    invites?: InviteUncheckedCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingUncheckedCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingUncheckedCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingUncheckedCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingUncheckedCreateNestedOneWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutSecuritySettingInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutSecuritySettingInput, TenantUncheckedCreateWithoutSecuritySettingInput>
  }

  export type TenantUpsertWithoutSecuritySettingInput = {
    update: XOR<TenantUpdateWithoutSecuritySettingInput, TenantUncheckedUpdateWithoutSecuritySettingInput>
    create: XOR<TenantCreateWithoutSecuritySettingInput, TenantUncheckedCreateWithoutSecuritySettingInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutSecuritySettingInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutSecuritySettingInput, TenantUncheckedUpdateWithoutSecuritySettingInput>
  }

  export type TenantUpdateWithoutSecuritySettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    clients?: ClientUpdateManyWithoutTenantNestedInput
    cases?: CaseUpdateManyWithoutTenantNestedInput
    messages?: MessageUpdateManyWithoutTenantNestedInput
    files?: FileUpdateManyWithoutTenantNestedInput
    invites?: InviteUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutSecuritySettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    clients?: ClientUncheckedUpdateManyWithoutTenantNestedInput
    cases?: CaseUncheckedUpdateManyWithoutTenantNestedInput
    messages?: MessageUncheckedUpdateManyWithoutTenantNestedInput
    files?: FileUncheckedUpdateManyWithoutTenantNestedInput
    invites?: InviteUncheckedUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUncheckedUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUncheckedUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUncheckedUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUncheckedUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutBillingSettingInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    clients?: ClientCreateNestedManyWithoutTenantInput
    cases?: CaseCreateNestedManyWithoutTenantInput
    messages?: MessageCreateNestedManyWithoutTenantInput
    files?: FileCreateNestedManyWithoutTenantInput
    invites?: InviteCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingCreateNestedOneWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutBillingSettingInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    clients?: ClientUncheckedCreateNestedManyWithoutTenantInput
    cases?: CaseUncheckedCreateNestedManyWithoutTenantInput
    messages?: MessageUncheckedCreateNestedManyWithoutTenantInput
    files?: FileUncheckedCreateNestedManyWithoutTenantInput
    invites?: InviteUncheckedCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingUncheckedCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingUncheckedCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingUncheckedCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingUncheckedCreateNestedOneWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutBillingSettingInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutBillingSettingInput, TenantUncheckedCreateWithoutBillingSettingInput>
  }

  export type TenantUpsertWithoutBillingSettingInput = {
    update: XOR<TenantUpdateWithoutBillingSettingInput, TenantUncheckedUpdateWithoutBillingSettingInput>
    create: XOR<TenantCreateWithoutBillingSettingInput, TenantUncheckedCreateWithoutBillingSettingInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutBillingSettingInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutBillingSettingInput, TenantUncheckedUpdateWithoutBillingSettingInput>
  }

  export type TenantUpdateWithoutBillingSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    clients?: ClientUpdateManyWithoutTenantNestedInput
    cases?: CaseUpdateManyWithoutTenantNestedInput
    messages?: MessageUpdateManyWithoutTenantNestedInput
    files?: FileUpdateManyWithoutTenantNestedInput
    invites?: InviteUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutBillingSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    clients?: ClientUncheckedUpdateManyWithoutTenantNestedInput
    cases?: CaseUncheckedUpdateManyWithoutTenantNestedInput
    messages?: MessageUncheckedUpdateManyWithoutTenantNestedInput
    files?: FileUncheckedUpdateManyWithoutTenantNestedInput
    invites?: InviteUncheckedUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUncheckedUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUncheckedUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUncheckedUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUncheckedUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutIntegrationSettingInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    clients?: ClientCreateNestedManyWithoutTenantInput
    cases?: CaseCreateNestedManyWithoutTenantInput
    messages?: MessageCreateNestedManyWithoutTenantInput
    files?: FileCreateNestedManyWithoutTenantInput
    invites?: InviteCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingCreateNestedOneWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutIntegrationSettingInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    clients?: ClientUncheckedCreateNestedManyWithoutTenantInput
    cases?: CaseUncheckedCreateNestedManyWithoutTenantInput
    messages?: MessageUncheckedCreateNestedManyWithoutTenantInput
    files?: FileUncheckedCreateNestedManyWithoutTenantInput
    invites?: InviteUncheckedCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingUncheckedCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingUncheckedCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingUncheckedCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingUncheckedCreateNestedOneWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutIntegrationSettingInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutIntegrationSettingInput, TenantUncheckedCreateWithoutIntegrationSettingInput>
  }

  export type TenantUpsertWithoutIntegrationSettingInput = {
    update: XOR<TenantUpdateWithoutIntegrationSettingInput, TenantUncheckedUpdateWithoutIntegrationSettingInput>
    create: XOR<TenantCreateWithoutIntegrationSettingInput, TenantUncheckedCreateWithoutIntegrationSettingInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutIntegrationSettingInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutIntegrationSettingInput, TenantUncheckedUpdateWithoutIntegrationSettingInput>
  }

  export type TenantUpdateWithoutIntegrationSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    clients?: ClientUpdateManyWithoutTenantNestedInput
    cases?: CaseUpdateManyWithoutTenantNestedInput
    messages?: MessageUpdateManyWithoutTenantNestedInput
    files?: FileUpdateManyWithoutTenantNestedInput
    invites?: InviteUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutIntegrationSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    clients?: ClientUncheckedUpdateManyWithoutTenantNestedInput
    cases?: CaseUncheckedUpdateManyWithoutTenantNestedInput
    messages?: MessageUncheckedUpdateManyWithoutTenantNestedInput
    files?: FileUncheckedUpdateManyWithoutTenantNestedInput
    invites?: InviteUncheckedUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUncheckedUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUncheckedUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUncheckedUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUncheckedUpdateOneWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutEmployeesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTenantInput
    clients?: ClientCreateNestedManyWithoutTenantInput
    cases?: CaseCreateNestedManyWithoutTenantInput
    messages?: MessageCreateNestedManyWithoutTenantInput
    files?: FileCreateNestedManyWithoutTenantInput
    invites?: InviteCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingCreateNestedOneWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutEmployeesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    clients?: ClientUncheckedCreateNestedManyWithoutTenantInput
    cases?: CaseUncheckedCreateNestedManyWithoutTenantInput
    messages?: MessageUncheckedCreateNestedManyWithoutTenantInput
    files?: FileUncheckedCreateNestedManyWithoutTenantInput
    invites?: InviteUncheckedCreateNestedManyWithoutTenantInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutTenantInput
    generalSetting?: GeneralSettingUncheckedCreateNestedOneWithoutTenantInput
    notificationSetting?: NotificationSettingUncheckedCreateNestedOneWithoutTenantInput
    securitySetting?: SecuritySettingUncheckedCreateNestedOneWithoutTenantInput
    billingSetting?: BillingSettingUncheckedCreateNestedOneWithoutTenantInput
    integrationSetting?: IntegrationSettingUncheckedCreateNestedOneWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutEmployeesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutEmployeesInput, TenantUncheckedCreateWithoutEmployeesInput>
  }

  export type UserCreateWithoutEmployeeInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenant: TenantCreateNestedOneWithoutUsersInput
    primaryCases?: CaseCreateNestedManyWithoutLawyerPrimaryInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    participatingCases?: CaseParticipantUserCreateNestedManyWithoutUserInput
    caseEvents?: CaseEventCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionCreateNestedManyWithoutUserInput
    Client?: ClientCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmployeeInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
    tenantId: string
    primaryCases?: CaseUncheckedCreateNestedManyWithoutLawyerPrimaryInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participatingCases?: CaseParticipantUserUncheckedCreateNestedManyWithoutUserInput
    caseEvents?: CaseEventUncheckedCreateNestedManyWithoutUserInput
    userPermissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Client?: ClientUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmployeeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
  }

  export type TenantUpsertWithoutEmployeesInput = {
    update: XOR<TenantUpdateWithoutEmployeesInput, TenantUncheckedUpdateWithoutEmployeesInput>
    create: XOR<TenantCreateWithoutEmployeesInput, TenantUncheckedCreateWithoutEmployeesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutEmployeesInput, TenantUncheckedUpdateWithoutEmployeesInput>
  }

  export type TenantUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTenantNestedInput
    clients?: ClientUpdateManyWithoutTenantNestedInput
    cases?: CaseUpdateManyWithoutTenantNestedInput
    messages?: MessageUpdateManyWithoutTenantNestedInput
    files?: FileUpdateManyWithoutTenantNestedInput
    invites?: InviteUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUpdateOneWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    clients?: ClientUncheckedUpdateManyWithoutTenantNestedInput
    cases?: CaseUncheckedUpdateManyWithoutTenantNestedInput
    messages?: MessageUncheckedUpdateManyWithoutTenantNestedInput
    files?: FileUncheckedUpdateManyWithoutTenantNestedInput
    invites?: InviteUncheckedUpdateManyWithoutTenantNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutTenantNestedInput
    generalSetting?: GeneralSettingUncheckedUpdateOneWithoutTenantNestedInput
    notificationSetting?: NotificationSettingUncheckedUpdateOneWithoutTenantNestedInput
    securitySetting?: SecuritySettingUncheckedUpdateOneWithoutTenantNestedInput
    billingSetting?: BillingSettingUncheckedUpdateOneWithoutTenantNestedInput
    integrationSetting?: IntegrationSettingUncheckedUpdateOneWithoutTenantNestedInput
  }

  export type UserUpsertWithoutEmployeeInput = {
    update: XOR<UserUpdateWithoutEmployeeInput, UserUncheckedUpdateWithoutEmployeeInput>
    create: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmployeeInput, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type UserUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    primaryCases?: CaseUpdateManyWithoutLawyerPrimaryNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    participatingCases?: CaseParticipantUserUpdateManyWithoutUserNestedInput
    caseEvents?: CaseEventUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUpdateManyWithoutUserNestedInput
    Client?: ClientUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tenantId?: StringFieldUpdateOperationsInput | string
    primaryCases?: CaseUncheckedUpdateManyWithoutLawyerPrimaryNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participatingCases?: CaseParticipantUserUncheckedUpdateManyWithoutUserNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Client?: ClientUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserPermissionCreateManyPermissionInput = {
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPermissionUpdateWithoutPermissionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserPermissionsNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutPermissionInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionUncheckedUpdateManyWithoutPermissionInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyTenantInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive: boolean
  }

  export type ClientCreateManyTenantInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type CaseCreateManyTenantInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    lawyerPrimaryId?: string | null
    clientPrimaryId?: string | null
  }

  export type MessageCreateManyTenantInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    senderId?: string | null
    senderClientId?: string | null
    receiverClientId: string
  }

  export type FileCreateManyTenantInput = {
    id?: string
    name: string
    url: string
    uploadedAt?: Date | string
    caseId: string
  }

  export type InviteCreateManyTenantInput = {
    id?: string
    email: string
    token: string
    expiresAt: Date | string
    isUsed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
  }

  export type CaseEventCreateManyTenantInput = {
    id?: string
    type: string
    description?: string | null
    timestamp?: Date | string
    caseId: string
    userId?: string | null
  }

  export type EmployeeCreateManyTenantInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    status?: $Enums.EmployeeStatus
    invitedAt?: Date | string
    acceptedAt?: Date | string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    primaryCases?: CaseUpdateManyWithoutLawyerPrimaryNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    participatingCases?: CaseParticipantUserUpdateManyWithoutUserNestedInput
    caseEvents?: CaseEventUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUpdateManyWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    Client?: ClientUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    primaryCases?: CaseUncheckedUpdateManyWithoutLawyerPrimaryNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participatingCases?: CaseParticipantUserUncheckedUpdateManyWithoutUserNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutUserNestedInput
    userPermissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    Client?: ClientUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClientUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutClientNestedInput
    primaryCases?: CaseUpdateManyWithoutClientPrimaryNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverClientNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderClientNestedInput
    participatingCases?: CaseParticipantClientUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    primaryCases?: CaseUncheckedUpdateManyWithoutClientPrimaryNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverClientNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderClientNestedInput
    participatingCases?: CaseParticipantClientUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CaseUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lawyerPrimary?: UserUpdateOneWithoutPrimaryCasesNestedInput
    clientPrimary?: ClientUpdateOneWithoutPrimaryCasesNestedInput
    messages?: MessageUpdateManyWithoutCaseNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    invites?: InviteUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lawyerPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    clientPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutCaseNestedInput
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    invites?: InviteUncheckedUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUncheckedUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lawyerPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    clientPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneWithoutSentMessagesNestedInput
    senderClient?: ClientUpdateOneWithoutSentMessagesNestedInput
    receiverClient?: ClientUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    senderClientId?: NullableStringFieldUpdateOperationsInput | string | null
    receiverClientId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    senderClientId?: NullableStringFieldUpdateOperationsInput | string | null
    receiverClientId?: StringFieldUpdateOperationsInput | string
  }

  export type FileUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type FileUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type InviteUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutInvitesNestedInput
  }

  export type InviteUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type InviteUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type CaseEventUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutCaseEventsNestedInput
    user?: UserUpdateOneWithoutCaseEventsNestedInput
  }

  export type CaseEventUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CaseEventUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployeeUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    invitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    invitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    invitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseCreateManyLawyerPrimaryInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    clientPrimaryId?: string | null
  }

  export type MessageCreateManySenderInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    tenantId: string
    senderClientId?: string | null
    receiverClientId: string
  }

  export type CaseParticipantUserCreateManyUserInput = {
    caseId: string
    role?: $Enums.CaseParticipantUserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseEventCreateManyUserInput = {
    id?: string
    type: string
    description?: string | null
    timestamp?: Date | string
    caseId: string
    tenantId: string
  }

  export type UserPermissionCreateManyUserInput = {
    permissionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseUpdateWithoutLawyerPrimaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCasesNestedInput
    clientPrimary?: ClientUpdateOneWithoutPrimaryCasesNestedInput
    messages?: MessageUpdateManyWithoutCaseNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    invites?: InviteUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutLawyerPrimaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    clientPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutCaseNestedInput
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    invites?: InviteUncheckedUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUncheckedUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateManyWithoutLawyerPrimaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    clientPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutMessagesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutMessagesNestedInput
    senderClient?: ClientUpdateOneWithoutSentMessagesNestedInput
    receiverClient?: ClientUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    senderClientId?: NullableStringFieldUpdateOperationsInput | string | null
    receiverClientId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    senderClientId?: NullableStringFieldUpdateOperationsInput | string | null
    receiverClientId?: StringFieldUpdateOperationsInput | string
  }

  export type CaseParticipantUserUpdateWithoutUserInput = {
    role?: EnumCaseParticipantUserRoleFieldUpdateOperationsInput | $Enums.CaseParticipantUserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutParticipantsUsersNestedInput
  }

  export type CaseParticipantUserUncheckedUpdateWithoutUserInput = {
    caseId?: StringFieldUpdateOperationsInput | string
    role?: EnumCaseParticipantUserRoleFieldUpdateOperationsInput | $Enums.CaseParticipantUserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseParticipantUserUncheckedUpdateManyWithoutUserInput = {
    caseId?: StringFieldUpdateOperationsInput | string
    role?: EnumCaseParticipantUserRoleFieldUpdateOperationsInput | $Enums.CaseParticipantUserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseEventUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutCaseEventsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutCaseEventsNestedInput
  }

  export type CaseEventUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type CaseEventUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type UserPermissionUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permission?: PermissionUpdateOneRequiredWithoutUserPermissionsNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutUserInput = {
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserInput = {
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseCreateManyClientPrimaryInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    lawyerPrimaryId?: string | null
  }

  export type MessageCreateManyReceiverClientInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    tenantId: string
    senderId?: string | null
    senderClientId?: string | null
  }

  export type MessageCreateManySenderClientInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseId: string
    tenantId: string
    senderId?: string | null
    receiverClientId: string
  }

  export type CaseParticipantClientCreateManyClientInput = {
    caseId: string
    type?: $Enums.CaseParticipantClientType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseUpdateWithoutClientPrimaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCasesNestedInput
    lawyerPrimary?: UserUpdateOneWithoutPrimaryCasesNestedInput
    messages?: MessageUpdateManyWithoutCaseNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    invites?: InviteUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutClientPrimaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    lawyerPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutCaseNestedInput
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    invites?: InviteUncheckedUpdateManyWithoutCaseNestedInput
    caseEvents?: CaseEventUncheckedUpdateManyWithoutCaseNestedInput
    participantsUsers?: CaseParticipantUserUncheckedUpdateManyWithoutCaseNestedInput
    participantsClients?: CaseParticipantClientUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateManyWithoutClientPrimaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    lawyerPrimaryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUpdateWithoutReceiverClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutMessagesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneWithoutSentMessagesNestedInput
    senderClient?: ClientUpdateOneWithoutSentMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutReceiverClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    senderClientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUncheckedUpdateManyWithoutReceiverClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    senderClientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUpdateWithoutSenderClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutMessagesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneWithoutSentMessagesNestedInput
    receiverClient?: ClientUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    receiverClientId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyWithoutSenderClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    receiverClientId?: StringFieldUpdateOperationsInput | string
  }

  export type CaseParticipantClientUpdateWithoutClientInput = {
    type?: EnumCaseParticipantClientTypeFieldUpdateOperationsInput | $Enums.CaseParticipantClientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutParticipantsClientsNestedInput
  }

  export type CaseParticipantClientUncheckedUpdateWithoutClientInput = {
    caseId?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseParticipantClientTypeFieldUpdateOperationsInput | $Enums.CaseParticipantClientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseParticipantClientUncheckedUpdateManyWithoutClientInput = {
    caseId?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseParticipantClientTypeFieldUpdateOperationsInput | $Enums.CaseParticipantClientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyCaseInput = {
    id?: string
    content: string
    viewed?: boolean
    viewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    senderId?: string | null
    senderClientId?: string | null
    receiverClientId: string
  }

  export type FileCreateManyCaseInput = {
    id?: string
    name: string
    url: string
    uploadedAt?: Date | string
    tenantId: string
  }

  export type InviteCreateManyCaseInput = {
    id?: string
    email: string
    token: string
    expiresAt: Date | string
    isUsed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type CaseEventCreateManyCaseInput = {
    id?: string
    type: string
    description?: string | null
    timestamp?: Date | string
    userId?: string | null
    tenantId: string
  }

  export type CaseParticipantUserCreateManyCaseInput = {
    userId: string
    role?: $Enums.CaseParticipantUserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseParticipantClientCreateManyCaseInput = {
    clientId: string
    type?: $Enums.CaseParticipantClientType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneWithoutSentMessagesNestedInput
    senderClient?: ClientUpdateOneWithoutSentMessagesNestedInput
    receiverClient?: ClientUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    senderClientId?: NullableStringFieldUpdateOperationsInput | string | null
    receiverClientId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    viewed?: BoolFieldUpdateOperationsInput | boolean
    viewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    senderClientId?: NullableStringFieldUpdateOperationsInput | string | null
    receiverClientId?: StringFieldUpdateOperationsInput | string
  }

  export type FileUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type FileUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type InviteUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutInvitesNestedInput
  }

  export type InviteUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type InviteUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type CaseEventUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCaseEventsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutCaseEventsNestedInput
  }

  export type CaseEventUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type CaseEventUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type CaseParticipantUserUpdateWithoutCaseInput = {
    role?: EnumCaseParticipantUserRoleFieldUpdateOperationsInput | $Enums.CaseParticipantUserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutParticipatingCasesNestedInput
  }

  export type CaseParticipantUserUncheckedUpdateWithoutCaseInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCaseParticipantUserRoleFieldUpdateOperationsInput | $Enums.CaseParticipantUserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseParticipantUserUncheckedUpdateManyWithoutCaseInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCaseParticipantUserRoleFieldUpdateOperationsInput | $Enums.CaseParticipantUserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseParticipantClientUpdateWithoutCaseInput = {
    type?: EnumCaseParticipantClientTypeFieldUpdateOperationsInput | $Enums.CaseParticipantClientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutParticipatingCasesNestedInput
  }

  export type CaseParticipantClientUncheckedUpdateWithoutCaseInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseParticipantClientTypeFieldUpdateOperationsInput | $Enums.CaseParticipantClientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseParticipantClientUncheckedUpdateManyWithoutCaseInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    type?: EnumCaseParticipantClientTypeFieldUpdateOperationsInput | $Enums.CaseParticipantClientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PermissionCountOutputTypeDefaultArgs instead
     */
    export type PermissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantCountOutputTypeDefaultArgs instead
     */
    export type TenantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientCountOutputTypeDefaultArgs instead
     */
    export type ClientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseCountOutputTypeDefaultArgs instead
     */
    export type CaseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionDefaultArgs instead
     */
    export type PermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPermissionDefaultArgs instead
     */
    export type UserPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserPermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantDefaultArgs instead
     */
    export type TenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientDefaultArgs instead
     */
    export type ClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseDefaultArgs instead
     */
    export type CaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseParticipantUserDefaultArgs instead
     */
    export type CaseParticipantUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseParticipantUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseParticipantClientDefaultArgs instead
     */
    export type CaseParticipantClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseParticipantClientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseEventDefaultArgs instead
     */
    export type CaseEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FileDefaultArgs instead
     */
    export type FileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InviteDefaultArgs instead
     */
    export type InviteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InviteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GeneralSettingDefaultArgs instead
     */
    export type GeneralSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GeneralSettingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationSettingDefaultArgs instead
     */
    export type NotificationSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationSettingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SecuritySettingDefaultArgs instead
     */
    export type SecuritySettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SecuritySettingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BillingSettingDefaultArgs instead
     */
    export type BillingSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BillingSettingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IntegrationSettingDefaultArgs instead
     */
    export type IntegrationSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IntegrationSettingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeDefaultArgs instead
     */
    export type EmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}